
==================== FINAL INTERFACE ====================
2018-12-06 21:30:47.376516918 UTC

interface HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY:TigerQQ 8043
  interface hash: 8ce3a4f84575313defe4c4b9a01f4f7d
  ABI hash: 6240ad01a264ec8211aa2f9edf1e2a54
  export-list hash: 0c6521ef6f62c0f6d0371b24a9c50dd5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fb30f40bd47a26ad6864f8674b3f8ced
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerQQ.antiExprPat
  TigerQQ.expr
  TigerQQ.handleSymbol
  TigerQQ.quoteExprExp
  TigerQQ.quoteExprPat
module dependencies: TigerAbs TigerLexer TigerParser TigerSymbol
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      parsec-3.1.13.0 pretty-1.1.3.6 syb-0.7 template-haskell-2.13.0.0
                      text-1.2.3.0 transformers-0.5.5.0
orphans: text-1.2.3.0:Data.Text.Lazy
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show syb-0.7:Data.Generics.Instances
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  TigerAbs 1d186fe051144908f0c50c683d8be41b
  exports: 66e1533f82207906d70ea37c53c3d5c6
  Exp ad89b6e5e364054c22a55dff17ee7887
import  -/  TigerParser 3bfa0338b85920b456f0621dfc681037
  exports: 13f48254be81a1bfc1f1e676b19e5b9d
  parseFromStr 39c0f5248ad42555c81b94467eaf818b
import  -/  TigerSymbol 8cdb62767ac36bcd684c9f1304d4a564
  exports: da94fd004c9146d1f25642212f80c685
  Symbol 8706b0bbdbf6daae41c5fa34f29c9575
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  template-haskell-2.13.0.0:Language.Haskell.TH 8c7daf59c30f2d6867e9648969e317fc
import  -/  template-haskell-2.13.0.0:Language.Haskell.TH.Lib.Internal 2fce8062e0f808cd5f150d375cfd7105
import  -/  template-haskell-2.13.0.0:Language.Haskell.TH.Quote 4753800554c2c18a1d981e894c5ed618
import  -/  template-haskell-2.13.0.0:Language.Haskell.TH.Syntax 3e32e309555ba250b4e64084f1389487
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
9bfa67090b9873e5297f1bb6e6070a60
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerQQ.$trModule3
                   TigerQQ.$trModule1) -}
f4631dcdf985ec0d281e4af8f04b202c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerQQ.$trModule2) -}
4a0d3a4e1dd0e70dcde30325278c1bec
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TigerQQ"#) -}
d6c32600f9bd159854611387e5120cf4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerQQ.$trModule4) -}
09796e69eccd1c35ed3fffd8a8346d86
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY"#) -}
cf57d79dae437e0c9fa35a51b65585d8
  $whandleSymbol ::
    TigerSymbol.Symbol -> (# Language.Haskell.TH.Lib.Internal.ExpQ #)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: TigerSymbol.Symbol) ->
                 (# (Language.Haskell.TH.Lib.Internal.appE1
                       TigerQQ.handleSymbol1
                         `cast`
                       (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                 <Language.Haskell.TH.Syntax.Exp>_N))
                       (Language.Haskell.TH.Lib.Internal.litE1
                          (Language.Haskell.TH.Syntax.StringL
                             (case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                              let {
                                end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                              } in
                              letrec {
                                $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                = \ (ww :: GHC.Prim.Int#) ->
                                  case GHC.Prim.>=# ww end of lwild {
                                    DEFAULT
                                    -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                       case GHC.Prim.geWord# r# 55296## of lwild1 {
                                         DEFAULT
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                              ($wunfold (GHC.Prim.+# ww 1#))
                                         1#
                                         -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                              DEFAULT
                                              -> GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Types.C#
                                                      (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                   ($wunfold (GHC.Prim.+# ww 1#))
                                              1#
                                              -> case GHC.Prim.indexWord16Array#
                                                        dt
                                                        (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                 GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Types.C#
                                                      (GHC.Prim.chr#
                                                         (GHC.Prim.+#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.uncheckedIShiftL#
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#)
                                                                     55296#)
                                                                  10#)
                                                               (GHC.Prim.-#
                                                                  (GHC.Prim.word2Int# r#1)
                                                                  56320#))
                                                            65536#)))
                                                   ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                    1# -> GHC.Types.[] @ GHC.Types.Char }
                              } in
                              $wunfold dt1 })))
                         `cast`
                       (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                 <Language.Haskell.TH.Syntax.Exp>_N)))
                      `cast`
                    (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                              <Language.Haskell.TH.Syntax.Exp>_N)) #)) -}
63d420998537417bb804f1c37edae549
  antiExprPat ::
    TigerAbs.Exp
    -> GHC.Base.Maybe
         (Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Pat)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: TigerAbs.Exp) ->
                 GHC.Base.Nothing
                   @ (Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Pat)) -}
d2c6bf6ece7cd6b82b33f7c4452c86d0
  expr :: Language.Haskell.TH.Quote.QuasiQuoter
  {- Strictness: m,
     Unfolding: (Language.Haskell.TH.Quote.QuasiQuoter
                   TigerQQ.expr6
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                  <Language.Haskell.TH.Syntax.Exp>_N))
                   TigerQQ.expr3
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                  <Language.Haskell.TH.Syntax.Pat>_N))
                   TigerQQ.expr2
                   TigerQQ.expr1) -}
5bb1c2d62f1d0d349343099d0addd550
  expr1 ::
    GHC.Base.String
    -> Language.Haskell.TH.Syntax.Q [Language.Haskell.TH.Syntax.Dec]
  {- Strictness: x -}
ba7ab77802c8d9d45fc297c4c5a75f54
  expr2 ::
    GHC.Base.String
    -> Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Type
  {- Strictness: x -}
513d0b599d07762554036f3ceb375fe8
  expr3 ::
    GHC.Base.String
    -> forall (m :: * -> *).
       Language.Haskell.TH.Syntax.Quasi m =>
       m Language.Haskell.TH.Syntax.Pat
  {- Arity: 2,
     Strictness: <L,U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U),U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ (s :: GHC.Base.String)
                   @ m :: * -> *
                   ($dQuasi :: Language.Haskell.TH.Syntax.Quasi m) ->
                 let {
                   lvl14 :: Control.Monad.IO.Class.MonadIO m
                   = Language.Haskell.TH.Syntax.$p1Quasi @ m $dQuasi
                 } in
                 let {
                   lvl15 :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m lvl14
                 } in
                 let {
                   lvl16 :: TigerAbs.Exp -> m Language.Haskell.TH.Syntax.Pat
                     {- Arity: 1, Strictness: <L,U>,
                        Unfolding: InlineRule (1, True, False)
                                   (\ (x :: TigerAbs.Exp) ->
                                    (Language.Haskell.TH.Syntax.dataToPatQ_$sdataToQa
                                       @ TigerAbs.Exp
                                       x
                                       TigerQQ.expr4
                                       @~ (<Language.Haskell.TH.Syntax.Lit>_R
                                           ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                                         <Language.Haskell.TH.Syntax.Pat>_N))
                                       (GHC.Base.id @ Language.Haskell.TH.Syntax.Name)
                                       TigerAbs.$fDataExp)
                                      `cast`
                                    (Language.Haskell.TH.Syntax.N:Q[0]
                                         <Language.Haskell.TH.Syntax.Pat>_N)
                                      @ m
                                      $dQuasi) -}
                   = \ (x :: TigerAbs.Exp) ->
                     (Language.Haskell.TH.Syntax.dataToPatQ_$sdataToQa
                        @ TigerAbs.Exp
                        x
                        TigerQQ.expr4
                        @~ (<Language.Haskell.TH.Syntax.Lit>_R
                            ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                          <Language.Haskell.TH.Syntax.Pat>_N))
                        (GHC.Base.id @ Language.Haskell.TH.Syntax.Name)
                        TigerAbs.$fDataExp)
                       `cast`
                     (Language.Haskell.TH.Syntax.N:Q[0]
                          <Language.Haskell.TH.Syntax.Pat>_N)
                       @ m
                       $dQuasi
                 } in
                 GHC.Base.>>=
                   @ m
                   lvl15
                   @ Language.Haskell.TH.Syntax.Loc
                   @ Language.Haskell.TH.Syntax.Pat
                   (Language.Haskell.TH.Syntax.qLocation @ m $dQuasi)
                   (\ (x :: Language.Haskell.TH.Syntax.Loc) ->
                    GHC.Base.>>=
                      @ m
                      lvl15
                      @ TigerAbs.Exp
                      @ Language.Haskell.TH.Syntax.Pat
                      ((TigerParser.$wparseFromStr
                          @ Language.Haskell.TH.Syntax.Q
                          Language.Haskell.TH.Syntax.$fMonadQ
                          (case x of wild { Language.Haskell.TH.Syntax.Loc ds1 ds2 ds3 ds4 ds5 ->
                           ds1 })
                          (case x of wild { Language.Haskell.TH.Syntax.Loc ds1 ds2 ds3 ds4 ds5 ->
                           case ds4 of wild1 { (,) x1 ds7 -> x1 } })
                          (case x of wild { Language.Haskell.TH.Syntax.Loc ds1 ds2 ds3 ds4 ds5 ->
                           case ds4 of wild1 { (,) ds7 y -> y } })
                          s)
                         `cast`
                       (Language.Haskell.TH.Syntax.N:Q[0] <TigerAbs.Exp>_N)
                         @ m
                         $dQuasi)
                      lvl16)) -}
d655e3d97e9b39777dc181266c1d9c29
  expr4 ::
    Data.Data.Data b =>
    b
    -> GHC.Base.Maybe
         (Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Pat)
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b ($dData :: Data.Data.Data b) (a1 :: b)[OneShot] ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ b
                        (Data.Data.$p1Data @ b $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <b>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case TigerQQ.expr5 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 GHC.Base.Nothing
                   @ (Language.Haskell.TH.Syntax.Q
                        Language.Haskell.TH.Syntax.Pat) } }) -}
20f722dd054b36555c14da5c01844c3f
  expr5 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ TigerAbs.Exp
                        13046100695539841191##
                        9125187534461383548##
                        TigerAbs.$trModule
                        TigerAbs.$fDataExp10
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ TigerAbs.Exp
                   (Data.Typeable.Internal.TrTyCon
                      @ *
                      @ TigerAbs.Exp
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12) }) -}
1598e6d5758dc170faf496bfa717307d
  expr6 ::
    GHC.Base.String
    -> forall (m :: * -> *).
       Language.Haskell.TH.Syntax.Quasi m =>
       m Language.Haskell.TH.Syntax.Exp
  {- Arity: 2,
     Strictness: <L,U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U),U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ (s :: GHC.Base.String)
                   @ m :: * -> *
                   ($dQuasi :: Language.Haskell.TH.Syntax.Quasi m) ->
                 let {
                   lvl14 :: Control.Monad.IO.Class.MonadIO m
                   = Language.Haskell.TH.Syntax.$p1Quasi @ m $dQuasi
                 } in
                 let {
                   lvl15 :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m lvl14
                 } in
                 let {
                   lvl16 :: TigerAbs.Exp -> m Language.Haskell.TH.Syntax.Exp
                     {- Arity: 1, Strictness: <L,U>,
                        Unfolding: InlineRule (1, True, False)
                                   (\ (x :: TigerAbs.Exp) ->
                                    (Language.Haskell.TH.Syntax.dataToExpQ_$sdataToQa
                                       @ TigerAbs.Exp
                                       x
                                       TigerQQ.expr7
                                       @~ (<Language.Haskell.TH.Syntax.Lit>_R
                                           ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                                         <Language.Haskell.TH.Syntax.Exp>_N))
                                       TigerAbs.$fDataExp)
                                      `cast`
                                    (Language.Haskell.TH.Syntax.N:Q[0]
                                         <Language.Haskell.TH.Syntax.Exp>_N)
                                      @ m
                                      $dQuasi) -}
                   = \ (x :: TigerAbs.Exp) ->
                     (Language.Haskell.TH.Syntax.dataToExpQ_$sdataToQa
                        @ TigerAbs.Exp
                        x
                        TigerQQ.expr7
                        @~ (<Language.Haskell.TH.Syntax.Lit>_R
                            ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                          <Language.Haskell.TH.Syntax.Exp>_N))
                        TigerAbs.$fDataExp)
                       `cast`
                     (Language.Haskell.TH.Syntax.N:Q[0]
                          <Language.Haskell.TH.Syntax.Exp>_N)
                       @ m
                       $dQuasi
                 } in
                 GHC.Base.>>=
                   @ m
                   lvl15
                   @ Language.Haskell.TH.Syntax.Loc
                   @ Language.Haskell.TH.Syntax.Exp
                   (Language.Haskell.TH.Syntax.qLocation @ m $dQuasi)
                   (\ (x :: Language.Haskell.TH.Syntax.Loc) ->
                    GHC.Base.>>=
                      @ m
                      lvl15
                      @ TigerAbs.Exp
                      @ Language.Haskell.TH.Syntax.Exp
                      ((TigerParser.$wparseFromStr
                          @ Language.Haskell.TH.Syntax.Q
                          Language.Haskell.TH.Syntax.$fMonadQ
                          (case x of wild { Language.Haskell.TH.Syntax.Loc ds1 ds2 ds3 ds4 ds5 ->
                           ds1 })
                          (case x of wild { Language.Haskell.TH.Syntax.Loc ds1 ds2 ds3 ds4 ds5 ->
                           case ds4 of wild1 { (,) x1 ds7 -> x1 } })
                          (case x of wild { Language.Haskell.TH.Syntax.Loc ds1 ds2 ds3 ds4 ds5 ->
                           case ds4 of wild1 { (,) ds7 y -> y } })
                          s)
                         `cast`
                       (Language.Haskell.TH.Syntax.N:Q[0] <TigerAbs.Exp>_N)
                         @ m
                         $dQuasi)
                      lvl16)) -}
4f814d15f0422200d9ae405a43bf992b
  expr7 ::
    Data.Data.Data b =>
    b -> GHC.Base.Maybe Language.Haskell.TH.Lib.Internal.ExpQ
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ b
                   ($dData :: Data.Data.Data b)
                   (a1 :: b)[OneShot] ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ b
                        (Data.Data.$p1Data @ b $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <b>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case TigerQQ.expr8 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT -> GHC.Base.Nothing @ Language.Haskell.TH.Lib.Internal.ExpQ
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT -> GHC.Base.Nothing @ Language.Haskell.TH.Lib.Internal.ExpQ
                        1#
                        -> TigerQQ.handleSymbol
                             a1
                               `cast`
                             (UnsafeCo representational b TigerSymbol.Symbol) } } } }) -}
2e79bf532216f7807e79b243d5632e17
  expr8 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ TigerSymbol.Symbol
                        3810241021376807344##
                        7034524702488815325##
                        Data.Text.Internal.$trModule
                        Data.Text.Internal.$tcText1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ TigerSymbol.Symbol
                   (Data.Typeable.Internal.TrTyCon
                      @ *
                      @ TigerSymbol.Symbol
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12) }) -}
ee9af226b0486c6bb4fe38328734316e
  handleSymbol ::
    TigerSymbol.Symbol
    -> GHC.Base.Maybe Language.Haskell.TH.Lib.Internal.ExpQ
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerSymbol.Symbol) ->
                 case TigerQQ.$whandleSymbol w of ww { Unit# ww1 ->
                 GHC.Base.Just @ Language.Haskell.TH.Lib.Internal.ExpQ ww1 }) -}
4dda8b323f29e33f80630b7920e12843
  handleSymbol1 ::
    Language.Haskell.TH.Syntax.Quasi m =>
    m Language.Haskell.TH.Syntax.Exp
  {- Arity: 1,
     Unfolding: (Language.Haskell.TH.Lib.Internal.varE1
                   TigerQQ.handleSymbol2) -}
097bcc816aa3d4f20c5d8d67cf8e3bfb
  handleSymbol2 :: Language.Haskell.TH.Syntax.Name
  {- Strictness: m,
     Unfolding: (Language.Haskell.TH.Syntax.Name
                   TigerQQ.handleSymbol8
                     `cast`
                   (Sym (Language.Haskell.TH.Syntax.N:OccName[0]))
                   TigerQQ.handleSymbol3) -}
b3c389b1e4c95273a2ba2322e3131c4f
  handleSymbol3 :: Language.Haskell.TH.Syntax.NameFlavour
  {- Strictness: m5,
     Unfolding: (Language.Haskell.TH.Syntax.NameG
                   Language.Haskell.TH.Syntax.VarName
                   TigerQQ.handleSymbol6
                     `cast`
                   (Sym (Language.Haskell.TH.Syntax.N:PkgName[0]))
                   TigerQQ.handleSymbol4
                     `cast`
                   (Sym (Language.Haskell.TH.Syntax.N:ModName[0]))) -}
a146e8cb2b5421f7ab4701d4009f93dd
  handleSymbol4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerQQ.handleSymbol5) -}
61943b52e852d9e4e81c13958096e0f0
  handleSymbol5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data.Text"#) -}
ed0fd4e6c193b627055173c8e7c40f3b
  handleSymbol6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerQQ.handleSymbol7) -}
2f7d1109ed623e6cc3e6320afe70a679
  handleSymbol7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("text-1.2.3.0"#) -}
84c00ee2b7fa29fa5af428f47c5827e2
  handleSymbol8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerQQ.handleSymbol9) -}
75568fb49597e9448782c4ffe2f84ac6
  handleSymbol9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("pack"#) -}
fde7fbca4a63b9abfe83d3c7b7e07e3d
  quoteExprExp ::
    GHC.Base.String -> Language.Haskell.TH.Lib.Internal.ExpQ
  {- Arity: 2,
     Strictness: <L,U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U),U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerQQ.expr6
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                               <Language.Haskell.TH.Syntax.Exp>_N)) -}
6565dea6416bfe0facc00d9dc56931ee
  quoteExprPat ::
    GHC.Base.String -> Language.Haskell.TH.Lib.Internal.PatQ
  {- Arity: 2,
     Strictness: <L,U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U),U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerQQ.expr3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                               <Language.Haskell.TH.Syntax.Pat>_N)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

