
==================== FINAL INTERFACE ====================
2019-03-18 19:26:26.411133514 UTC

interface HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY:TigerSeman 8043
  interface hash: b548eb6bf50b845612cb560978ef9f54
  ABI hash: d976f509f4e15b1f364181e48e9d828a
  export-list hash: 8f419c2125bb27107516517480e39f61
  orphan hash: b14fc7735a17484417f01b1665178ac9
  flag hash: 84a707957232ceed2ddebd5ca4ca265a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerSeman.addDer
  TigerSeman.addIzq
  TigerSeman.addpos
  TigerSeman.buscarM
  TigerSeman.cmpZip
  TigerSeman.depend
  TigerSeman.errorTiposMsg
  TigerSeman.esInt
  TigerSeman.fromTy
  TigerSeman.fst3
  TigerSeman.initConf
  TigerSeman.runMonada
  TigerSeman.runSeman
  TigerSeman.snd3
  TigerSeman.splitWith
  TigerSeman.thd3
  TigerSeman.tiposComparables
  TigerSeman.transDecs
  TigerSeman.transExp
  TigerSeman.transTy
  TigerSeman.transVar
  TigerSeman.Estado{TigerSeman.Est frag level maxlvl salida tEnv vEnv}
  TigerSeman.Manticore{TigerSeman.getTipoFunV TigerSeman.getTipoT TigerSeman.getTipoValV TigerSeman.insertFunV TigerSeman.insertTipoT TigerSeman.insertVRO TigerSeman.insertValV TigerSeman.showTEnv TigerSeman.showTEnv' TigerSeman.showVEnv TigerSeman.showVEnv' TigerSeman.tiposIguales TigerSeman.ugen}
  TigerSeman.Monada
module dependencies: State TigerAbs TigerErrores TigerFrame
                     TigerSres TigerSymbol TigerTemp TigerTips TigerTopSort TigerTrans
                     TigerTree TigerUnique
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cond-0.4.1.1 containers-0.5.11.0
                      deepseq-1.4.3.0 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      syb-0.7 text-1.2.3.0 transformers-0.5.5.0
orphans: HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY:TigerUnique
         syb-0.7:Data.Generics.Instances
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text
import  -/  TigerAbs 1d186fe051144908f0c50c683d8be41b
  exports: 66e1533f82207906d70ea37c53c3d5c6
  ArrayExp ac832c47ff0355b402f68a7d03fc4d78
  ArrayTy 2a1be44c647db3d72b14f609038cc7da
  AssignExp be679541b1d717312a2c2a09ec9a3aaf
  BreakExp 8961937da28f0f5112f52937e3d2ab22
  CallExp bdb2fb755ac7b2fd23cbaf119516fce6
  Dec ad89b6e5e364054c22a55dff17ee7887
  DivideOp 82ac95724b70b2ff5753e7ccf0ea2d4c
  EqOp 69c34fb6a146bfd376d32ecf3c5e4255
  Exp ad89b6e5e364054c22a55dff17ee7887
  FieldVar 2582b4c40278c0e2b4485828f2ba9570
  ForExp cfc6ef9086c19fcb99143da01eb0398d
  FunctionDec abe3b9b54849272367ca6ff8008292db
  GeOp 9665b815308596c90ac99172b8860e2d
  GtOp 0fd8b1b5d0427f4cbd7b85986da01905
  IfExp b51a5d74a67f44b3371f933b86465370
  IntExp 198ba506b21a1cd90b7659baff313d14
  LeOp 296b86b4aa90ebb45d606aafdc3d209b
  LetExp 59813586689412cb9e9327ec6f076974
  LtOp 7fb46a358e9cd1f152dcb68bd2eab6dd
  MinusOp 9a7f539da5ef283ef631b6a680f1ee91
  NameTy e3886b3049b9a354fbf122fc327a42eb
  NeqOp f2dd6c2c0ba1ba61c34af9a009a4463d
  NilExp 799b0afe359ee53dd551c61ea29798c3
  OpExp a54f729e9b7d06c1c0a3c959d5cdca3b
  Oper c4bd05e182c6ba1bf57dd81e4b54a10d
  PlusOp 2446ba7944645c0fa62ec388edcca087
  RecordExp 08c91400b6fd391f1d2d126b5214fa83
  RecordTy 1b574a1fa2b9fc0ce60170c3d608582b
  SeqExp a32c7f72e1cbc842ebedab1075ce4e7f
  SimpleVar e48867a4abe39f1af5851f8d905b59c9
  StringExp 0bc5f3e7d70dabb00a90a88055141aa7
  SubscriptVar a3f32f2bd11db53704af22026918ecce
  TimesOp 3d4a0500175c20ae00301f98802c70fe
  Ty e2bedd26776c3ab2ad028af09643fc49
  TypeDec eb63a5cd9d26e46282950790626b3067
  UnitExp ba64671d2b28b5fd54a40b2dcaeacaa6
  Var ad89b6e5e364054c22a55dff17ee7887
  VarDec ba13b69552df7c2c811f3e90a018e4d8
  VarExp 1b7379badb86673206c9dd81053083b6
  WhileExp ee88e6f22b7ed417186fbf1d7c3ada62
  line 3e89dee41a00a3bf8c3f5f962e8847c1
import  -/  TigerErrores ff875f1a83e48c3ca0916553f36b96ae
  exports: 2ac7c458f6129b5b6f9bf98501d600db
  Demon 5687eb1b772ba3165ee7e2a25282860a
  adder db973b658185994f4857001982efa471
  derror 1a2ce25eea34c39497f79a10dc7c3df6
  internal 5ac2ce9ed3f2553b79c4cfe77b3712f9
import  -/  TigerFrame b92d5f1cc4aa8a798b6eadecc5da9c65
  exports: 133bb83980b11d630d101a96995648a0
  Access 402c4e2384b2b19d70426842a571c2c2
  Frag 56100333360f19166abd501d364a04de
import  -/  TigerSres ba05906b3b42c4029b64a1466c438f42
  exports: 1f1fccf02c5d22de89438a0409268b41
  EnvEntry aceece0259bcafe459f6a078fef758b3
  FunEntry 6a232a037daec0e2e04d6e87ad596ca8
  Func 3f3e1fcb8ef55bd5d6c965aa05bc3c93
  ValEntry 5dc08fb5a191731ad2f1b61069fa4d9a
  Var cfd567811191ba9f9cc45396fbbfe052
import  -/  TigerSymbol 8cdb62767ac36bcd684c9f1304d4a564
  exports: da94fd004c9146d1f25642212f80c685
  Symbol 8706b0bbdbf6daae41c5fa34f29c9575
import  -/  TigerTemp 3bc4ed564aeabe58cf535512ec048d33
  exports: 6b85f77b0bcc6e133222675af91d5259
  Label e211b5893645bd99d551cf10a36d620b
import  -/  TigerTips 44c471c5db4391f1eddd4c75db9637b9
  exports: daaaab532380cdc2540d9681908978da
  ?= 9b33f4f77b8ee280cdcc4c1a94dd22f4
  RO 255a207403c522d96156a415f24255c7
  RW d37459149d1685097e87ad0d5650d9a4
  RefRecord cf0e8aa9b79a18c60e71ce8fbe31e4d7
  TArray a5080c81bb3c7606c509024952719477
  TBool a4e7281e63be782b14a094be8c14270a
  TInt c0ff82ebcb4465373503a65663553120
  TNil c54eda5620f493165e51f5cb2a55ab28
  TRecord 1d8048cc6ff700f951262b9e1383870e
  TString e09ac03f353e08c5c1950f7b114ba183
  TUnit e858fd7b681261b92131637c18ec5578
  Tipo c7222c4ccb8912a2903dfba0ff0e8ce4
  errorTipos ba07b10291283eac7b5da62c8defa66b
import  -/  TigerTopSort 477592574c1bc700b304e411fe1d24ae
  exports: feb943acae7c0a869c8b10297ed14313
  kahnSorter 86c731082123ddefa475b16b93abb669
import  -/  TigerTrans 92c598f6370c1400fae072c188db0cf7
  exports: dff05df5190e1183aa89a1b334922c81
  BExp 510e37e1fcac5419b2934439bd4a8618
  IsFun ff10badc0d1952649092930002cd9cf3
  IsProc 65395993495b0f73f944cce6749c8c23
  Level af40134cd6efb9d8e312df5ad007a90f
  MemM 2f9e5c063b12b90c8c0ccc6d81fd0e6a
  Propia d53a1e530e896b7b4af1e7e496b03f00
  Runtime 748fa8df9479db1035813a8ef3390f84
  allocArg 86c6b5542cb91e4d031d63eaf1929686
  allocLocal b4b1058f256a56d6f8578b5d5aa82d3a
  arrayExp 8ea64644d5c9ac718ed99a389f7cf5eb
  assignExp 3c882a56f955f3462efaedfcad566407
  binOpIntExp f030d6092763fe8ec0ffa4375e71c26f
  binOpIntRelExp bf10f0cfc709c1c6993c7a43e197b55a
  binOpPtrExp 62a46c8b452a827c27df5c6901b22858
  binOpStrExp dd088211bd1074ee466da02cb8f45df6
  breakExp df7da9158a2ee2c929d437e6c5c8e1be
  callExp edbea68a6a32f3c3c1f375f528c1febe
  fieldVar bbd90791a158631eae7845f51d29199c
  forExp 002fed419678cb0b5d8b8d6a8c72b87e
  getActualLevel 1febe23c132fc25744fa844b55d31b11
  ifThenElseExp e3fc2731ef71b12c7a0fd1fef4ba8168
  ifThenElseExpUnit 1ff2f21d4e681429be63c4c144ade486
  ifThenExp 2b2ff1219485b0c06e310fc8eba77c16
  intExp c369e5093ccb3352cd138f2b8ac0228e
  letExp 509c24a10965c2ec1780e2256b056fe0
  nilExp 3f8fe25591e01722c3d2524e54599111
  outermost 403ff4b88eadd8b9a4357df0e212fc5b
  posWhileforExp 15b23558745800fad7db5a0439a076f0
  preWhileforExp 7348eaf2ae0ecbcedf2b0be8b875cf25
  recordExp 7c7ddb031ffb7660fc7f8d65754b54fb
  seqExp b43a94f85c8422b181ac4354aa530172
  simpleVar 825d82ee88eb2898fed1f20190779727
  stringExp 6fe4e23a57861f9ca632d24d11385a0e
  subscriptVar d47a9198ada5289f92f8c52c84415de8
  topLevel fd53a9fdaee1419bcc892fb341691b03
  unitExp 1dd8eeb9b5c2e72c89332c306cfb3afa
  whileExp d0348e9c3a9ff88e1a3637fe76197381
import  -/  TigerUnique c609db41e14bf4ada457c59538dc0445
  exports: aa23a62153d42804837397f8b85bb196
  StGen 600da96a6f5c385280c5ea14e80af84e
  Unique 1accfd2b00fc3aa18f150fe4c9695c4f
  mkUnique f4de18450c15f44354adf6341f103c30
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Ord 8579f16310a4ec69c00617051bb5c3d9
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Debug.Trace 7d99b5cfd8ae9f4b50938e4fedeaadef
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  cond-0.4.1.1:Control.Conditional 351439980442f7cd2bcadd7d3fced764
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
1c17b9ccb10c2d67b2f28978a68216f3
  $dmshowTEnv' :: TigerSeman.Manticore w => w ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLC(S)LLL),U(A,1*U(A,A,A,1*C1(U),A),A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A)>,
     Unfolding: InlineRule (0, True, False)
                (\ @ w :: * -> * ($dManticore :: TigerSeman.Manticore w) ->
                 TigerSeman.showTEnv
                   @ w
                   $dManticore
                   @ ()
                   (GHC.Base.return
                      @ w
                      (TigerSeman.$p2Manticore @ w $dManticore)
                      @ ()
                      GHC.Tuple.())) -}
b1da443860b4cfc30add2f26d9118fca
  $dmshowVEnv' :: TigerSeman.Manticore w => w ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLC(S)LLLLL),U(A,1*U(A,A,A,1*C1(U),A),A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, False)
                (\ @ w :: * -> * ($dManticore :: TigerSeman.Manticore w) ->
                 TigerSeman.showVEnv
                   @ w
                   $dManticore
                   @ ()
                   (GHC.Base.return
                      @ w
                      (TigerSeman.$p2Manticore @ w $dManticore)
                      @ ()
                      GHC.Tuple.())) -}
4100c4f7eff527327f9977d156eb6eb2
  $dmtiposIguales ::
    TigerSeman.Manticore w =>
    TigerTips.Tipo -> TigerTips.Tipo -> w GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U(1*U(A,A,1*C1(U),A),1*U(A,C(C1(U)),A,C(U),A),A,A,A,A,A,A,C(U),A,A,A,A,C(C1(U)),A)><S,U><S,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ w :: * -> * ($dManticore :: TigerSeman.Manticore w) ->
                 let {
                   $dMonad :: GHC.Base.Monad w
                   = TigerSeman.$p2Manticore @ w $dManticore
                 } in
                 let {
                   $dDemon :: TigerErrores.Demon w
                   = TigerSeman.$p1Manticore @ w $dManticore
                 } in
                 \ (ds :: TigerTips.Tipo) (l :: TigerTips.Tipo) ->
                 let {
                   fail :: GHC.Prim.Void# -> w GHC.Types.Bool <join 1> {- Arity: 1 -}
                   = \ (ds1 :: GHC.Prim.Void#)[OneShot] ->
                     case l of wild {
                       DEFAULT
                       -> GHC.Base.return
                            @ w
                            $dMonad
                            @ GHC.Types.Bool
                            (case ds of wild1 {
                               DEFAULT -> TigerTips.$fEqTipo_$c== wild1 wild
                               TigerTips.TNil
                               -> case wild of wild2 {
                                    DEFAULT -> TigerTips.$fEqTipo_$c== TigerTips.TNil wild2
                                    TigerTips.TRecord ds2 ds3 -> GHC.Types.True }
                               TigerTips.TInt ds2
                               -> case wild of wild2 {
                                    DEFAULT -> TigerTips.$fEqTipo_$c== wild1 wild2
                                    TigerTips.TInt ds3 -> GHC.Types.True }
                               TigerTips.TArray ds2 u1
                               -> case wild of wild2 {
                                    DEFAULT -> TigerTips.$fEqTipo_$c== wild1 wild2
                                    TigerTips.TArray ds3 u2
                                    -> case GHC.Integer.Type.eqInteger# u1 u2 of wild3 { DEFAULT ->
                                       GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 } }
                               TigerTips.TRecord ds2 ds3
                               -> case wild of wild2 {
                                    DEFAULT -> TigerTips.$fEqTipo_$c== wild1 wild2
                                    TigerTips.TNil -> GHC.Types.True
                                    TigerTips.TRecord ds4 u2
                                    -> case GHC.Integer.Type.eqInteger# ds3 u2 of wild3 { DEFAULT ->
                                       GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 } } })
                       TigerTips.RefRecord s
                       -> TigerErrores.internal
                            @ w
                            $dDemon
                            @ GHC.Types.Bool
                            (Data.Text.pack
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "No son tipos iguales... 123+4"#
                                     c
                                     n)
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.Base.foldr
                                        @ GHC.Types.Char
                                        @ b
                                        c
                                        n
                                        (TigerTips.$fShowTipo_$cshowsPrec
                                           TigerTips.$fShowTipo2
                                           ds
                                           (GHC.Types.[] @ GHC.Types.Char)))
                                     (Data.Text.Show.$fShowText_$cshow s)))) }
                 } in
                 case ds of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   TigerTips.TNil
                   -> case l of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        TigerTips.RefRecord ds1
                        -> GHC.Base.return @ w $dMonad @ GHC.Types.Bool GHC.Types.True }
                   TigerTips.TRecord ds1 u
                   -> case l of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        TigerTips.RefRecord s
                        -> GHC.Base.>>=
                             @ w
                             $dMonad
                             @ TigerTips.Tipo
                             @ GHC.Types.Bool
                             (TigerSeman.getTipoT @ w $dManticore s)
                             (\ (st :: TigerTips.Tipo) ->
                              case st of wild2 {
                                DEFAULT
                                -> TigerErrores.internal
                                     @ w
                                     $dDemon
                                     @ GHC.Types.Bool
                                     (Data.Text.pack
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "No son tipos iguales... 123+2"#)))
                                TigerTips.TRecord ds2 u1
                                -> GHC.Base.return
                                     @ w
                                     $dMonad
                                     @ GHC.Types.Bool
                                     (case GHC.Integer.Type.eqInteger# u1 u of wild3 { DEFAULT ->
                                      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 })
                                TigerTips.RefRecord ds2
                                -> TigerSeman.tiposIguales @ w $dManticore wild wild2 }) }
                   TigerTips.RefRecord s
                   -> case l of wild1 {
                        DEFAULT
                        -> TigerErrores.internal
                             @ w
                             $dDemon
                             @ GHC.Types.Bool
                             (Data.Text.pack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "No son tipos iguales... 123+3"#)))
                        TigerTips.TNil
                        -> GHC.Base.return @ w $dMonad @ GHC.Types.Bool GHC.Types.True
                        TigerTips.TRecord ds1 u
                        -> GHC.Base.>>=
                             @ w
                             $dMonad
                             @ TigerTips.Tipo
                             @ GHC.Types.Bool
                             (TigerSeman.getTipoT @ w $dManticore s)
                             (\ (st :: TigerTips.Tipo) ->
                              case st of wild2 {
                                DEFAULT
                                -> TigerErrores.internal
                                     @ w
                                     $dDemon
                                     @ GHC.Types.Bool
                                     (Data.Text.pack
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "No son tipos iguales... 123+1"#)))
                                TigerTips.TRecord ds2 u1
                                -> GHC.Base.return
                                     @ w
                                     $dMonad
                                     @ GHC.Types.Bool
                                     (case GHC.Integer.Type.eqInteger# u1 u of wild3 { DEFAULT ->
                                      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 })
                                TigerTips.RefRecord ds2
                                -> TigerSeman.tiposIguales @ w $dManticore wild2 wild1 })
                        TigerTips.RefRecord s'
                        -> GHC.Base.>>=
                             @ w
                             $dMonad
                             @ TigerTips.Tipo
                             @ GHC.Types.Bool
                             (TigerSeman.getTipoT @ w $dManticore s)
                             (\ (s1 :: TigerTips.Tipo) ->
                              GHC.Base.>>=
                                @ w
                                $dMonad
                                @ TigerTips.Tipo
                                @ GHC.Types.Bool
                                (TigerSeman.getTipoT @ w $dManticore s')
                                (\ (s2 :: TigerTips.Tipo) ->
                                 TigerSeman.tiposIguales @ w $dManticore s1 s2)) } }) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fDemonExceptT :: TigerErrores.Demon TigerSeman.Monada
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.Monada
                  TigerSeman.$fDemonExceptT6
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either TigerSymbol.Symbol a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                TigerSymbol.Symbol
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <TigerSymbol.Symbol>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fDemonExceptT5
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSeman.Monada a>_R
                   ->_R <TigerSymbol.Symbol>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <TigerSeman.Estado>_N
                                 <TigerUnique.StGen>_R
                                 <Data.Either.Either
                                    Data.Text.Internal.Text
                                    a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <Data.Text.Internal.Text>_N
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        TigerSeman.Estado TigerUnique.StGen>_R
                                                     <a>_N))
                  TigerSeman.$fDemonExceptT3
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <TigerSymbol.Symbol>_N
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    TigerSeman.Estado TigerUnique.StGen>_R
                                 <a>_N))
                  TigerSeman.$fDemonExceptT1
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <TigerSymbol.Symbol>_N
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    TigerSeman.Estado TigerUnique.StGen>_R
                                 <a>_N)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fDemonExceptT1 ::
    TigerSymbol.Symbol
    -> Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado
         (State.State GHC.Integer.Type.Integer)
         (Data.Either.Either TigerSymbol.Symbol a)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ @ a (x28 :: TigerSymbol.Symbol) ->
                 let {
                   x29 :: TigerSymbol.Symbol
                   = TigerSymbol.addStr TigerSeman.$fDemonExceptT_g4 x28
                 } in
                 let {
                   lvl158 :: Data.Either.Either TigerSymbol.Symbol a
                   = Data.Either.Left @ TigerSymbol.Symbol @ a x29
                 } in
                 (\ (eta7 :: TigerSeman.Estado)
                    (eta8 :: GHC.Integer.Type.Integer) ->
                  ((lvl158, eta7), eta8))
                   `cast`
                 ((<TigerSeman.Estado>_R
                   ->_R Sym (State.N:State[0]
                                 <GHC.Integer.Type.Integer>_R
                                 <(Data.Either.Either TigerSymbol.Symbol a,
                                   TigerSeman.Estado)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                      <TigerSeman.Estado>_N
                                                                      <State.State
                                                                         GHC.Integer.Type.Integer>_R
                                                                      <Data.Either.Either
                                                                         TigerSymbol.Symbol
                                                                         a>_N))) -}
4e1611beaf96e271aee0b9b5c39d00a7
  $fDemonExceptT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not found:"#) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fDemonExceptT3 ::
    TigerSymbol.Symbol
    -> Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado
         (State.State GHC.Integer.Type.Integer)
         (Data.Either.Either TigerSymbol.Symbol a)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ @ a (x28 :: TigerSymbol.Symbol) ->
                 let {
                   x29 :: TigerSymbol.Symbol
                   = TigerSymbol.addStr TigerSeman.$fDemonExceptT_g1 x28
                 } in
                 let {
                   lvl158 :: Data.Either.Either TigerSymbol.Symbol a
                   = Data.Either.Left @ TigerSymbol.Symbol @ a x29
                 } in
                 (\ (eta7 :: TigerSeman.Estado)
                    (eta8 :: GHC.Integer.Type.Integer) ->
                  ((lvl158, eta7), eta8))
                   `cast`
                 ((<TigerSeman.Estado>_R
                   ->_R Sym (State.N:State[0]
                                 <GHC.Integer.Type.Integer>_R
                                 <(Data.Either.Either TigerSymbol.Symbol a,
                                   TigerSeman.Estado)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                      <TigerSeman.Estado>_N
                                                                      <State.State
                                                                         GHC.Integer.Type.Integer>_R
                                                                      <Data.Either.Either
                                                                         TigerSymbol.Symbol
                                                                         a>_N))) -}
b0c7791d1f2f942bb76c9c9d4b37d616
  $fDemonExceptT4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Internal: "#) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fDemonExceptT5 ::
    TigerSeman.Monada a
    -> TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> State.State
         GHC.Integer.Type.Integer
         (Data.Either.Either Data.Text.Internal.Text a, TigerSeman.Estado)
  {- Arity: 3,
     Strictness: <L,1*C1(C(U(U(U,U),U)))><L,1*U(U,U,U)><L,U> -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fDemonExceptT6 ::
    TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either TigerSymbol.Symbol a, TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (x28 :: TigerSymbol.Symbol)
                   (eta7 :: TigerSeman.Estado)
                   (eta8 :: GHC.Integer.Type.Integer) ->
                 ((Data.Either.Left @ TigerSymbol.Symbol @ a x28, eta7), eta8)) -}
4a29725013c2d3b80d73006e5c8f748d
  $fDemonExceptT_g1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TigerSeman.$fDemonExceptT4) -}
9d7160bc0b7989f30172c3606c4c1f3a
  $fDemonExceptT_g4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TigerSeman.$fDemonExceptT2) -}
96f5ac221cc134f6621820b23d9d1e54
  $fManticoreExceptT :: TigerSeman.Manticore TigerSeman.Monada
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.Monada
                  TigerSeman.$fDemonExceptT
                  (TigerSeman.$fManticoreExceptT_$s$fMonadExceptT
                     @ Data.Text.Internal.Text)
                  TigerSeman.$fManticoreExceptT25
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R <TigerSres.ValEntry>_R
                   ->_R <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT24
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R <TigerSres.FunEntry>_R
                   ->_R <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT22
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R <TigerFrame.Access>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT21
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R <TigerTips.Tipo>_R
                   ->_R <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT16
                    `cast`
                  (<TigerSymbol.Symbol>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either
                                           Data.Text.Internal.Text TigerSres.FunEntry,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerSres.FunEntry>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Text.Internal.Text>_N
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     TigerSeman.Estado
                                                                                                                     TigerUnique.StGen>_R
                                                                                                                  <TigerSres.FunEntry>_N)))
                  TigerSeman.$fManticoreExceptT11
                    `cast`
                  (<TigerSymbol.Symbol>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either
                                           Data.Text.Internal.Text TigerSres.ValEntry,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerSres.ValEntry>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Text.Internal.Text>_N
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     TigerSeman.Estado
                                                                                                                     TigerUnique.StGen>_R
                                                                                                                  <TigerSres.ValEntry>_N)))
                  TigerSeman.$fManticoreExceptT7
                    `cast`
                  (<TigerSymbol.Symbol>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text TigerTips.Tipo,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerTips.Tipo>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                 TigerSeman.Estado
                                                                                                                 TigerUnique.StGen>_R
                                                                                                              <TigerTips.Tipo>_N)))
                  TigerSeman.$fManticoreExceptT6
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT5
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text (),
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                             <Data.Text.Internal.Text>_N
                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                TigerSeman.Estado
                                                                                                TigerUnique.StGen>_R
                                                                                             <()>_N)))
                  TigerSeman.$fManticoreExceptT4
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT2
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text (),
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                             <Data.Text.Internal.Text>_N
                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                TigerSeman.Estado
                                                                                                TigerUnique.StGen>_R
                                                                                             <()>_N)))
                  TigerSeman.$fManticoreExceptT_$ctiposIguales
                  TigerSeman.$fManticoreExceptT1
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text TigerUnique.Unique,
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           TigerUnique.Unique>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                TigerSeman.Estado
                                                                                                                TigerUnique.StGen>_R
                                                                                                             <TigerUnique.Unique>_N))) -}
88e8136001f7090a6471e971632b8b7f
  $fManticoreExceptT1 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerUnique.Unique,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U><L,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 let {
                   s :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.plusInteger
                       eta7
                       TigerUnique.$fUniqueGeneratorState2
                 } in
                 ((Data.Either.Right
                     @ Data.Text.Internal.Text
                     @ TigerUnique.Unique
                     s,
                   s1),
                  s)) -}
20c1f8aa276f3fbdcd40120765f693cd
  $fManticoreExceptT10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("No se encontro el tipo "#) -}
d52e784edb0178296fcaf23e6accccf0
  $fManticoreExceptT11 ::
    TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerSres.ValEntry,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3,
     Strictness: <S(SSS),1*U(U,U,U)><S(SLLLLL),1*U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.Est ww5 ww6 ww7 ww8 ww9 ww10 ->
                 case TigerSeman.$w$cgetTipoValV
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        w2 of ww11 { (#,#) ww12 ww13 ->
                 (ww12, ww13) } } }) -}
5b585edebbecfb2f52be318ae8b997f8
  $fManticoreExceptT12 ::
    Data.Either.Either TigerSymbol.Symbol TigerSres.ValEntry
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ TigerSymbol.Symbol
                   @ TigerSres.ValEntry
                   TigerSeman.$fManticoreExceptT13) -}
4139e13e6b5f9eaf2454620cb10b6087
  $fManticoreExceptT13 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.$fManticoreExceptT14) -}
905faa3b927e7c7b054cffb07d79f5f6
  $fManticoreExceptT14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Undefined Var"#) -}
df4b2a7451013daf03a13c2041d25f07
  $fManticoreExceptT15 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("No se encontro el tipo de la var "#) -}
be01fec426f9105d07654b44a65a1075
  $fManticoreExceptT16 ::
    TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerSres.FunEntry,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3,
     Strictness: <S(SSS),1*U(U,U,U)><S(SLLLLL),1*U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.Est ww5 ww6 ww7 ww8 ww9 ww10 ->
                 case TigerSeman.$w$cgetTipoFunV
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        w2 of ww11 { (#,#) ww12 ww13 ->
                 (ww12, ww13) } } }) -}
17f91f4d274e8988bab9a9cbe500b039
  $fManticoreExceptT17 ::
    Data.Either.Either TigerSymbol.Symbol TigerSres.FunEntry
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ TigerSymbol.Symbol
                   @ TigerSres.FunEntry
                   TigerSeman.$fManticoreExceptT18) -}
a0c736e6a3281984328b80dd8e4fe93b
  $fManticoreExceptT18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.$fManticoreExceptT19) -}
099614b82757188adb6ed36ee362aa0a
  $fManticoreExceptT19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Undefined Fun"#) -}
4df94ae1db2157df2297be65e2736ca9
  $fManticoreExceptT2 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2,
     Unfolding: (TigerSeman.$fManticoreExceptT4
                   @ ()
                   TigerSeman.$fManticoreExceptT3
                     `cast`
                   ((<TigerSeman.Estado>_R
                     ->_R Sym (State.N:State[0]
                                   <GHC.Integer.Type.Integer>_R
                                   <(Data.Either.Either Data.Text.Internal.Text (),
                                     TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <TigerSeman.Estado>_N
                                                                         <State.State
                                                                            GHC.Integer.Type.Integer>_R
                                                                         <Data.Either.Either
                                                                            Data.Text.Internal.Text
                                                                            ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                              <Data.Text.Internal.Text>_N
                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                 TigerSeman.Estado
                                                                                                 TigerUnique.StGen>_R
                                                                                              <()>_N)))) -}
3016b213162efd225f8d355c28a0e620
  $fManticoreExceptT20 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("No se encontro el tipo de la fun "#) -}
8422abf23e21558c33f09dc0753a2d03
  $fManticoreExceptT21 ::
    TigerSymbol.Symbol
    -> TigerTips.Tipo
    -> TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 5,
     Strictness: <L,U(U,U,U)><L,U><C(C(S(S(SL)L))),1*C1(C1(U(U(U,U),U)))><L,U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: TigerSymbol.Symbol)
                   (w1 :: TigerTips.Tipo)
                   (w2 :: TigerSeman.Monada a)
                   (w3 :: TigerSeman.Estado)
                   (w4 :: GHC.Integer.Type.Integer) ->
                 case (w2
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Data.Text.Internal.Text>_N
                            <Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen>_R
                            <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <TigerSeman.Estado>_N
                                        <State.State GHC.Integer.Type.Integer>_R
                                        <Data.Either.Either Data.Text.Internal.Text a>_N)
                         (case w3 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                          TigerSeman.Est
                            ds
                            (TigerSeman.$fManticoreExceptT_$sgo13 @ TigerTips.Tipo w w w1 ds1)
                            ds2
                            ds3
                            ds4
                            ds5 }))
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either Data.Text.Internal.Text a,
                             TigerSeman.Estado)>_R)
                        w4 of wild { (,) x' s' ->
                 case x' of wild1 { (,) a1 s'1 ->
                 case a1 of wild2 {
                   Data.Either.Left e1
                   -> ((Data.Either.Left @ Data.Text.Internal.Text @ a e1, s'1), s')
                   Data.Either.Right x28
                   -> ((Data.Either.Right @ Data.Text.Internal.Text @ a x28, w3),
                       s') } } }) -}
57f39edb757348ddec0a8d8fee2ef023
  $fManticoreExceptT22 ::
    TigerSymbol.Symbol
    -> TigerFrame.Access
    -> GHC.Types.Int
    -> TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 6,
     Strictness: <L,1*U(U,U,U)><L,U><L,U><C(C(S(S(SL)L))),1*C1(C1(U(1*U(U,U),U)))><L,U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   (w :: TigerSymbol.Symbol)
                   (w1 :: TigerFrame.Access)
                   (w2 :: GHC.Types.Int)
                   (w3 :: TigerSeman.Monada a)
                   (w4 :: TigerSeman.Estado)
                   (w5 :: GHC.Integer.Type.Integer) ->
                 case (w3
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Data.Text.Internal.Text>_N
                            <Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen>_R
                            <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <TigerSeman.Estado>_N
                                        <State.State GHC.Integer.Type.Integer>_R
                                        <Data.Either.Either Data.Text.Internal.Text a>_N)
                         (case w4 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                          TigerSeman.Est
                            (case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                             TigerSeman.$w$sgo13
                               @ TigerSres.EnvEntry
                               ww
                               ww1
                               ww2
                               ww3
                               (TigerSres.Var (TigerSeman.$fManticoreExceptT23, w1, w2))
                               ds })
                            ds1
                            ds2
                            ds3
                            ds4
                            ds5 }))
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either Data.Text.Internal.Text a,
                             TigerSeman.Estado)>_R)
                        w5 of wild { (,) x' s' ->
                 case x' of wild1 { (,) a1 s'1 ->
                 case a1 of wild2 {
                   Data.Either.Left e1 -> (wild1, s')
                   Data.Either.Right x28 -> ((wild2, w4), s') } } }) -}
709fffe0e6caf8cbd64a52b35552ca63
  $fManticoreExceptT23 :: TigerTips.Tipo
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (TigerTips.TInt TigerTips.RO) -}
266b7cb45c1574e24dc8f41a3fed21e1
  $fManticoreExceptT24 ::
    TigerSymbol.Symbol
    -> TigerSres.FunEntry
    -> TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 5,
     Strictness: <L,1*U(U,U,U)><L,U><C(C(S(S(SL)L))),1*C1(C1(U(1*U(U,U),U)))><L,U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSres.FunEntry)
                   (w2 :: TigerSeman.Monada a)
                   (w3 :: TigerSeman.Estado)
                   (w4 :: GHC.Integer.Type.Integer) ->
                 case (w2
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Data.Text.Internal.Text>_N
                            <Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen>_R
                            <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <TigerSeman.Estado>_N
                                        <State.State GHC.Integer.Type.Integer>_R
                                        <Data.Either.Either Data.Text.Internal.Text a>_N)
                         (case w3 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                          TigerSeman.Est
                            (case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                             TigerSeman.$w$sgo13
                               @ TigerSres.EnvEntry
                               ww
                               ww1
                               ww2
                               ww3
                               (TigerSres.Func w1)
                               ds })
                            ds1
                            ds2
                            ds3
                            ds4
                            ds5 }))
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either Data.Text.Internal.Text a,
                             TigerSeman.Estado)>_R)
                        w4 of wild { (,) x' s' ->
                 case x' of wild1 { (,) a1 s'1 ->
                 case a1 of wild2 {
                   Data.Either.Left e1 -> (wild1, s')
                   Data.Either.Right x28 -> ((wild2, w3), s') } } }) -}
ba69c93280504ab3303617d4afb184d0
  $fManticoreExceptT25 ::
    TigerSymbol.Symbol
    -> TigerSres.ValEntry
    -> TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 5,
     Strictness: <L,1*U(U,U,U)><L,U><C(C(S(S(SL)L))),1*C1(C1(U(1*U(U,U),U)))><L,U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSres.ValEntry)
                   (w2 :: TigerSeman.Monada a)
                   (w3 :: TigerSeman.Estado)
                   (w4 :: GHC.Integer.Type.Integer) ->
                 case (w2
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Data.Text.Internal.Text>_N
                            <Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen>_R
                            <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <TigerSeman.Estado>_N
                                        <State.State GHC.Integer.Type.Integer>_R
                                        <Data.Either.Either Data.Text.Internal.Text a>_N)
                         (case w3 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                          TigerSeman.Est
                            (case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                             TigerSeman.$w$sgo13
                               @ TigerSres.EnvEntry
                               ww
                               ww1
                               ww2
                               ww3
                               (TigerSres.Var w1)
                               ds })
                            ds1
                            ds2
                            ds3
                            ds4
                            ds5 }))
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either Data.Text.Internal.Text a,
                             TigerSeman.Estado)>_R)
                        w4 of wild { (,) x' s' ->
                 case x' of wild1 { (,) a1 s'1 ->
                 case a1 of wild2 {
                   Data.Either.Left e1 -> (wild1, s')
                   Data.Either.Right x28 -> ((wild2, w3), s') } } }) -}
5f3a991d0493b1a4641f146dbdc0ee66
  $fManticoreExceptT3 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (eta7 :: TigerSeman.Estado)
                   (eta8 :: GHC.Integer.Type.Integer) ->
                 ((TigerSeman.$fManticoreExceptT_eta, eta7), eta8)) -}
7fab092c91bcf80739056207ef406ee9
  $fManticoreExceptT4 ::
    TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <L,U><L,U(U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ a
                   (w :: TigerSeman.Monada a)
                   (s1 :: TigerSeman.Estado)
                   (eta7 :: GHC.Integer.Type.Integer) ->
                 ((Debug.Trace.trace
                     @ (TigerSeman.Monada a)
                     (Data.Map.Internal.$w$cshowsPrec
                        @ Data.Text.Internal.Text
                        @ TigerTips.Tipo
                        Data.Text.Show.$fShowText
                        TigerTips.$fShowTipo
                        0#
                        (case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 -> ds1 })
                        (GHC.Types.[] @ GHC.Types.Char))
                     w)
                    `cast`
                  (Control.Monad.Trans.Except.N:ExceptT[0]
                       <Data.Text.Internal.Text>_N
                       <Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen>_R
                       <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <TigerSeman.Estado>_N
                                   <State.State GHC.Integer.Type.Integer>_R
                                   <Data.Either.Either Data.Text.Internal.Text a>_N)
                    s1)
                   `cast`
                 (State.N:State[0]
                      <GHC.Integer.Type.Integer>_R
                      <(Data.Either.Either Data.Text.Internal.Text a,
                        TigerSeman.Estado)>_R)
                   eta7) -}
9e52b60adf742bd5d5ac9d340a05c6ea
  $fManticoreExceptT5 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2,
     Unfolding: (TigerSeman.$fManticoreExceptT6
                   @ ()
                   TigerSeman.$fManticoreExceptT3
                     `cast`
                   ((<TigerSeman.Estado>_R
                     ->_R Sym (State.N:State[0]
                                   <GHC.Integer.Type.Integer>_R
                                   <(Data.Either.Either Data.Text.Internal.Text (),
                                     TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <TigerSeman.Estado>_N
                                                                         <State.State
                                                                            GHC.Integer.Type.Integer>_R
                                                                         <Data.Either.Either
                                                                            Data.Text.Internal.Text
                                                                            ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                              <Data.Text.Internal.Text>_N
                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                 TigerSeman.Estado
                                                                                                 TigerUnique.StGen>_R
                                                                                              <()>_N)))) -}
86d9ace22da3ed0b4cacfc3a98a1b1b1
  $fManticoreExceptT6 ::
    TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <L,U><L,U(U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ a
                   (w :: TigerSeman.Monada a)
                   (s1 :: TigerSeman.Estado)
                   (eta7 :: GHC.Integer.Type.Integer) ->
                 ((Debug.Trace.trace
                     @ (TigerSeman.Monada a)
                     (Data.Map.Internal.$w$cshowsPrec
                        @ Data.Text.Internal.Text
                        @ TigerSres.EnvEntry
                        Data.Text.Show.$fShowText
                        TigerSres.$fShowEnvEntry
                        0#
                        (case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 -> ds })
                        (GHC.Types.[] @ GHC.Types.Char))
                     w)
                    `cast`
                  (Control.Monad.Trans.Except.N:ExceptT[0]
                       <Data.Text.Internal.Text>_N
                       <Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen>_R
                       <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <TigerSeman.Estado>_N
                                   <State.State GHC.Integer.Type.Integer>_R
                                   <Data.Either.Either Data.Text.Internal.Text a>_N)
                    s1)
                   `cast`
                 (State.N:State[0]
                      <GHC.Integer.Type.Integer>_R
                      <(Data.Either.Either Data.Text.Internal.Text a,
                        TigerSeman.Estado)>_R)
                   eta7) -}
ec100b34838aa5a3ba4ff6d2e820830d
  $fManticoreExceptT7 ::
    TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerTips.Tipo,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3,
     Strictness: <S(SSS),1*U(U,U,U)><S(LSLLLL),1*U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.Est ww5 ww6 ww7 ww8 ww9 ww10 ->
                 case TigerSeman.$w$cgetTipoT
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        w2 of ww11 { (#,#) ww12 ww13 ->
                 (ww12, ww13) } } }) -}
af43f852939f4805e443c57a319630b0
  $fManticoreExceptT8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TigerSeman.$fManticoreExceptT9) -}
f377e22b3fae83fbfd9ee87d67ff25b6
  $fManticoreExceptT9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" en el map."#) -}
384a57b97038a9f528e9f125b7b899c2
  $fManticoreExceptT_$ctiposIguales ::
    TigerTips.Tipo
    -> TigerTips.Tipo -> TigerSeman.Monada GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U> -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fManticoreExceptT_$s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e
                       (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen))
                  (TigerSeman.$fManticoreExceptT_$s$fFunctorExceptT @ e)
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT_$cpure @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado)
                     (TigerSeman.$fManticoreExceptT_$s$fMonadStateT
                        @ TigerSeman.Estado))
                  (\ @ a
                     @ b
                     @ c
                     (f1 :: a -> b -> c)
                     (x28 :: Control.Monad.Trans.Except.ExceptT
                               e
                               (Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen)
                               a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado)
                     (TigerSeman.$fManticoreExceptT_$s$fMonadStateT @ TigerSeman.Estado)
                     @ b
                     @ c
                     (\ (s1 :: TigerSeman.Estado) ->
                      let {
                        m :: State.State
                               GHC.Integer.Type.Integer
                               (Data.Either.Either e a, TigerSeman.Estado)
                        = x28
                            `cast`
                          (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen>_R
                               <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <TigerSeman.Estado>_N
                                           <State.State GHC.Integer.Type.Integer>_R
                                           <Data.Either.Either e a>_N)
                            s1
                      } in
                      (\ (s' :: GHC.Integer.Type.Integer) ->
                       let {
                         ds1 :: ((Data.Either.Either e a, TigerSeman.Estado),
                                 GHC.Integer.Type.Integer)
                         = m `cast`
                           (State.N:State[0]
                                <GHC.Integer.Type.Integer>_R
                                <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                             s'
                       } in
                       (let {
                          ds :: (Data.Either.Either e a, TigerSeman.Estado)
                          = case ds1 of wild { (,) x29 y -> x29 }
                        } in
                        (case ds of wild { (,) a1 s'1 ->
                         case a1 of wild1 {
                           Data.Either.Left x29 -> Data.Either.Left @ e @ (b -> c) x29
                           Data.Either.Right y -> Data.Either.Right @ e @ (b -> c) (f1 y) } },
                         case ds of wild { (,) a1 s'1 -> s'1 }),
                        case ds1 of wild { (,) x29 y -> y }))
                        `cast`
                      (Sym (State.N:State[0]
                                <GHC.Integer.Type.Integer>_R
                                <(Data.Either.Either e (b -> c), TigerSeman.Estado)>_R)))
                       `cast`
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e (b -> c)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N
                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                               TigerSeman.Estado
                                                               TigerUnique.StGen>_R
                                                            <b -> c>_N)))
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT_$c*> @ e)
                  (\ @ a
                     @ b
                     (x28 :: Control.Monad.Trans.Except.ExceptT
                               e
                               (Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen)
                               a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado)
                     (TigerSeman.$fManticoreExceptT_$s$fMonadStateT @ TigerSeman.Estado)
                     @ b
                     @ a
                     (\ (s1 :: TigerSeman.Estado) ->
                      let {
                        m :: State.State
                               GHC.Integer.Type.Integer
                               (Data.Either.Either e a, TigerSeman.Estado)
                        = x28
                            `cast`
                          (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen>_R
                               <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <TigerSeman.Estado>_N
                                           <State.State GHC.Integer.Type.Integer>_R
                                           <Data.Either.Either e a>_N)
                            s1
                      } in
                      (\ (s' :: GHC.Integer.Type.Integer) ->
                       let {
                         ds1 :: ((Data.Either.Either e a, TigerSeman.Estado),
                                 GHC.Integer.Type.Integer)
                         = m `cast`
                           (State.N:State[0]
                                <GHC.Integer.Type.Integer>_R
                                <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                             s'
                       } in
                       (let {
                          ds :: (Data.Either.Either e a, TigerSeman.Estado)
                          = case ds1 of wild { (,) x29 y -> x29 }
                        } in
                        (case ds of wild { (,) a1 s'1 ->
                         case a1 of wild1 {
                           Data.Either.Left x29 -> Data.Either.Left @ e @ (b -> a) x29
                           Data.Either.Right y
                           -> Data.Either.Right @ e @ (b -> a) (\ (ds2 :: b) -> y) } },
                         case ds of wild { (,) a1 s'1 -> s'1 }),
                        case ds1 of wild { (,) x29 y -> y }))
                        `cast`
                      (Sym (State.N:State[0]
                                <GHC.Integer.Type.Integer>_R
                                <(Data.Either.Either e (b -> a), TigerSeman.Estado)>_R)))
                       `cast`
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e (b -> a)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N
                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                               TigerSeman.Estado
                                                               TigerUnique.StGen>_R
                                                            <b -> a>_N))) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fManticoreExceptT_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT
      e
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
      a
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,U),U)))><L,C(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m2 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e
                           (Control.Monad.Trans.State.Lazy.StateT
                              TigerSeman.Estado TigerUnique.StGen)
                           b)
                   (s1 :: TigerSeman.Estado) ->
                 let {
                   x28 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either e a, TigerSeman.Estado)
                   = m2
                       `cast`
                     (Control.Monad.Trans.Except.N:ExceptT[0]
                          <e>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen>_R
                          <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <TigerSeman.Estado>_N
                                      <State.State GHC.Integer.Type.Integer>_R
                                      <Data.Either.Either e a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  case x28
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                         s2 of wild { (,) x' s' ->
                  case x' of wild1 { (,) a1 s'1 ->
                  case a1 of wild2 {
                    Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'1), s')
                    Data.Either.Right x29
                    -> (k `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                TigerSeman.Estado TigerUnique.StGen>_R
                             <b>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <TigerSeman.Estado>_N
                                         <State.State GHC.Integer.Type.Integer>_R
                                         <Data.Either.Either e b>_N)
                          s'1)
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e b, TigerSeman.Estado)>_R)
                         s' } } })
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either e b, TigerSeman.Estado)>_R)))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e
                    (Control.Monad.Trans.State.Lazy.StateT
                       TigerSeman.Estado TigerUnique.StGen)
                    a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e
                         (Control.Monad.Trans.State.Lazy.StateT
                            TigerSeman.Estado TigerUnique.StGen)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e b>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        TigerSeman.Estado TigerUnique.StGen>_R
                                                     <b>_N)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fManticoreExceptT_$s$fApplicativeExceptT_$cpure ::
    a
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) ->
                 let {
                   eta7 :: Data.Either.Either e a = Data.Either.Right @ e @ a a1
                 } in
                 (\ (eta8 :: TigerSeman.Estado) ->
                  let {
                    a2 :: (Data.Either.Either e a, TigerSeman.Estado) = (eta7, eta8)
                  } in
                  (\ (s1 :: GHC.Integer.Type.Integer) -> (a2, s1))
                    `cast`
                  (Sym (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e a, TigerSeman.Estado)>_R)))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.Estado>_N
                           <State.State GHC.Integer.Type.Integer>_R
                           <Data.Either.Either e a>_N)))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen>_R
                               <a>_N)) -}
3489701633b607d6ee4b4bef42ada2d4
  $fManticoreExceptT_$s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s (State.State GHC.Integer.Type.Integer))
                  (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT @ s)
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$cpure @ s)
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$c<*> @ s)
                  (Control.Monad.Trans.State.Lazy.$fAlternativeStateT2
                     @ (State.State GHC.Integer.Type.Integer)
                     @ s
                     (State.$fFunctorState @ GHC.Integer.Type.Integer)
                     (State.$fMonadState @ GHC.Integer.Type.Integer))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <State.State GHC.Integer.Type.Integer>_R <c>_N))
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$c*> @ s)
                  (\ @ a
                     @ b
                     (x28 :: Control.Monad.Trans.State.Lazy.StateT
                               s (State.State GHC.Integer.Type.Integer) a)
                     (eta7 :: Control.Monad.Trans.State.Lazy.StateT
                                s (State.State GHC.Integer.Type.Integer) b)
                     (eta8 :: s) ->
                   let {
                     m :: State.State GHC.Integer.Type.Integer (a, s)
                     = x28
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                         eta8
                   } in
                   (\ (s1 :: GHC.Integer.Type.Integer) ->
                    let {
                      ds1 :: ((a, s), GHC.Integer.Type.Integer)
                      = m `cast`
                        (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                          s1
                    } in
                    let {
                      ds :: (a, s) = case ds1 of wild { (,) x29 y -> x29 }
                    } in
                    let {
                      x29 :: State.State GHC.Integer.Type.Integer (b, s)
                      = eta7
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                          (case ds of wild { (,) a1 s' -> s' })
                    } in
                    let {
                      ds2 :: ((b, s), GHC.Integer.Type.Integer)
                      = x29
                          `cast`
                        (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                          (case ds1 of wild { (,) x30 y -> y })
                    } in
                    ((case ds of wild { (,) a1 s' -> a1 },
                      case ds2 of wild { (,) x' s' ->
                      case x' of wild1 { (,) x30 s'' -> s'' } }),
                     case ds2 of wild { (,) x' s' -> s' }))
                     `cast`
                   (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.State.Lazy.StateT
                      s (State.State GHC.Integer.Type.Integer) a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)) -}
59735365408d9c9fa926bb37f5a37879
  $fManticoreExceptT_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s (State.State GHC.Integer.Type.Integer) a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(A,1*U),1*U)))><L,C(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m2 :: Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b)
                   (s1 :: s) ->
                 let {
                   x28 :: State.State GHC.Integer.Type.Integer (a, s)
                   = m2
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds :: ((a, s), GHC.Integer.Type.Integer)
                    = x28
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                        s2
                  } in
                  (k `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                     (case ds of wild { (,) x' s' ->
                      case x' of wild1 { (,) a1 s'1 -> s'1 } }))
                    `cast`
                  (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                    (case ds of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s (State.State GHC.Integer.Type.Integer) a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s (State.State GHC.Integer.Type.Integer) b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)) -}
4188ac8d419a8947e412aa42efd1c58c
  $fManticoreExceptT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s (State.State GHC.Integer.Type.Integer) (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*C1(U),1*U),1*U)))><L,C(C1(U(1*U(1*U,1*U),1*U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT
                             s (State.State GHC.Integer.Type.Integer) a)
                   (s1 :: s) ->
                 let {
                   x28 :: State.State GHC.Integer.Type.Integer (a -> b, s)
                   = ds
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <State.State GHC.Integer.Type.Integer>_R <a -> b>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds2 :: ((a -> b, s), GHC.Integer.Type.Integer)
                    = x28
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a -> b, s)>_R)
                        s2
                  } in
                  let {
                    ds3 :: (a -> b, s) = case ds2 of wild { (,) x' s' -> x' }
                  } in
                  let {
                    x29 :: State.State GHC.Integer.Type.Integer (a, s)
                    = ds1
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                        (case ds3 of wild { (,) f s' -> s' })
                  } in
                  let {
                    ds4 :: ((a, s), GHC.Integer.Type.Integer)
                    = x29
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                        (case ds2 of wild { (,) x' s' -> s' })
                  } in
                  let {
                    ds5 :: (a, s) = case ds4 of wild { (,) x' s' -> x' }
                  } in
                  ((case ds3 of wild { (,) f s' ->
                    f (case ds5 of wild1 { (,) x30 s'' -> x30 }) },
                    case ds5 of wild { (,) x30 s'' -> s'' }),
                   case ds4 of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s (State.State GHC.Integer.Type.Integer) (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s (State.State GHC.Integer.Type.Integer) a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)) -}
e871ca2abf979da71747b59475adbb6c
  $fManticoreExceptT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) (s1 :: s) ->
                 let {
                   a2 :: (a, s) = (a1, s1)
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) -> (a2, s2))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fManticoreExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e
                       (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen))
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado))
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado)) -}
40f9091502ab52b52ad9ddbd37a34ceb
  $fManticoreExceptT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s (State.State GHC.Integer.Type.Integer))
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap
                     @ (State.State GHC.Integer.Type.Integer)
                     @ s
                     (State.$fFunctorState @ GHC.Integer.Type.Integer))
                  (\ @ a
                     @ b
                     (x28 :: a)
                     (eta7 :: Control.Monad.Trans.State.Lazy.StateT
                                s (State.State GHC.Integer.Type.Integer) b)
                     (eta8 :: s) ->
                   let {
                     m :: State.State GHC.Integer.Type.Integer (b, s)
                     = eta7
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                         eta8
                   } in
                   (\ (s' :: GHC.Integer.Type.Integer) ->
                    let {
                      ds1 :: ((b, s), GHC.Integer.Type.Integer)
                      = m `cast`
                        (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                          s'
                    } in
                    ((x28,
                      case ds1 of wild { (,) x29 y ->
                      case x29 of wild1 { (,) a1 s'1 -> s'1 } }),
                     case ds1 of wild { (,) x29 y -> y }))
                     `cast`
                   (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fManticoreExceptT_$s$fMonadExceptT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e
                       (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen))
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT @ e)
                  (TigerSeman.$fManticoreExceptT_$s$fMonadExceptT_$c>>= @ e)
                  (TigerSeman.$fManticoreExceptT_$s$fMonadExceptT_$c>> @ e)
                  (\ @ a (eta7 :: a) ->
                   let {
                     eta8 :: Data.Either.Either e a = Data.Either.Right @ e @ a eta7
                   } in
                   (\ (eta9 :: TigerSeman.Estado) ->
                    let {
                      a1 :: (Data.Either.Either e a, TigerSeman.Estado) = (eta8, eta9)
                    } in
                    (\ (s1 :: GHC.Integer.Type.Integer) -> (a1, s1))
                      `cast`
                    (Sym (State.N:State[0]
                              <GHC.Integer.Type.Integer>_R
                              <(Data.Either.Either e a, TigerSeman.Estado)>_R)))
                     `cast`
                   (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <TigerSeman.Estado>_N
                             <State.State GHC.Integer.Type.Integer>_R
                             <Data.Either.Either e a>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    TigerSeman.Estado TigerUnique.StGen>_R
                                 <a>_N))
                  (\ @ a (x28 :: GHC.Base.String) (ds :: TigerSeman.Estado) ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (State.State
                          GHC.Integer.Type.Integer
                          (Data.Either.Either e a, TigerSeman.Estado))
                     x28)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <TigerSeman.Estado>_N
                                 <State.State GHC.Integer.Type.Integer>_R
                                 <Data.Either.Either
                                    e a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N
                                                       <Control.Monad.Trans.State.Lazy.StateT
                                                          TigerSeman.Estado TigerUnique.StGen>_R
                                                       <a>_N)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fManticoreExceptT_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT
      e
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
      a
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,U),U)))><L,C(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m2 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e
                           (Control.Monad.Trans.State.Lazy.StateT
                              TigerSeman.Estado TigerUnique.StGen)
                           b)
                   (s1 :: TigerSeman.Estado) ->
                 let {
                   x28 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either e a, TigerSeman.Estado)
                   = m2
                       `cast`
                     (Control.Monad.Trans.Except.N:ExceptT[0]
                          <e>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen>_R
                          <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <TigerSeman.Estado>_N
                                      <State.State GHC.Integer.Type.Integer>_R
                                      <Data.Either.Either e a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  case x28
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                         s2 of wild { (,) x' s' ->
                  case x' of wild1 { (,) a1 s'1 ->
                  case a1 of wild2 {
                    Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'1), s')
                    Data.Either.Right x29
                    -> (k `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                TigerSeman.Estado TigerUnique.StGen>_R
                             <b>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <TigerSeman.Estado>_N
                                         <State.State GHC.Integer.Type.Integer>_R
                                         <Data.Either.Either e b>_N)
                          s'1)
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e b, TigerSeman.Estado)>_R)
                         s' } } })
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either e b, TigerSeman.Estado)>_R)))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e
                    (Control.Monad.Trans.State.Lazy.StateT
                       TigerSeman.Estado TigerUnique.StGen)
                    a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e
                         (Control.Monad.Trans.State.Lazy.StateT
                            TigerSeman.Estado TigerUnique.StGen)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e b>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        TigerSeman.Estado TigerUnique.StGen>_R
                                                     <b>_N)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fManticoreExceptT_$s$fMonadExceptT_$c>>= ::
    Control.Monad.Trans.Except.ExceptT
      e
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
      a
    -> (a
        -> Control.Monad.Trans.Except.ExceptT
             e
             (Control.Monad.Trans.State.Lazy.StateT
                TigerSeman.Estado TigerUnique.StGen)
             b)
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,U),U)))><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m2 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Except.ExceptT
                              e
                              (Control.Monad.Trans.State.Lazy.StateT
                                 TigerSeman.Estado TigerUnique.StGen)
                              b)
                   (s1 :: TigerSeman.Estado) ->
                 let {
                   x28 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either e a, TigerSeman.Estado)
                   = m2
                       `cast`
                     (Control.Monad.Trans.Except.N:ExceptT[0]
                          <e>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen>_R
                          <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <TigerSeman.Estado>_N
                                      <State.State GHC.Integer.Type.Integer>_R
                                      <Data.Either.Either e a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  case x28
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                         s2 of wild { (,) x' s' ->
                  case x' of wild1 { (,) a1 s'1 ->
                  case a1 of wild2 {
                    Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'1), s')
                    Data.Either.Right x29
                    -> ((k x29)
                          `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                TigerSeman.Estado TigerUnique.StGen>_R
                             <b>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <TigerSeman.Estado>_N
                                         <State.State GHC.Integer.Type.Integer>_R
                                         <Data.Either.Either e b>_N)
                          s'1)
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e b, TigerSeman.Estado)>_R)
                         s' } } })
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either e b, TigerSeman.Estado)>_R)))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e
                    (Control.Monad.Trans.State.Lazy.StateT
                       TigerSeman.Estado TigerUnique.StGen)
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e b>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        TigerSeman.Estado TigerUnique.StGen>_R
                                                     <b>_N)) -}
5725d8a6d7ced095c259e84cd57a0471
  $fManticoreExceptT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s (State.State GHC.Integer.Type.Integer))
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT @ s)
                  (TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$c>>= @ s)
                  (TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$c>> @ s)
                  (\ @ a (eta7 :: a) (eta8 :: s) ->
                   let {
                     a1 :: (a, s) = (eta7, eta8)
                   } in
                   (\ (s1 :: GHC.Integer.Type.Integer) -> (a1, s1))
                     `cast`
                   (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N))
                  (TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$cfail @ s) -}
f125c0325fc45b2d9812018fdbda32de
  $fManticoreExceptT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT
      s (State.State GHC.Integer.Type.Integer) a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(A,1*U),1*U)))><L,C(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m2 :: Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b)
                   (s1 :: s) ->
                 let {
                   x28 :: State.State GHC.Integer.Type.Integer (a, s)
                   = m2
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds :: ((a, s), GHC.Integer.Type.Integer)
                    = x28
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                        s2
                  } in
                  (k `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                     (case ds of wild { (,) x' s' ->
                      case x' of wild1 { (,) a1 s'1 -> s'1 } }))
                    `cast`
                  (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                    (case ds of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s (State.State GHC.Integer.Type.Integer) a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s (State.State GHC.Integer.Type.Integer) b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)) -}
ed83cea1837a58e30580e643149d49a8
  $fManticoreExceptT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT
      s (State.State GHC.Integer.Type.Integer) a
    -> (a
        -> Control.Monad.Trans.State.Lazy.StateT
             s (State.State GHC.Integer.Type.Integer) b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,1*U),1*U)))><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m2 :: Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT
                              s (State.State GHC.Integer.Type.Integer) b)
                   (s1 :: s) ->
                 let {
                   x28 :: State.State GHC.Integer.Type.Integer (a, s)
                   = m2
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds :: ((a, s), GHC.Integer.Type.Integer)
                    = x28
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                        s2
                  } in
                  let {
                    ds1 :: (a, s) = case ds of wild { (,) x' s' -> x' }
                  } in
                  ((k (case ds1 of wild { (,) a1 s' -> a1 }))
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                     (case ds1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                    (case ds of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s (State.State GHC.Integer.Type.Integer) a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)) -}
3de5f11fcd14a6b57f3694b48c1ec2bf
  $fManticoreExceptT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ (State.State GHC.Integer.Type.Integer (a, s))
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)) -}
b5db864052a42b624210531899b065ff
  $fManticoreExceptT_$sgo13 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 4, Strictness: <L,U><S(SSS),1*U(U,U,U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a1
                   (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text)
                   (w2 :: a1)
                   (w3 :: Data.Map.Internal.Map Data.Text.Internal.Text a1) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 TigerSeman.$w$sgo13 @ a1 w ww1 ww2 ww3 w2 w3 }) -}
708bb7847b542e68b1c61b0d9740e476
  $fManticoreExceptT_eta ::
    Data.Either.Either Data.Text.Internal.Text ()
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ ()
                   GHC.Tuple.()) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT :: TigerTrans.MemM TigerSeman.Monada
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.Monada
                  (TigerSeman.$fManticoreExceptT_$s$fMonadExceptT
                     @ Data.Text.Internal.Text)
                  TigerSeman.$fMemMExceptT_$cp2MemM
                  TigerSeman.$fDemonExceptT
                  TigerSeman.$fMemMExceptT16
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text GHC.Types.Int,
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           GHC.Types.Int>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                        <Data.Text.Internal.Text>_N
                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                           TigerSeman.Estado
                                                                                                           TigerUnique.StGen>_R
                                                                                                        <GHC.Types.Int>_N)))
                  TigerSeman.$fMemMExceptT15
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text (),
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                             <Data.Text.Internal.Text>_N
                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                TigerSeman.Estado
                                                                                                TigerUnique.StGen>_R
                                                                                             <()>_N)))
                  TigerSeman.$fMemMExceptT14
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text (),
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                             <Data.Text.Internal.Text>_N
                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                TigerSeman.Estado
                                                                                                TigerUnique.StGen>_R
                                                                                             <()>_N)))
                  TigerSeman.$fMemMExceptT13
                    `cast`
                  (<GHC.Base.Maybe TigerTemp.Label>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text (),
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                  <Data.Text.Internal.Text>_N
                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                     TigerSeman.Estado
                                                                                                     TigerUnique.StGen>_R
                                                                                                  <()>_N)))
                  TigerSeman.$fMemMExceptT10
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either
                                      Data.Text.Internal.Text (GHC.Base.Maybe TigerTemp.Label),
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           (GHC.Base.Maybe
                                                                              TigerTemp.Label)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                 TigerSeman.Estado
                                                                                                                 TigerUnique.StGen>_R
                                                                                                              <GHC.Base.Maybe
                                                                                                                 TigerTemp.Label>_N)))
                  TigerSeman.$fMemMExceptT9
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text (),
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                             <Data.Text.Internal.Text>_N
                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                TigerSeman.Estado
                                                                                                TigerUnique.StGen>_R
                                                                                             <()>_N)))
                  TigerSeman.$fMemMExceptT8
                    `cast`
                  (<TigerTrans.Level>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text (),
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                  <Data.Text.Internal.Text>_N
                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                     TigerSeman.Estado
                                                                                                     TigerUnique.StGen>_R
                                                                                                  <()>_N)))
                  TigerSeman.$fMemMExceptT7
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text (),
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                             <Data.Text.Internal.Text>_N
                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                TigerSeman.Estado
                                                                                                TigerUnique.StGen>_R
                                                                                             <()>_N)))
                  TigerSeman.$fMemMExceptT6
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text TigerTrans.Level,
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           TigerTrans.Level>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                           <Data.Text.Internal.Text>_N
                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                              TigerSeman.Estado
                                                                                                              TigerUnique.StGen>_R
                                                                                                           <TigerTrans.Level>_N)))
                  TigerSeman.$fMemMExceptT5
                    `cast`
                  (<TigerAbs.Escapa>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either
                                           Data.Text.Internal.Text TigerFrame.Access,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerFrame.Access>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                    TigerSeman.Estado
                                                                                                                    TigerUnique.StGen>_R
                                                                                                                 <TigerFrame.Access>_N)))
                  TigerSeman.$fMemMExceptT3
                    `cast`
                  (<TigerAbs.Escapa>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either
                                           Data.Text.Internal.Text TigerFrame.Access,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerFrame.Access>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                    TigerSeman.Estado
                                                                                                                    TigerUnique.StGen>_R
                                                                                                                 <TigerFrame.Access>_N)))
                  TigerSeman.$fMemMExceptT2
                    `cast`
                  (<TigerFrame.Frag>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text (),
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                ()>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                  <Data.Text.Internal.Text>_N
                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                     TigerSeman.Estado
                                                                                                     TigerUnique.StGen>_R
                                                                                                  <()>_N)))
                  TigerSeman.$fMemMExceptT1
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text [TigerFrame.Frag],
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           [TigerFrame.Frag]>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                            <Data.Text.Internal.Text>_N
                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                               TigerSeman.Estado
                                                                                                               TigerUnique.StGen>_R
                                                                                                            <[TigerFrame.Frag]>_N))) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT1 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text [TigerFrame.Frag],
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U,U,U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 ((Data.Either.Right
                     @ Data.Text.Internal.Text
                     @ [TigerFrame.Frag]
                     (case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 -> ds4 }),
                   s1),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT10 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either
           Data.Text.Internal.Text (GHC.Base.Maybe TigerTemp.Label),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <S(LLLSLL),1*U(U,U,U,U,U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                 case ds3 of wild1 {
                   []
                   -> ((Data.Either.Left
                          @ TigerSymbol.Symbol
                          @ (GHC.Base.Maybe TigerTemp.Label)
                          TigerSeman.$fMemMExceptT11,
                        wild),
                       eta7)
                   : ipv ipv1
                   -> ((Data.Either.Right
                          @ Data.Text.Internal.Text
                          @ (GHC.Base.Maybe TigerTemp.Label)
                          ipv,
                        wild),
                       eta7) } }) -}
39a4884046b02c54d605044c87d7ed55
  $fMemMExceptT11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.$fMemMExceptT12) -}
987a4ef286476418379b58b124300894
  $fMemMExceptT12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unethical break."#) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT13 ::
    GHC.Base.Maybe TigerTemp.Label
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,1*U(U,U,U,U,U,U)><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ml :: GHC.Base.Maybe TigerTemp.Label)
                   (s1 :: TigerSeman.Estado)
                   (eta7 :: GHC.Integer.Type.Integer) ->
                 ((TigerSeman.$fManticoreExceptT_eta,
                   case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                   TigerSeman.Est
                     ds
                     ds1
                     ds2
                     (GHC.Types.: @ (GHC.Base.Maybe TigerTemp.Label) ml ds3)
                     ds4
                     ds5 }),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT14 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U,U,U,U,U,1*U(U))><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 ((TigerSeman.$fManticoreExceptT_eta,
                   case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                   TigerSeman.Est
                     ds
                     ds1
                     ds2
                     ds3
                     ds4
                     (case ds5 of wild1 { GHC.Types.I# x28 ->
                      GHC.Types.I# (GHC.Prim.-# x28 1#) }) }),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT15 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U,U,U,U,U,1*U(U))><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 ((TigerSeman.$fManticoreExceptT_eta,
                   case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                   TigerSeman.Est
                     ds
                     ds1
                     ds2
                     ds3
                     ds4
                     (case ds5 of wild1 { GHC.Types.I# x28 ->
                      GHC.Types.I# (GHC.Prim.+# x28 1#) }) }),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT16 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text GHC.Types.Int,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 ((Data.Either.Right
                     @ Data.Text.Internal.Text
                     @ GHC.Types.Int
                     (case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                      case ds2 of wild1 {
                        [] -> case GHC.List.badHead ret_ty GHC.Types.Int of {}
                        : x28 ds6
                        -> case x28 of wild2 {
                             [] -> case GHC.List.badHead ret_ty GHC.Types.Int of {}
                             : x29 ds7
                             -> case x29 of wild3 { TigerTrans.MkLI ds8 ds9 -> ds9 } } } }),
                   s1),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT2 ::
    TigerFrame.Frag
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,1*U(U,U,U,U,U,U)><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (fr :: TigerFrame.Frag)
                   (s1 :: TigerSeman.Estado)
                   (eta7 :: GHC.Integer.Type.Integer) ->
                 ((TigerSeman.$fManticoreExceptT_eta,
                   case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                   TigerSeman.Est
                     ds
                     ds1
                     ds2
                     ds3
                     (GHC.Types.: @ TigerFrame.Frag fr ds4)
                     ds5 }),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT3 ::
    TigerAbs.Escapa
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerFrame.Access,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <S,1*U><L,U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TigerAbs.Escapa)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case TigerSeman.$w$callocArg w w1 w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
e5ee473cbc63d6c510099a6cd83b7e9a
  $fMemMExceptT4 :: TigerTrans.Level
  {- Strictness: x -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT5 ::
    TigerAbs.Escapa
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerFrame.Access,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <S,1*U><L,U(U,U,U,U,U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TigerAbs.Escapa)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case TigerSeman.$w$callocLocal w w1 w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT6 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerTrans.Level,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 ((Data.Either.Right
                     @ Data.Text.Internal.Text
                     @ TigerTrans.Level
                     (case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                      GHC.List.head @ TigerTrans.Level ds2 }),
                   s1),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT7 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,1*U(U,U,1*U,U,U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 ((TigerSeman.$fManticoreExceptT_eta,
                   case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                   TigerSeman.Est
                     ds
                     ds1
                     (case ds2 of wild1 {
                        [] -> GHC.List.scanl2 @ TigerTrans.Level : ds6 xs -> xs })
                     ds3
                     ds4
                     ds5 }),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT8 ::
    TigerTrans.Level
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,1*U(U,U,U,U,U,U)><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (lvl158 :: TigerTrans.Level)
                   (s1 :: TigerSeman.Estado)
                   (eta7 :: GHC.Integer.Type.Integer) ->
                 ((TigerSeman.$fManticoreExceptT_eta,
                   case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                   TigerSeman.Est
                     ds
                     ds1
                     (GHC.Types.: @ TigerTrans.Level lvl158 ds2)
                     ds3
                     ds4
                     ds5 }),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT9 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text (),
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta7 :: GHC.Integer.Type.Integer) ->
                 ((TigerSeman.$fManticoreExceptT_eta,
                   case s1 of wild { TigerSeman.Est ds ds1 ds2 ds3 ds4 ds5 ->
                   TigerSeman.Est
                     ds
                     ds1
                     ds2
                     (case ds3 of wild1 {
                        [] -> GHC.List.scanl2 @ (GHC.Base.Maybe TigerTemp.Label)
                        : ds6 xs -> xs })
                     ds4
                     ds5 }),
                  eta7)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT_$cp2MemM :: TigerTemp.TLGenerator TigerSeman.Monada
  {- Unfolding: (TigerTemp.$fTLGeneratort
                   @ (Control.Monad.Trans.Except.ExceptT TigerSymbol.Symbol)
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        TigerSeman.Estado TigerUnique.StGen)
                   (Control.Monad.Trans.Except.$fMonadTransExceptT_$clift
                      @ Data.Text.Internal.Text)
                     `cast`
                   (Sym (Control.Monad.Trans.Class.N:MonadTrans[0]
                             <Control.Monad.Trans.Except.ExceptT Data.Text.Internal.Text>_N))
                   TigerSeman.$fMemMExceptT_$s$fTLGeneratort
                   (TigerSeman.$fManticoreExceptT_$s$fMonadStateT
                      @ TigerSeman.Estado)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fMemMExceptT_$s$fTLGeneratort ::
    TigerTemp.TLGenerator
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado (State.State GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       TigerSeman.Estado (State.State GHC.Integer.Type.Integer))
                  (\ (s1 :: TigerSeman.Estado) (s2 :: GHC.Integer.Type.Integer) ->
                   let {
                     s :: GHC.Integer.Type.Integer
                     = GHC.Integer.Type.plusInteger
                         s2
                         TigerUnique.$fUniqueGeneratorState2
                   } in
                   ((TigerTemp.detgenTemp s, s1), s))
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(TigerTemp.Temp,
                                    TigerSeman.Estado)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <TigerSeman.Estado>_N
                                                                       <State.State
                                                                          GHC.Integer.Type.Integer>_R
                                                                       <TigerTemp.Temp>_N))
                  (\ (s1 :: TigerSeman.Estado) (s2 :: GHC.Integer.Type.Integer) ->
                   let {
                     s :: GHC.Integer.Type.Integer
                     = GHC.Integer.Type.plusInteger
                         s2
                         TigerUnique.$fUniqueGeneratorState2
                   } in
                   ((TigerTemp.detgenLabel s, s1), s))
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(TigerTemp.Label,
                                    TigerSeman.Estado)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <TigerSeman.Estado>_N
                                                                       <State.State
                                                                          GHC.Integer.Type.Integer>_R
                                                                       <TigerTemp.Label>_N)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fShowEstado :: GHC.Show.Show TigerSeman.Estado
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.Estado
                  TigerSeman.$fShowEstado_$cshowsPrec
                  TigerSeman.$fShowEstado_$cshow
                  TigerSeman.$fShowEstado_$cshowList -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fShowEstado1 :: TigerSeman.Estado -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U,U,U,U(U))>,
     Unfolding: (\ (w :: TigerSeman.Estado) ->
                 case w of ww { TigerSeman.Est ww1 ww2 ww3 ww4 ww5 ww6 ->
                 TigerSeman.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 }) -}
2b1edc93c5c007a88429680c7e7dd7f2
  $fShowEstado2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fShowEstado_$cshow :: TigerSeman.Estado -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U,U,U,U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x28 :: TigerSeman.Estado) ->
                 TigerSeman.$fShowEstado_$cshowsPrec
                   TigerSeman.$fShowEstado2
                   x28
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fShowEstado_$cshowList :: [TigerSeman.Estado] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerSeman.Estado]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerSeman.Estado
                   TigerSeman.$fShowEstado1
                   ls
                   s) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $fShowEstado_$cshowsPrec ::
    GHC.Types.Int -> TigerSeman.Estado -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,U,U,U,U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: TigerSeman.Estado) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8 ->
                 TigerSeman.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 } }) -}
be0002ace04b0f59daf0819e18035f12
  $s$fApplicativeExceptT_$c<*>1 ::
    Control.Monad.Trans.Except.ExceptT
      e
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
      (a -> b)
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         a
    -> TigerSeman.Estado
    -> State.State
         GHC.Integer.Type.Integer
         (Data.Either.Either e b, TigerSeman.Estado)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,U),U)))><L,C(C1(U(1*U(1*U,U),U)))><L,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w1 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            (a -> b))
                   (w2 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            a)
                   (s1 :: TigerSeman.Estado) ->
                 let {
                   x28 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either e (a -> b), TigerSeman.Estado)
                   = w1
                       `cast`
                     (Control.Monad.Trans.Except.N:ExceptT[0]
                          <e>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen>_R
                          <a -> b>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <TigerSeman.Estado>_N
                                           <State.State GHC.Integer.Type.Integer>_R
                                           <Data.Either.Either e (a -> b)>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  case x28
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e (a -> b), TigerSeman.Estado)>_R)
                         s2 of wild { (,) x' s' ->
                  case x' of wild1 { (,) a1 s'1 ->
                  case a1 of wild2 {
                    Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'1), s')
                    Data.Either.Right k
                    -> case (w2
                               `cast`
                             (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <e>_N
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     TigerSeman.Estado TigerUnique.StGen>_R
                                  <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <TigerSeman.Estado>_N
                                              <State.State GHC.Integer.Type.Integer>_R
                                              <Data.Either.Either e a>_N)
                               s'1)
                              `cast`
                            (State.N:State[0]
                                 <GHC.Integer.Type.Integer>_R
                                 <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                              s' of wild3 { (,) x'1 s'2 ->
                       case x'1 of wild4 { (,) a2 s'3 ->
                       case a2 of wild5 {
                         Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'3), s'2)
                         Data.Either.Right x29
                         -> ((Data.Either.Right @ e @ b (k x29), s'3), s'2) } } } } } })
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either e b, TigerSeman.Estado)>_R))) -}
afd4a2aa0aca5d9d676adf1bc7ed3f93
  $sbool :: a -> a -> GHC.Types.Bool -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ a (f :: a) (t :: a) (p :: GHC.Types.Bool) ->
                 case p of wild { GHC.Types.False -> f GHC.Types.True -> t }) -}
d03425060221152e6578afd70a571502
  $sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x28 ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x28
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> TigerSeman.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x28
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2
                             GHC.Types.LT
                             -> TigerSeman.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x28
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 } } } } } } }) -}
4f033d5b244c470871a4da897170f88a
  $sfromList1 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3828c24f2b543d5db7f139f30f7e09cd
  $tc'Est :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7751132883108977614##
                   16144863247589418892##
                   TigerSeman.$trModule
                   TigerSeman.$tc'Est2
                   0#
                   TigerSeman.$tc'Est1) -}
483b687c058f588ad46e0dea08674cf4
  $tc'Est1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
379bcff0dd4e43fe27e920a8096fe031
  $tc'Est2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$tc'Est3) -}
57475c87bffe154df7f8d040d9ed1b8e
  $tc'Est3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Est"#) -}
f043d1f92b7a5bbcdb31419d0e9f7762
  $tcEstado :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12645369257268979485##
                   6720987440523502189##
                   TigerSeman.$trModule
                   TigerSeman.$tcEstado1
                   0#
                   GHC.Types.krep$*) -}
d231e5c134bbbee52189fe4c125df7f3
  $tcEstado1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$tcEstado2) -}
0769d606a5067a8f4962267b10128b72
  $tcEstado2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Estado"#) -}
214a6d7b447b0825c6f6085205c3beee
  $tcManticore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13396820759940438385##
                   16568066775536838624##
                   TigerSeman.$trModule
                   TigerSeman.$tcManticore2
                   0#
                   TigerSeman.$tcManticore1) -}
8b34f4c0de3bb30b9cad1513800cd439
  $tcManticore1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
05c442a7640e1a91d0b47c316ee1f090
  $tcManticore2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$tcManticore3) -}
a19a516e65e39e72c0cede4f53d97991
  $tcManticore3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Manticore"#) -}
2920ac9715fc396e233a2d077035212b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerSeman.$trModule3
                   TigerSeman.$trModule1) -}
2cbe128b06c8865cc46415c3af7a2c7b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$trModule2) -}
d3b78940fccb0ad31f0c0cc788db390d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TigerSeman"#) -}
043bb62fa0b99b4e6ca8707668eca730
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$trModule4) -}
4d17c7f7a459e33590eb0b64db57298d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY"#) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $w$callocArg ::
    TigerAbs.Escapa
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> (# (Data.Either.Either
             Data.Text.Internal.Text TigerFrame.Access,
           TigerSeman.Estado),
          GHC.Integer.Type.Integer #)
  {- Arity: 3, Strictness: <S,1*U><L,U(U,U,U,U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: TigerAbs.Escapa)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 let {
                   ds :: TigerTrans.Level
                   = case w1 of wild { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                     case ds3 of wild1 {
                       [] -> GHC.List.badHead @ TigerTrans.Level : x28 ds7 -> x28 } }
                 } in
                 let {
                   fr :: TigerFrame.Frame
                   = case ds of wild {
                       [] -> case GHC.List.badHead ret_ty TigerFrame.Frame of {}
                       : x28 ds1 -> case x28 of wild1 { TigerTrans.MkLI ds2 ds3 -> ds2 } }
                 } in
                 case w of wild {
                   TigerAbs.Escapa
                   -> let {
                        actual :: GHC.Types.Int
                        = case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                          ds4 }
                      } in
                      (# (Data.Either.Right
                            @ Data.Text.Internal.Text
                            @ TigerFrame.Access
                            (TigerFrame.InFrame
                               (case actual of wild1 { GHC.Types.I# x28 ->
                                GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# x28 4#) 4#) })),
                          case w1 of wild1 { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                          TigerSeman.Est
                            ds1
                            ds2
                            (GHC.Types.:
                               @ TigerTrans.Level
                               (case ds of wild2 {
                                  [] -> TigerSeman.$fMemMExceptT4
                                  : ds7 xs
                                  -> case ds7 of wild3 { TigerTrans.MkLI ds8 l ->
                                     GHC.Types.:
                                       @ TigerTrans.LevelI
                                       (TigerTrans.MkLI
                                          (case fr of wild4 { TigerFrame.Frame ds9 ds10 ds11 ds12 ds13 ds14 ->
                                           TigerFrame.Frame
                                             ds9
                                             ds10
                                             ds11
                                             (case actual of wild5 { GHC.Types.I# x28 ->
                                              GHC.Types.I# (GHC.Prim.+# x28 1#) })
                                             ds13
                                             ds14 })
                                          l)
                                       xs } })
                               (case ds3 of wild2 {
                                  [] -> GHC.List.scanl2 @ TigerTrans.Level : ds7 xs -> xs }))
                            ds4
                            ds5
                            ds6 }),
                         w2 #)
                   TigerAbs.NoEscapa
                   -> let {
                        s :: GHC.Integer.Type.Integer
                        = GHC.Integer.Type.plusInteger
                            w2
                            TigerUnique.$fUniqueGeneratorState2
                      } in
                      (# (Data.Either.Right
                            @ Data.Text.Internal.Text
                            @ TigerFrame.Access
                            (TigerFrame.InReg (TigerTemp.detgenTemp s)),
                          case w1 of wild1 { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                          TigerSeman.Est
                            ds1
                            ds2
                            (GHC.Types.:
                               @ TigerTrans.Level
                               (case ds of wild2 {
                                  [] -> TigerSeman.$fMemMExceptT4
                                  : ds7 xs
                                  -> case ds7 of wild3 { TigerTrans.MkLI ds8 l ->
                                     GHC.Types.: @ TigerTrans.LevelI (TigerTrans.MkLI fr l) xs } })
                               (case ds3 of wild2 {
                                  [] -> GHC.List.scanl2 @ TigerTrans.Level : ds7 xs -> xs }))
                            ds4
                            ds5
                            ds6 }),
                         s #) }) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  $w$callocLocal ::
    TigerAbs.Escapa
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> (# (Data.Either.Either
             Data.Text.Internal.Text TigerFrame.Access,
           TigerSeman.Estado),
          GHC.Integer.Type.Integer #)
  {- Arity: 3, Strictness: <S,1*U><L,U(U,U,U,U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: TigerAbs.Escapa)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 let {
                   ds :: TigerTrans.Level
                   = case w1 of wild { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                     case ds3 of wild1 {
                       [] -> GHC.List.badHead @ TigerTrans.Level : x28 ds7 -> x28 } }
                 } in
                 let {
                   fr :: TigerFrame.Frame
                   = case ds of wild {
                       [] -> case GHC.List.badHead ret_ty TigerFrame.Frame of {}
                       : x28 ds1 -> case x28 of wild1 { TigerTrans.MkLI ds2 ds3 -> ds2 } }
                 } in
                 case w of wild {
                   TigerAbs.Escapa
                   -> let {
                        actual :: GHC.Types.Int
                        = case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                          ds5 }
                      } in
                      (# (Data.Either.Right
                            @ Data.Text.Internal.Text
                            @ TigerFrame.Access
                            (TigerFrame.InFrame
                               (case actual of wild1 { GHC.Types.I# x28 ->
                                GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# x28 4#) 4#) })),
                          case w1 of wild1 { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                          TigerSeman.Est
                            ds1
                            ds2
                            (GHC.Types.:
                               @ TigerTrans.Level
                               (case ds of wild2 {
                                  [] -> TigerSeman.$fMemMExceptT4
                                  : ds7 xs
                                  -> case ds7 of wild3 { TigerTrans.MkLI ds8 l ->
                                     GHC.Types.:
                                       @ TigerTrans.LevelI
                                       (TigerTrans.MkLI
                                          (case fr of wild4 { TigerFrame.Frame ds9 ds10 ds11 ds12 ds13 ds14 ->
                                           TigerFrame.Frame
                                             ds9
                                             ds10
                                             ds11
                                             ds12
                                             (case actual of wild5 { GHC.Types.I# x28 ->
                                              GHC.Types.I# (GHC.Prim.+# x28 1#) })
                                             ds14 })
                                          l)
                                       xs } })
                               (case ds3 of wild2 {
                                  [] -> GHC.List.scanl2 @ TigerTrans.Level : ds7 xs -> xs }))
                            ds4
                            ds5
                            ds6 }),
                         w2 #)
                   TigerAbs.NoEscapa
                   -> let {
                        s :: GHC.Integer.Type.Integer
                        = GHC.Integer.Type.plusInteger
                            w2
                            TigerUnique.$fUniqueGeneratorState2
                      } in
                      (# (Data.Either.Right
                            @ Data.Text.Internal.Text
                            @ TigerFrame.Access
                            (TigerFrame.InReg (TigerTemp.detgenTemp s)),
                          case w1 of wild1 { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                          TigerSeman.Est
                            ds1
                            ds2
                            (GHC.Types.:
                               @ TigerTrans.Level
                               (case ds of wild2 {
                                  [] -> TigerSeman.$fMemMExceptT4
                                  : ds7 xs
                                  -> case ds7 of wild3 { TigerTrans.MkLI ds8 l ->
                                     GHC.Types.: @ TigerTrans.LevelI (TigerTrans.MkLI fr l) xs } })
                               (case ds3 of wild2 {
                                  [] -> GHC.List.scanl2 @ TigerTrans.Level : ds7 xs -> xs }))
                            ds4
                            ds5
                            ds6 }),
                         s #) }) -}
0b44c3e07ee2b3b90d9ff0005127a6ef
  $w$cgetTipoFunV ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo
    -> [TigerTrans.Level]
    -> [GHC.Base.Maybe TigerTemp.Label]
    -> [TigerFrame.Frag]
    -> GHC.Types.Int
    -> GHC.Integer.Type.Integer
    -> (# (Data.Either.Either
             Data.Text.Internal.Text TigerSres.FunEntry,
           TigerSeman.Estado),
          GHC.Integer.Type.Integer #)
  {- Arity: 10,
     Strictness: <S,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Data.Map.Internal.Map
                             TigerSymbol.Symbol TigerSres.EnvEntry)
                   (ww4 :: Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo)
                   (ww5 :: [TigerTrans.Level])
                   (ww6 :: [GHC.Base.Maybe TigerTemp.Label])
                   (ww7 :: [TigerFrame.Frag])
                   (ww8 :: GHC.Types.Int)
                   (w :: GHC.Integer.Type.Integer) ->
                 case TigerSeman.$wpoly_go13
                        @ TigerSres.EnvEntry
                        ww
                        ww1
                        ww2
                        ww3 of wild {
                   GHC.Base.Nothing
                   -> (# (Data.Either.Left
                            @ TigerSymbol.Symbol
                            @ TigerSres.FunEntry
                            (case GHC.CString.unpackAppendCString#
                                    TigerSeman.$fManticoreExceptT20
                                    (case Data.Text.Show.$w$cshow
                                            (Data.Text.Internal.Text
                                               ww
                                               ww1
                                               ww2) of ww9 { (#,#) ww10 ww11 ->
                                     GHC.Base.++_$s++
                                       @ GHC.Types.Char
                                       TigerSeman.$fManticoreExceptT8
                                       ww10
                                       ww11 }) of dt { DEFAULT ->
                             case GHC.Magic.runRW#
                                    @ ('GHC.Types.TupleRep
                                         '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Text.Internal.Text #)
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case GHC.Prim.newByteArray#
                                            @ GHC.Prim.RealWorld
                                            10#
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     TigerSeman.$wouter2
                                       ipv1
                                       4#
                                       dt
                                       0#
                                       ipv }) of ds1 { (#,#) ipv ipv1 ->
                             ipv1 } }),
                          TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8),
                         w #)
                   GHC.Base.Just x28
                   -> case x28 of wild1 {
                        TigerSres.Var ipv
                        -> (# (TigerSeman.$fManticoreExceptT17,
                               TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8),
                              w #)
                        TigerSres.Func f
                        -> (# (Data.Either.Right
                                 @ Data.Text.Internal.Text
                                 @ TigerSres.FunEntry
                                 f,
                               TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8),
                              w #) } }) -}
fd0b2d20f46d5fe9ae55c7f13ae7a095
  $w$cgetTipoT ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo
    -> [TigerTrans.Level]
    -> [GHC.Base.Maybe TigerTemp.Label]
    -> [TigerFrame.Frag]
    -> GHC.Types.Int
    -> GHC.Integer.Type.Integer
    -> (# (Data.Either.Either Data.Text.Internal.Text TigerTips.Tipo,
           TigerSeman.Estado),
          GHC.Integer.Type.Integer #)
  {- Arity: 10,
     Strictness: <S,U><S,U><S,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Data.Map.Internal.Map
                             TigerSymbol.Symbol TigerSres.EnvEntry)
                   (ww4 :: Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo)
                   (ww5 :: [TigerTrans.Level])
                   (ww6 :: [GHC.Base.Maybe TigerTemp.Label])
                   (ww7 :: [TigerFrame.Frag])
                   (ww8 :: GHC.Types.Int)
                   (w :: GHC.Integer.Type.Integer) ->
                 case TigerSeman.$wpoly_go13
                        @ TigerTips.Tipo
                        ww
                        ww1
                        ww2
                        ww4 of wild {
                   GHC.Base.Nothing
                   -> (# (Data.Either.Left
                            @ TigerSymbol.Symbol
                            @ TigerTips.Tipo
                            (case GHC.CString.unpackAppendCString#
                                    TigerSeman.$fManticoreExceptT10
                                    (case Data.Text.Show.$w$cshow
                                            (Data.Text.Internal.Text
                                               ww
                                               ww1
                                               ww2) of ww9 { (#,#) ww10 ww11 ->
                                     GHC.Base.++_$s++
                                       @ GHC.Types.Char
                                       TigerSeman.$fManticoreExceptT8
                                       ww10
                                       ww11 }) of dt { DEFAULT ->
                             case GHC.Magic.runRW#
                                    @ ('GHC.Types.TupleRep
                                         '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Text.Internal.Text #)
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case GHC.Prim.newByteArray#
                                            @ GHC.Prim.RealWorld
                                            10#
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     TigerSeman.$wouter
                                       ipv1
                                       4#
                                       dt
                                       0#
                                       ipv }) of ds1 { (#,#) ipv ipv1 ->
                             ipv1 } }),
                          TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8),
                         w #)
                   GHC.Base.Just x28
                   -> (# (Data.Either.Right
                            @ Data.Text.Internal.Text
                            @ TigerTips.Tipo
                            x28,
                          TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8),
                         w #) }) -}
f1d115f69036eabfcfe739146ac8ddc2
  $w$cgetTipoValV ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo
    -> [TigerTrans.Level]
    -> [GHC.Base.Maybe TigerTemp.Label]
    -> [TigerFrame.Frag]
    -> GHC.Types.Int
    -> GHC.Integer.Type.Integer
    -> (# (Data.Either.Either
             Data.Text.Internal.Text TigerSres.ValEntry,
           TigerSeman.Estado),
          GHC.Integer.Type.Integer #)
  {- Arity: 10,
     Strictness: <S,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Data.Map.Internal.Map
                             TigerSymbol.Symbol TigerSres.EnvEntry)
                   (ww4 :: Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo)
                   (ww5 :: [TigerTrans.Level])
                   (ww6 :: [GHC.Base.Maybe TigerTemp.Label])
                   (ww7 :: [TigerFrame.Frag])
                   (ww8 :: GHC.Types.Int)
                   (w :: GHC.Integer.Type.Integer) ->
                 case TigerSeman.$wpoly_go13
                        @ TigerSres.EnvEntry
                        ww
                        ww1
                        ww2
                        ww3 of wild {
                   GHC.Base.Nothing
                   -> (# (Data.Either.Left
                            @ TigerSymbol.Symbol
                            @ TigerSres.ValEntry
                            (case GHC.CString.unpackAppendCString#
                                    TigerSeman.$fManticoreExceptT15
                                    (case Data.Text.Show.$w$cshow
                                            (Data.Text.Internal.Text
                                               ww
                                               ww1
                                               ww2) of ww9 { (#,#) ww10 ww11 ->
                                     GHC.Base.++_$s++
                                       @ GHC.Types.Char
                                       TigerSeman.$fManticoreExceptT8
                                       ww10
                                       ww11 }) of dt { DEFAULT ->
                             case GHC.Magic.runRW#
                                    @ ('GHC.Types.TupleRep
                                         '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Text.Internal.Text #)
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case GHC.Prim.newByteArray#
                                            @ GHC.Prim.RealWorld
                                            10#
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     TigerSeman.$wouter1
                                       ipv1
                                       4#
                                       dt
                                       0#
                                       ipv }) of ds1 { (#,#) ipv ipv1 ->
                             ipv1 } }),
                          TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8),
                         w #)
                   GHC.Base.Just x28
                   -> case x28 of wild1 {
                        TigerSres.Var f
                        -> (# (Data.Either.Right
                                 @ Data.Text.Internal.Text
                                 @ TigerSres.ValEntry
                                 f,
                               TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8),
                              w #)
                        TigerSres.Func ipv
                        -> (# (TigerSeman.$fManticoreExceptT12,
                               TigerSeman.Est ww3 ww4 ww5 ww6 ww7 ww8),
                              w #) } }) -}
d80ed768bbb890ad75b329ade873028c
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo
    -> [TigerTrans.Level]
    -> [GHC.Base.Maybe TigerTemp.Label]
    -> [TigerFrame.Frag]
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <S,U><L,1*U><L,1*U><L,U><L,U><L,U><L,U(U)>,
     Inline: [0] -}
95a239b3bc7b6ac9522fb535ad107aa0
  $w$sgo13 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
1e8bdffe4c7ca46f72c58b0b0a557989
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
4addac88c2f66d683de5a0c7ff220a62
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
d27f76c9f57da663560fb5afdb965c9e
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
ce824951037379e7a98bcc383196d83a
  $wouter3 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
a02a3dc9ef15626ab9998434a8fe27fe
  $wouter6 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
510a1bce76db0aae6dfa347ff7d9b5c4
  $wouter7 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
84086a40cd354966d8ae558a34f5197d
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
a2d5eed5c96289ad5f03a9f3e7278fd3
  $wpoly_go13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerSymbol.Symbol a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
be26c3897a353b309d8124b9ee23ee1b
  $wsplitWith ::
    (a -> Data.Either.Either b c) -> [a] -> (# [b], [c] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: a -> Data.Either.Either b c)
                   (w1 :: [a]) ->
                 letrec {
                   $wgo8 :: [a] -> (# [b], [c] #)
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (w2 :: [a]) ->
                     case w2 of wild {
                       [] -> (# GHC.Types.[] @ b, GHC.Types.[] @ c #)
                       : y ys
                       -> case w y of wild1 {
                            Data.Either.Left x28
                            -> case $wgo8 ys of ww { (#,#) ww1 ww2 ->
                               (# GHC.Types.: @ b x28 ww1, ww2 #) }
                            Data.Either.Right y1
                            -> case $wgo8 ys of ww { (#,#) ww1 ww2 ->
                               (# ww1, GHC.Types.: @ c y1 ww2 #) } } }
                 } in
                 $wgo8 w1) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  data Estado
    = Est {vEnv :: Data.Map.Internal.Map
                     TigerSymbol.Symbol TigerSres.EnvEntry,
           tEnv :: Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo,
           level :: [TigerTrans.Level],
           salida :: [GHC.Base.Maybe TigerTemp.Label],
           frag :: [TigerFrame.Frag],
           maxlvl :: GHC.Types.Int}
96f5ac221cc134f6621820b23d9d1e54
  class (TigerErrores.Demon w, GHC.Base.Monad w) =>
        Manticore (w :: * -> *) where
    insertValV :: TigerSymbol.Symbol
                  -> TigerSres.ValEntry -> w a -> w a
    insertFunV :: TigerSymbol.Symbol
                  -> TigerSres.FunEntry -> w a -> w a
    insertVRO :: TigerSymbol.Symbol
                 -> TigerFrame.Access -> GHC.Types.Int -> w a -> w a
    insertTipoT :: TigerSymbol.Symbol -> TigerTips.Tipo -> w a -> w a
    getTipoFunV :: TigerSymbol.Symbol -> w TigerSres.FunEntry
    getTipoValV :: TigerSymbol.Symbol -> w TigerSres.ValEntry
    getTipoT :: TigerSymbol.Symbol -> w TigerTips.Tipo
    showVEnv :: w a -> w a
    showVEnv' :: w ()
    showTEnv :: w a -> w a
    showTEnv' :: w ()
    tiposIguales :: TigerTips.Tipo
                    -> TigerTips.Tipo -> w GHC.Types.Bool
    ugen :: w TigerUnique.Unique
    {-# MINIMAL insertValV, insertFunV, insertVRO, insertTipoT,
                getTipoFunV, getTipoValV, getTipoT, showVEnv, showTEnv, ugen #-}
b34483b0b5dd7358af4c9fbcfb6afa61
  type Monada =
    Control.Monad.Trans.Except.ExceptT
      TigerSymbol.Symbol
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
    :: * -> *
e55489bfb7c37db7d30dc51e67e120b4
  addDer :: ([a], [b]) -> b -> ([a], [b])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (ds :: ([a], [b])) (b1 :: b) ->
                 case ds of wild { (,) as bs -> (as, GHC.Types.: @ b b1 bs) }) -}
f304c2e6e5df1db18a94df3eb3ac77f8
  addIzq :: ([a], [b]) -> a -> ([a], [b])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (ds :: ([a], [b])) (a1 :: a) ->
                 case ds of wild { (,) as bs -> (GHC.Types.: @ a a1 as, bs) }) -}
b7a453c815c4f999b34ee954ec4f5c32
  addpos ::
    (TigerErrores.Demon w, GHC.Show.Show b) => w a -> b -> w a
  {- Arity: 4,
     Strictness: <S(LC(C(S))LL),1*U(A,1*C1(C1(U)),A,A)><L,1*U(A,1*C1(U),A)><L,U><L,U>,
     Unfolding: (\ @ w :: * -> *
                   @ b
                   @ a
                   ($dDemon :: TigerErrores.Demon w)
                   ($dShow :: GHC.Show.Show b)
                   (t :: w a)
                   (p :: b) ->
                 TigerErrores.adder
                   @ w
                   $dDemon
                   @ a
                   t
                   (case GHC.Show.show @ b $dShow p of dt { DEFAULT ->
                    case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            TigerSeman.$wouter3 ipv1 4# dt 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    ipv1 } })) -}
6a93b0e480ccc00a294a72848b8a6cc9
  buscarM ::
    TigerSymbol.Symbol
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, GHC.Types.Int)]
    -> GHC.Base.Maybe (TigerTips.Tipo, GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U,U,U)><S,1*U> -}
3bb78a31ad5f32e5348eb8ad6f4a6398
  cmpZip ::
    (TigerErrores.Demon m, GHC.Base.Monad m) =>
    [(TigerSymbol.Symbol, TigerTips.Tipo)]
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, GHC.Types.Int)] -> m ()
  {- Arity: 4,
     Strictness: <L,U(C(U),C(C1(U)),A,A)><L,1*U(A,A,A,1*C1(U),A)><S,1*U><S,1*U> -}
42d7644a1bd1fc4fa456e9983e306bd6
  cmpZip_$scmpZip ::
    [(TigerSymbol.Symbol, TigerTips.Tipo)]
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, GHC.Types.Int)]
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         ()
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
14e263b74e6b1c77ec2b2d0255b256fa
  depend :: TigerAbs.Ty -> [TigerSymbol.Symbol]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: TigerAbs.Ty) ->
                 case ds of wild {
                   TigerAbs.NameTy s
                   -> GHC.Types.:
                        @ TigerSymbol.Symbol
                        s
                        (GHC.Types.[] @ TigerSymbol.Symbol)
                   TigerAbs.RecordTy ts -> TigerSeman.depend_go ts
                   TigerAbs.ArrayTy s
                   -> GHC.Types.:
                        @ TigerSymbol.Symbol
                        s
                        (GHC.Types.[] @ TigerSymbol.Symbol) }) -}
cf913f1a5984f14b31bf4b66dac15122
  depend_go ::
    [(TigerSymbol.Symbol, TigerAbs.Ty)] -> [TigerSymbol.Symbol]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
41b0d39b379ecff560b784b897378907
  errorTiposMsg ::
    (TigerErrores.Demon w, GHC.Show.Show p) =>
    p -> GHC.Base.String -> TigerTips.Tipo -> TigerTips.Tipo -> w a
  {- Arity: 6,
     Strictness: <S(LC(C(S))LL),U(1*C1(U),C(C1(U)),A,A)><L,1*U(A,1*C1(U),A)><L,U><L,1*U><L,1*U><L,1*U>,
     Unfolding: (\ @ w :: * -> *
                   @ p
                   @ a
                   ($dDemon :: TigerErrores.Demon w)
                   ($dShow :: GHC.Show.Show p)
                   (p1 :: p)
                   (msg :: GHC.Base.String)
                   (t1 :: TigerTips.Tipo)
                   (t2 :: TigerTips.Tipo) ->
                 TigerErrores.adder
                   @ w
                   $dDemon
                   @ a
                   (TigerErrores.adder
                      @ w
                      $dDemon
                      @ a
                      (TigerTips.errorTipos @ w @ a $dDemon t1 t2)
                      (case GHC.Magic.runRW#
                              @ ('GHC.Types.TupleRep
                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                              @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               TigerSeman.$wouter7
                                 ipv1
                                 4#
                                 msg
                                 0#
                                 ipv }) of ds1 { (#,#) ipv ipv1 ->
                       ipv1 }))
                   (case GHC.Show.show @ p $dShow p1 of dt { DEFAULT ->
                    case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            TigerSeman.$wouter6 ipv1 4# dt 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    ipv1 } })) -}
7f8074550e44ff7cc146c159cb9dc69c
  esInt :: TigerTips.Tipo -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerTips.Tipo) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   TigerTips.TInt ds1 -> GHC.Types.True }) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  frag :: TigerSeman.Estado -> [TigerFrame.Frag]
  RecSel Left TigerSeman.Estado
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.Estado) ->
                 case ds of wild { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
aaa68f51b2908c013b208c3980790362
  fromTy :: TigerSeman.Manticore w => TigerAbs.Ty -> w TigerTips.Tipo
  {- Arity: 2,
     Strictness: <S(LLLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ w :: * -> *
                   ($dManticore :: TigerSeman.Manticore w)
                   (ds :: TigerAbs.Ty) ->
                 case ds of wild {
                   DEFAULT -> TigerSeman.fromTy3 @ w
                   TigerAbs.NameTy s -> TigerSeman.getTipoT @ w $dManticore s }) -}
3c68635659f23c0781fcb1494c1981c0
  fromTy3 :: w TigerTips.Tipo
  {- Strictness: x -}
bc303d8532c1032534bd8350d0f143ff
  fst3 :: (a, b, c) -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b @ c (ds :: (a, b, c)) ->
                 case ds of wild { (,,) x28 ds1 ds2 -> x28 }) -}
e85da690128d6a3b26d1fe74801f9c41
  initConf :: TigerSeman.Estado
  {- Strictness: m,
     Unfolding: (TigerSeman.Est
                   TigerSeman.initConf7
                   TigerSeman.initConf3
                   TigerSeman.initConf2
                   (GHC.Types.[] @ (GHC.Base.Maybe TigerTemp.Label))
                   (GHC.Types.[] @ TigerFrame.Frag)
                   TigerSeman.initConf1) -}
3f127f51ade874c358c4a9942f58c522
  initConf1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
7e1f600bda862486c1e946859ae59a89
  initConf10 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf59
                   TigerSeman.initConf11) -}
57ee62e34ead1b894ed5045f433efdbf
  initConf11 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf54
                   TigerSeman.initConf12) -}
4453f731fd9461379c84320ef30d5ccd
  initConf12 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf49
                   TigerSeman.initConf13) -}
237803f3ac2990c09d8dfd3f20a6b199
  initConf13 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf44
                   TigerSeman.initConf14) -}
10a54ea51fe83c2d0623126158130f81
  initConf14 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf37
                   TigerSeman.initConf15) -}
28b0d5d6bc36e49fece194125701ca0e
  initConf15 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf30
                   TigerSeman.initConf16) -}
9cdbe2e24165fc37a0a62c4fdde31734
  initConf16 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf24
                   TigerSeman.initConf17) -}
30bcdccde6d70c47c5f44b697f00011e
  initConf17 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf18
                   (GHC.Types.[] @ (Data.Text.Internal.Text, TigerSres.EnvEntry))) -}
6bede1b958e2e94bbf8c7dc976c9e6ae
  initConf18 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf19)) -}
e02500f49fe95532367e798b21e9c28e
  initConf19 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf20) -}
56a0b8774a8561927d54390f7ee2d7ae
  initConf2 :: [TigerTrans.Level]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTrans.Level
                   TigerTrans.outermost
                   (GHC.Types.[] @ TigerTrans.Level)) -}
bbf6d266dc559994d12c20372d4659e6
  initConf20 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf22,
                  TigerSeman.initConf21, TigerTips.TUnit, TigerTrans.Runtime)) -}
ce26a907fa9ca6e7f34c79c772b9bc0d
  initConf21 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerSeman.initConf4
                   (GHC.Types.[] @ TigerTips.Tipo)) -}
8f951064416e6fe83e465740f8bacbda
  initConf22 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf23) -}
16898250ba5cac0313b0344196c08b6f
  initConf23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("exit"#) -}
cd5404796bb23ee6eca4742b4994e722
  initConf24 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf28, TigerSeman.initConf25)) -}
a4453c87e854e915d678cbf256156d8f
  initConf25 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf26) -}
54ca99f1bed943de5a2cbdadbddc1418
  initConf26 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf28,
                  TigerSeman.initConf27, TigerTips.$bTBool, TigerTrans.Runtime)) -}
ba3e893fc782792492a4df03ab2ad9d9
  initConf27 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.$bTBool
                   (GHC.Types.[] @ TigerTips.Tipo)) -}
5bca54705c3d2ed6c3a39cc87f7ad1c4
  initConf28 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf29) -}
15799e4854753c69a8aeece76904788a
  initConf29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not"#) -}
9b8ebf86ff32acfadaa8ee3daf9a977b
  initConf3 ::
    Data.Map.Internal.Map Data.Text.Internal.Text TigerTips.Tipo
  {- Unfolding: (case TigerSeman.initConf_kx0 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Text.Show.unpackCString#
                        TigerSeman.initConf5 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 TigerSeman.$w$sgo13
                   @ TigerTips.Tipo
                   ww
                   ww1
                   ww2
                   ww3
                   TigerSeman.initConf4
                   (Data.Map.Internal.Bin
                      @ Data.Text.Internal.Text
                      @ TigerTips.Tipo
                      1#
                      dt
                      TigerTips.TString
                      (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ TigerTips.Tipo)
                      (Data.Map.Internal.Tip
                         @ Data.Text.Internal.Text
                         @ TigerTips.Tipo)) } }) -}
d2459e40dad0f3530121ec6b7a2293e7
  initConf30 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf35, TigerSeman.initConf31)) -}
94115a85f5f3f41d65719291f1125529
  initConf31 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf32) -}
a539b154e3e5ac044c4b1e224112461d
  initConf32 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf35,
                  TigerSeman.initConf33, TigerTips.TString, TigerTrans.Runtime)) -}
99713e5e574209288f0872f80536a67a
  initConf33 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   TigerSeman.initConf34) -}
be84db75017f19ccbd537379b01a4c88
  initConf34 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   (GHC.Types.[] @ TigerTips.Tipo)) -}
2eddd624cf6548ace5baadbeecbebd95
  initConf35 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf36) -}
a5990554b475ee4a535b9387f6e117a5
  initConf36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("concat"#) -}
b67689e69eb118aef77ccc40cd7fdba3
  initConf37 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf42, TigerSeman.initConf38)) -}
bb3eb0df705a6f49a271f20d4836a511
  initConf38 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf39) -}
9048f8e4da2b8b9bf2de3002a12cd4bc
  initConf39 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf42,
                  TigerSeman.initConf40, TigerTips.TString, TigerTrans.Runtime)) -}
f36f88e9cc98bd9a6702616a5d509065
  initConf4 :: TigerTips.Tipo
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (TigerTips.TInt TigerTips.RW) -}
66be635b86c1433eb4eb319a9c880bec
  initConf40 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   TigerSeman.initConf41) -}
d678dc090cb7decb3b72ba5d101e5f4d
  initConf41 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerSeman.initConf4
                   TigerSeman.initConf21) -}
a32dc65d74643dd0f31adac4b8f1781c
  initConf42 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf43) -}
56377c51a7b497a1658feaaf98f624c3
  initConf43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("substring"#) -}
2a5c7fd29d078b9d64c8135ec3792c2a
  initConf44 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf47, TigerSeman.initConf45)) -}
824f64699b7a37ca2f14902485102669
  initConf45 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf46) -}
c5d59e2cced59024ddcea45ed602c0ad
  initConf46 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf47,
                  TigerSeman.initConf34, TigerSeman.initConf4,
                  TigerTrans.Runtime)) -}
66ce1c3502664b4b17436e06531d3b82
  initConf47 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf48) -}
02b44e17b700febbbe6e9ef8ed5bae21
  initConf48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("size"#) -}
b0f790feb419a78099665ffb5ae33652
  initConf49 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf52, TigerSeman.initConf50)) -}
d760c72b9cfc33fd9e712c52bf8e8bfa
  initConf5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("string"#) -}
ce791723cad6dbc13f8436a7b1de2a72
  initConf50 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf51) -}
ebf231d45f7b6e16a27ea2efb6fa06d3
  initConf51 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf52,
                  TigerSeman.initConf21, TigerTips.TString, TigerTrans.Runtime)) -}
d92ce96ba2c67a57a8282420ef7ffcef
  initConf52 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf53) -}
136cf4171bbec6c707057f8a2abb620a
  initConf53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("chr"#) -}
9c10faee4c42a73839b146f692728d5e
  initConf54 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf57, TigerSeman.initConf55)) -}
3a8258e229dbbcfe6fd0fc04577adc60
  initConf55 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf56) -}
dd13956b5bba72f3aa2af0bc425c71ef
  initConf56 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf57,
                  TigerSeman.initConf34, TigerSeman.initConf4,
                  TigerTrans.Runtime)) -}
70f3098aa3c3c6c212f6957c385ed2bd
  initConf57 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf58) -}
657f1b816a10dd0abe6718d765354c4a
  initConf58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ord"#) -}
08a47630d769e9a5eb36319a6c135504
  initConf59 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf62, TigerSeman.initConf60)) -}
49cfec9cb3edb63b1606ea5097950628
  initConf6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("int"#) -}
6df7ed18ee9833a1a4dddf1105f984fe
  initConf60 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf61) -}
5ee63b940c516d1d56da0fb86ed6875e
  initConf61 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf62,
                  GHC.Types.[] @ TigerTips.Tipo, TigerTips.TString,
                  TigerTrans.Runtime)) -}
f46680e1cbdb2b20dd6fd982ae0c661d
  initConf62 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf63) -}
94c5a6fd20ffdde01cc2e1a95c721e45
  initConf63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("getchar"#) -}
d12475e86111274306c7e54e020f847d
  initConf64 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf67, TigerSeman.initConf65)) -}
85fb8232798780375e0c6318b8712ced
  initConf65 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf66) -}
a17d9730404e97fd48bdc23e28bfa080
  initConf66 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf67,
                  GHC.Types.[] @ TigerTips.Tipo, TigerTips.TUnit,
                  TigerTrans.Runtime)) -}
624c8a5e38f83f412c330554d92279f0
  initConf67 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf68) -}
d43259690c4e438b2851011f3883956c
  initConf68 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("flush"#) -}
664049ae71067dcb0ef799e016881b15
  initConf69 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf72, TigerSeman.initConf70)) -}
75341b9baea12d6ad5beb93c49f7cc91
  initConf7 ::
    Data.Map.Internal.Map Data.Text.Internal.Text TigerSres.EnvEntry
  {- Unfolding: (TigerSeman.$sfromList
                   @ TigerSres.EnvEntry
                   TigerSeman.initConf8) -}
aec27a2f68d8933603b81116289a7c9c
  initConf70 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf71) -}
7b80e0b997612b5ccb8e687f0d7f84e4
  initConf71 ::
    (TigerTrans.Level, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, TigerTrans.Externa)
  {- Strictness: m,
     Unfolding: ((TigerTrans.outermost, TigerSeman.initConf72,
                  TigerSeman.initConf34, TigerTips.TUnit, TigerTrans.Runtime)) -}
314edee875f5cfc408684c1b92f2c971
  initConf72 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf73) -}
206f148edbcd1717e52f7ec925317900
  initConf73 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("print"#) -}
a17730667e54edf4c2ba0bcec94ce752
  initConf8 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf69
                   TigerSeman.initConf9) -}
61b0ce54f7d41ed1bdc8f80024e4424d
  initConf9 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf64
                   TigerSeman.initConf10) -}
34a978fdf7d360fe67487c9542554bce
  initConf_kx0 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf6) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  level :: TigerSeman.Estado -> [TigerTrans.Level]
  RecSel Left TigerSeman.Estado
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.Estado) ->
                 case ds of wild { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  maxlvl :: TigerSeman.Estado -> GHC.Types.Int
  RecSel Left TigerSeman.Estado
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.Estado) ->
                 case ds of wild { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
4c7a3cb2d08a901202cb44ef0ec33a22
  runMonada ::
    TigerSeman.Monada (TigerTrans.BExp, TigerTips.Tipo)
    -> TigerUnique.StGen
         (Data.Either.Either
            TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo))
  {- Arity: 1, Strictness: <L,1*C1(C(U(1*U(1*U,A),1*U)))>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.runMonada_f
                  `cast`
                (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                          <TigerSymbol.Symbol>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado (State.State GHC.Integer.Type.Integer)>_R
                          <(TigerTrans.BExp, TigerTips.Tipo)>_N)
                 ->_R <State.State
                         GHC.Integer.Type.Integer
                         (Data.Either.Either
                            TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo))>_R) -}
db9e5ee5887ec53e57051128e43c1afb
  runMonada_f ::
    Control.Monad.Trans.State.Lazy.StateT
      TigerSeman.Estado
      (State.State GHC.Integer.Type.Integer)
      (Data.Either.Either
         TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo))
    -> State.State
         GHC.Integer.Type.Integer
         (Data.Either.Either
            TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo))
  {- Arity: 1, Strictness: <L,1*C1(C(U(1*U(1*U,A),1*U)))>,
     Unfolding: (\ (y :: Control.Monad.Trans.State.Lazy.StateT
                           TigerSeman.Estado
                           (State.State GHC.Integer.Type.Integer)
                           (Data.Either.Either
                              TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo))) ->
                 let {
                   x28 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either
                               TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo),
                             TigerSeman.Estado)
                   = y `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <TigerSeman.Estado>_N
                          <State.State GHC.Integer.Type.Integer>_R
                          <Data.Either.Either
                             TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo)>_N)
                       TigerSeman.initConf
                 } in
                 (\ (s1 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds :: ((Data.Either.Either
                              TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo),
                            TigerSeman.Estado),
                           GHC.Integer.Type.Integer)
                    = x28
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either
                               TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo),
                             TigerSeman.Estado)>_R)
                        s1
                  } in
                  (case ds of wild { (,) x' s' ->
                   case x' of wild1 { (,) a1 ds1 -> a1 } },
                   case ds of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <Data.Either.Either
                              TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo)>_R))) -}
b293bd0f7120bf2a29094024203916b0
  runSeman ::
    TigerAbs.Exp
    -> TigerUnique.StGen
         (Data.Either.Either
            TigerSymbol.Symbol (TigerTrans.BExp, TigerTips.Tipo))
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x28 :: TigerAbs.Exp) ->
                 TigerSeman.runMonada_f
                   (TigerSeman.runSeman_$stransExp x28)
                     `cast`
                   (Control.Monad.Trans.Except.N:ExceptT[0]
                        <TigerSymbol.Symbol>_N
                        <Control.Monad.Trans.State.Lazy.StateT
                           TigerSeman.Estado (State.State GHC.Integer.Type.Integer)>_R
                        <(TigerTrans.BExp, TigerTips.Tipo)>_N)) -}
40e6a179ed360270e26422f5c883e245
  runSeman_$stransExp ::
    TigerAbs.Exp
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         (TigerTrans.BExp, TigerTips.Tipo)
  {- Arity: 1, Strictness: <S,1*U> -}
b34483b0b5dd7358af4c9fbcfb6afa61
  salida :: TigerSeman.Estado -> [GHC.Base.Maybe TigerTemp.Label]
  RecSel Left TigerSeman.Estado
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.Estado) ->
                 case ds of wild { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
4a2e6711ff48d008edf87f28441752c9
  snd3 :: (a, b, c) -> b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b @ c (ds :: (a, b, c)) ->
                 case ds of wild { (,,) ds1 y ds2 -> y }) -}
ee114f75279dcd9350ed71dba778b35c
  splitWith :: (a -> Data.Either.Either b c) -> [a] -> ([b], [c])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b @ c (w :: a -> Data.Either.Either b c) (w1 :: [a]) ->
                 case TigerSeman.$wsplitWith
                        @ a
                        @ b
                        @ c
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
b34483b0b5dd7358af4c9fbcfb6afa61
  tEnv ::
    TigerSeman.Estado
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo
  RecSel Left TigerSeman.Estado
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.Estado) ->
                 case ds of wild { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
d22fa7c4fbb69f7071f7bdce656b092a
  thd3 :: (a, b, c) -> c
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b @ c (ds :: (a, b, c)) ->
                 case ds of wild { (,,) ds1 ds2 z -> z }) -}
4a4960f0c9628e4d15a6ece81a0a3bec
  tiposComparables ::
    TigerTips.Tipo -> TigerTips.Tipo -> TigerAbs.Oper -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Unfolding: (\ (ds :: TigerTips.Tipo)
                   (ds1 :: TigerTips.Tipo)
                   (ds2 :: TigerAbs.Oper) ->
                 let {
                   fail :: GHC.Prim.Void# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                     case ds2 of wild {
                       DEFAULT
                       -> case ds of wild1 {
                            DEFAULT -> GHC.Types.True
                            TigerTips.TUnit
                            -> case wild of wild2 {
                                 DEFAULT -> GHC.Types.True TigerAbs.NeqOp -> GHC.Types.False }
                            TigerTips.TNil
                            -> case ds1 of wild2 {
                                 DEFAULT -> GHC.Types.True
                                 TigerTips.TNil
                                 -> case wild of wild3 {
                                      DEFAULT -> GHC.Types.True
                                      TigerAbs.NeqOp -> GHC.Types.False } } }
                       TigerAbs.EqOp -> GHC.Types.True }
                 } in
                 case ds of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   TigerTips.TUnit
                   -> case ds2 of wild1 {
                        DEFAULT -> fail GHC.Prim.void# TigerAbs.EqOp -> GHC.Types.False }
                   TigerTips.TNil
                   -> case ds1 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        TigerTips.TNil
                        -> case ds2 of wild2 {
                             DEFAULT -> fail GHC.Prim.void#
                             TigerAbs.EqOp -> GHC.Types.False } } }) -}
6bd473b9552de7904731deaff5409293
  transDecs ::
    (TigerTrans.MemM w, TigerSeman.Manticore w) =>
    [TigerAbs.Dec]
    -> w (TigerTrans.BExp, TigerTips.Tipo)
    -> w ([TigerTrans.BExp], TigerTips.Tipo)
  {- Arity: 4,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),U(U,U),U(C(U),C(C1(U)),C(U),A),U,A,A,C(U),U,U,A,A,U,C(U),C(U),C(U),A)><L,U(U(C(U),C(C1(U)),A,A),U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(C1(U)))),C(C1(C1(U))),C(U),C(U),C(U),A,A,A,A,C(C1(U)),U)><S,1*U><L,U> -}
a5b011244189ae7ecf55d911d8ab1d3b
  transDecs_$stransDecs ::
    [TigerAbs.Dec]
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         (TigerTrans.BExp, TigerTips.Tipo)
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         ([TigerTrans.BExp], TigerTips.Tipo)
  {- Arity: 2, Strictness: <S,1*U><L,C(C(U(1*U(1*U,U),U)))> -}
1b4b5f2c142a2f14a1eec27a2f1722de
  transExp ::
    (TigerTrans.MemM w, TigerSeman.Manticore w) =>
    TigerAbs.Exp -> w (TigerTrans.BExp, TigerTips.Tipo)
  {- Arity: 3,
     Strictness: <S,U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),U(U,U),U(C(U),C(C1(U)),C(U),A),U,A,A,C(U),U,U,A,A,U,C(U),C(U),C(U),A)><L,U(U(C(U),C(C1(U)),A,A),U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(C1(U)))),C(C1(C1(U))),C(U),C(U),C(U),A,A,A,A,C(C1(U)),U)><S,1*U> -}
85496a84a0c1b411169bc6d6fc59f0cc
  transTy ::
    TigerSeman.Manticore w => TigerAbs.Ty -> w TigerTips.Tipo
  {- Arity: 2,
     Strictness: <S,U(A,U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),A,A,A,A,A,A,C(U),A,A,A,A,A,U)><S,1*U> -}
63b500c829caf318a14d3d9e245cb499
  transTy1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
ab869d94d4bd7a28abc68d73ae993d0a
  transTy2 ::
    (TigerSymbol.Symbol, TigerTips.Tipo)
    -> (TigerSymbol.Symbol, TigerTips.Tipo) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)L),1*U(1*U(U,U,U),A)><S(S(SSS)L),1*U(1*U(U,U,U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x28 :: (TigerSymbol.Symbol, TigerTips.Tipo))
                   (y :: (TigerSymbol.Symbol, TigerTips.Tipo))[OneShot] ->
                 case x28 of wild { (,) x29 ds1 ->
                 case y of wild1 { (,) x30 ds2 ->
                 Data.Text.$fOrdText_$ccompare x29 x30 } }) -}
c74a7b49e74356094bd44831b2c7b874
  transTy_$stransTy ::
    TigerAbs.Ty
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         TigerTips.Tipo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta7 :: TigerAbs.Ty) ->
                 case eta7 of wild {
                   TigerAbs.NameTy s
                   -> (TigerSeman.$fManticoreExceptT7 s)
                        `cast`
                      ((<TigerSeman.Estado>_R
                        ->_R Sym (State.N:State[0]
                                      <GHC.Integer.Type.Integer>_R
                                      <(Data.Either.Either Data.Text.Internal.Text TigerTips.Tipo,
                                        TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                            <TigerSeman.Estado>_N
                                                                            <State.State
                                                                               GHC.Integer.Type.Integer>_R
                                                                            <Data.Either.Either
                                                                               Data.Text.Internal.Text
                                                                               TigerTips.Tipo>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                TigerSeman.Estado
                                                                                                                TigerUnique.StGen>_R
                                                                                                             <TigerTips.Tipo>_N)))
                   TigerAbs.RecordTy flds
                   -> let {
                        m2 :: Control.Monad.Trans.Except.ExceptT
                                Data.Text.Internal.Text
                                (Control.Monad.Trans.State.Lazy.StateT
                                   TigerSeman.Estado TigerUnique.StGen)
                                [(TigerSymbol.Symbol, TigerTips.Tipo)]
                        = TigerSeman.transTy_go flds
                      } in
                      (\ (s1 :: TigerSeman.Estado) ->
                       let {
                         x28 :: State.State
                                  GHC.Integer.Type.Integer
                                  (Data.Either.Either
                                     Data.Text.Internal.Text [(TigerSymbol.Symbol, TigerTips.Tipo)],
                                   TigerSeman.Estado)
                         = m2
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Data.Text.Internal.Text>_N
                                <Control.Monad.Trans.State.Lazy.StateT
                                   TigerSeman.Estado TigerUnique.StGen>_R
                                <[(TigerSymbol.Symbol,
                                   TigerTips.Tipo)]>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <TigerSeman.Estado>_N
                                                             <State.State
                                                                GHC.Integer.Type.Integer>_R
                                                             <Data.Either.Either
                                                                Data.Text.Internal.Text
                                                                [(TigerSymbol.Symbol,
                                                                  TigerTips.Tipo)]>_N)
                             s1
                       } in
                       (\ (s2 :: GHC.Integer.Type.Integer) ->
                        case x28
                               `cast`
                             (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either
                                      Data.Text.Internal.Text
                                      [(TigerSymbol.Symbol, TigerTips.Tipo)],
                                    TigerSeman.Estado)>_R)
                               s2 of wild1 { (,) x' s' ->
                        case x' of wild2 { (,) a1 s'1 ->
                        case a1 of wild3 {
                          Data.Either.Left e1
                          -> ((Data.Either.Left
                                 @ Data.Text.Internal.Text
                                 @ TigerTips.Tipo
                                 e1,
                               s'1),
                              s')
                          Data.Either.Right x29
                          -> let {
                               s :: GHC.Integer.Type.Integer
                               = GHC.Integer.Type.plusInteger
                                   s'
                                   TigerUnique.$fUniqueGeneratorState2
                             } in
                             ((Data.Either.Right
                                 @ Data.Text.Internal.Text
                                 @ TigerTips.Tipo
                                 (TigerTips.TRecord
                                    (TigerSeman.transTy_go2
                                       (Data.OldList.sortBy
                                          @ (TigerSymbol.Symbol, TigerTips.Tipo)
                                          TigerSeman.transTy2
                                          x29)
                                       TigerSeman.transTy1)
                                    s),
                               s'1),
                              s) } } })
                         `cast`
                       (Sym (State.N:State[0]
                                 <GHC.Integer.Type.Integer>_R
                                 <(Data.Either.Either Data.Text.Internal.Text TigerTips.Tipo,
                                   TigerSeman.Estado)>_R)))
                        `cast`
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <TigerSeman.Estado>_N
                                <State.State GHC.Integer.Type.Integer>_R
                                <Data.Either.Either
                                   Data.Text.Internal.Text
                                   TigerTips.Tipo>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                 <Data.Text.Internal.Text>_N
                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                    TigerSeman.Estado
                                                                    TigerUnique.StGen>_R
                                                                 <TigerTips.Tipo>_N))
                   TigerAbs.ArrayTy s
                   -> (\ (s1 :: TigerSeman.Estado)
                         (eta8 :: GHC.Integer.Type.Integer) ->
                       case s of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                       case s1 of ww4 { TigerSeman.Est ww5 ww6 ww7 ww8 ww9 ww10 ->
                       case TigerSeman.$w$cgetTipoT
                              ww1
                              ww2
                              ww3
                              ww5
                              ww6
                              ww7
                              ww8
                              ww9
                              ww10
                              eta8 of ww11 { (#,#) ww12 ww13 ->
                       case ww12 of wild1 { (,) a1 s' ->
                       case a1 of wild2 {
                         Data.Either.Left e1 -> (wild1, ww13)
                         Data.Either.Right x28
                         -> let {
                              s2 :: GHC.Integer.Type.Integer
                              = GHC.Integer.Type.plusInteger
                                  ww13
                                  TigerUnique.$fUniqueGeneratorState2
                            } in
                            ((Data.Either.Right
                                @ Data.Text.Internal.Text
                                @ TigerTips.Tipo
                                (TigerTips.TArray x28 s2),
                              s'),
                             s2) } } } } })
                        `cast`
                      ((<TigerSeman.Estado>_R
                        ->_R Sym (State.N:State[0]
                                      <GHC.Integer.Type.Integer>_R
                                      <(Data.Either.Either Data.Text.Internal.Text TigerTips.Tipo,
                                        TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                            <TigerSeman.Estado>_N
                                                                            <State.State
                                                                               GHC.Integer.Type.Integer>_R
                                                                            <Data.Either.Either
                                                                               Data.Text.Internal.Text
                                                                               TigerTips.Tipo>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                TigerSeman.Estado
                                                                                                                TigerUnique.StGen>_R
                                                                                                             <TigerTips.Tipo>_N))) }) -}
51c2d02bd4fd3920aac10bcda345d456
  transTy_go ::
    [(TigerSymbol.Symbol, TigerAbs.Ty)]
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         [(TigerSymbol.Symbol, TigerTips.Tipo)]
  {- Arity: 1, Strictness: <S,1*U> -}
edd84082f71ed079d0685697632e529c
  transTy_go2 ::
    [(TigerSymbol.Symbol, TigerTips.Tipo)]
    -> [GHC.Types.Int]
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, TigerTips.Posicion)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
b1d46e321bb64f8531940fd4d4110818
  transVar ::
    (TigerTrans.MemM w, TigerSeman.Manticore w) =>
    TigerAbs.Var -> w (TigerTrans.BExp, TigerTips.Tipo)
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLL),U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),U(U,U),U(C(U),C(C1(U)),C(U),A),U,A,A,C(U),U,U,A,A,U,C(U),C(U),C(U),A)><L,U(U(C(U),C(C1(U)),A,A),U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),C(C1(C1(U))),C(C1(C1(U))),C(C1(C1(C1(U)))),C(C1(C1(U))),C(U),C(U),C(U),A,A,A,A,C(C1(U)),U)><S,1*U> -}
cd597bfeba57dbb2cb3fec0a5e4a11cb
  transVar_$stransVar ::
    TigerAbs.Var
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         (TigerTrans.BExp, TigerTips.Tipo)
  {- Arity: 1, Strictness: <S,1*U> -}
b34483b0b5dd7358af4c9fbcfb6afa61
  vEnv ::
    TigerSeman.Estado
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerSres.EnvEntry
  RecSel Left TigerSeman.Estado
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.Estado) ->
                 case ds of wild { TigerSeman.Est ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
instance TigerErrores.Demon [Control.Monad.Trans.Except.ExceptT]
  = TigerSeman.$fDemonExceptT
instance TigerSeman.Manticore [Control.Monad.Trans.Except.ExceptT]
  = TigerSeman.$fManticoreExceptT
instance TigerTrans.MemM [Control.Monad.Trans.Except.ExceptT]
  = TigerSeman.$fMemMExceptT
instance GHC.Show.Show [TigerSeman.Estado]
  = TigerSeman.$fShowEstado
"SPEC cmpZip @ (ExceptT Symbol (StateT Estado StGen))" forall ($dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                               TigerSymbol.Symbol
                                                                               (Control.Monad.Trans.State.Lazy.StateT
                                                                                  TigerSeman.Estado
                                                                                  TigerUnique.StGen)))
                                                              ($dDemon :: TigerErrores.Demon
                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                               TigerSymbol.Symbol
                                                                               (Control.Monad.Trans.State.Lazy.StateT
                                                                                  TigerSeman.Estado
                                                                                  TigerUnique.StGen)))
  TigerSeman.cmpZip @ (Control.Monad.Trans.Except.ExceptT
                         TigerSymbol.Symbol
                         (Control.Monad.Trans.State.Lazy.StateT
                            TigerSeman.Estado TigerUnique.StGen))
                    $dDemon
                    $dMonad
  = TigerSeman.cmpZip_$scmpZip
"SPEC transDecs @ (ExceptT Symbol (StateT Estado StGen))" forall ($dManticore :: TigerSeman.Manticore
                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                      TigerSymbol.Symbol
                                                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                                                         TigerSeman.Estado
                                                                                         TigerUnique.StGen)))
                                                                 ($dMemM :: TigerTrans.MemM
                                                                              (Control.Monad.Trans.Except.ExceptT
                                                                                 TigerSymbol.Symbol
                                                                                 (Control.Monad.Trans.State.Lazy.StateT
                                                                                    TigerSeman.Estado
                                                                                    TigerUnique.StGen)))
  TigerSeman.transDecs @ (Control.Monad.Trans.Except.ExceptT
                            TigerSymbol.Symbol
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen))
                       $dMemM
                       $dManticore
  = TigerSeman.transDecs_$stransDecs
"SPEC transExp @ (ExceptT Symbol (StateT Estado StGen))" forall ($dManticore :: TigerSeman.Manticore
                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                     TigerSymbol.Symbol
                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                        TigerSeman.Estado
                                                                                        TigerUnique.StGen)))
                                                                ($dMemM :: TigerTrans.MemM
                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                TigerSymbol.Symbol
                                                                                (Control.Monad.Trans.State.Lazy.StateT
                                                                                   TigerSeman.Estado
                                                                                   TigerUnique.StGen)))
  TigerSeman.transExp @ (Control.Monad.Trans.Except.ExceptT
                           TigerSymbol.Symbol
                           (Control.Monad.Trans.State.Lazy.StateT
                              TigerSeman.Estado TigerUnique.StGen))
                      $dMemM
                      $dManticore
  = TigerSeman.runSeman_$stransExp
"SPEC transTy @ (ExceptT Symbol (StateT Estado StGen))" forall ($dManticore :: TigerSeman.Manticore
                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                    TigerSymbol.Symbol
                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                       TigerSeman.Estado
                                                                                       TigerUnique.StGen)))
  TigerSeman.transTy @ (Control.Monad.Trans.Except.ExceptT
                          TigerSymbol.Symbol
                          (Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen))
                     $dManticore
  = TigerSeman.transTy_$stransTy
"SPEC transVar @ (ExceptT Symbol (StateT Estado StGen))" forall ($dManticore :: TigerSeman.Manticore
                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                     TigerSymbol.Symbol
                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                        TigerSeman.Estado
                                                                                        TigerUnique.StGen)))
                                                                ($dMemM :: TigerTrans.MemM
                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                TigerSymbol.Symbol
                                                                                (Control.Monad.Trans.State.Lazy.StateT
                                                                                   TigerSeman.Estado
                                                                                   TigerUnique.StGen)))
  TigerSeman.transVar @ (Control.Monad.Trans.Except.ExceptT
                           TigerSymbol.Symbol
                           (Control.Monad.Trans.State.Lazy.StateT
                              TigerSeman.Estado TigerUnique.StGen))
                      $dMemM
                      $dManticore
  = TigerSeman.transVar_$stransVar
"SPEC/TigerSeman $fApplicativeExceptT @ (StateT Estado StGen) _" forall @ e
                                                                        (v1 :: GHC.Base.Monad
                                                                                 (Control.Monad.Trans.State.Lazy.StateT
                                                                                    TigerSeman.Estado
                                                                                    TigerUnique.StGen))
                                                                        (v :: GHC.Base.Functor
                                                                                (Control.Monad.Trans.State.Lazy.StateT
                                                                                   TigerSeman.Estado
                                                                                   TigerUnique.StGen))
  Control.Monad.Trans.Except.$fApplicativeExceptT @ (Control.Monad.Trans.State.Lazy.StateT
                                                       TigerSeman.Estado TigerUnique.StGen)
                                                  @ e
                                                  v
                                                  v1
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT @ e
"SPEC/TigerSeman $fApplicativeExceptT_$c*> @ (StateT Estado StGen) _" forall @ e
                                                                             ($dMonad :: GHC.Base.Monad
                                                                                           (Control.Monad.Trans.State.Lazy.StateT
                                                                                              TigerSeman.Estado
                                                                                              TigerUnique.StGen))
                                                                             ($dFunctor :: GHC.Base.Functor
                                                                                             (Control.Monad.Trans.State.Lazy.StateT
                                                                                                TigerSeman.Estado
                                                                                                TigerUnique.StGen))
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ (Control.Monad.Trans.State.Lazy.StateT
                                                            TigerSeman.Estado TigerUnique.StGen)
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT_$c*> @ e
"SPEC/TigerSeman $fApplicativeExceptT_$cpure @ (StateT
                                                 Estado StGen) _" forall @ e
                                                                                                                                ($dMonad :: GHC.Base.Monad
                                                                                                                                              (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                 TigerSeman.Estado
                                                                                                                                                 TigerUnique.StGen))
                                                                                                                                ($dFunctor :: GHC.Base.Functor
                                                                                                                                                (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                   TigerSeman.Estado
                                                                                                                                                   TigerUnique.StGen))
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ (Control.Monad.Trans.State.Lazy.StateT
                                                              TigerSeman.Estado TigerUnique.StGen)
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT_$cpure @ e
"SPEC/TigerSeman $fApplicativeStateT @ (State Integer) _" [orphan] forall @ s
                                                                          (v1 :: GHC.Base.Monad
                                                                                   (State.State
                                                                                      GHC.Integer.Type.Integer))
                                                                          (v :: GHC.Base.Functor
                                                                                  (State.State
                                                                                     GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ (State.State
                                                          GHC.Integer.Type.Integer)
                                                     @ s
                                                     v
                                                     v1
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT @ s
"SPEC/TigerSeman $fApplicativeStateT_$c*> @ (State Integer) _" [orphan] forall @ s
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             (State.State
                                                                                                GHC.Integer.Type.Integer))
                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                               (State.State
                                                                                                  GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*> @ (State.State
                                                               GHC.Integer.Type.Integer)
                                                          @ s
                                                          $dFunctor
                                                          $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$c*> @ s
"SPEC/TigerSeman $fApplicativeStateT_$c<*> @ (State Integer) _" [orphan] forall @ s
                                                                                ($dMonad :: GHC.Base.Monad
                                                                                              (State.State
                                                                                                 GHC.Integer.Type.Integer))
                                                                                ($dFunctor :: GHC.Base.Functor
                                                                                                (State.State
                                                                                                   GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ (State.State
                                                                GHC.Integer.Type.Integer)
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$c<*> @ s
"SPEC/TigerSeman $fApplicativeStateT_$cpure @ (State Integer) _" [orphan] forall @ s
                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                               (State.State
                                                                                                  GHC.Integer.Type.Integer))
                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                 (State.State
                                                                                                    GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ (State.State
                                                                 GHC.Integer.Type.Integer)
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$cpure @ s
"SPEC/TigerSeman $fFunctorExceptT @ (StateT Estado StGen) _" forall @ e
                                                                    (v :: GHC.Base.Functor
                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                               TigerSeman.Estado
                                                                               TigerUnique.StGen))
  Control.Monad.Trans.Except.$fFunctorExceptT @ (Control.Monad.Trans.State.Lazy.StateT
                                                   TigerSeman.Estado TigerUnique.StGen)
                                              @ e
                                              v
  = TigerSeman.$fManticoreExceptT_$s$fFunctorExceptT @ e
"SPEC/TigerSeman $fFunctorStateT @ (State Integer) _" [orphan] forall @ s
                                                                      (v :: GHC.Base.Functor
                                                                              (State.State
                                                                                 GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ (State.State
                                                      GHC.Integer.Type.Integer)
                                                 @ s
                                                 v
  = TigerSeman.$fManticoreExceptT_$s$fFunctorStateT @ s
"SPEC/TigerSeman $fMonadExceptT @ (StateT Estado StGen) _" forall @ e
                                                                  (v :: GHC.Base.Monad
                                                                          (Control.Monad.Trans.State.Lazy.StateT
                                                                             TigerSeman.Estado
                                                                             TigerUnique.StGen))
  Control.Monad.Trans.Except.$fMonadExceptT @ (Control.Monad.Trans.State.Lazy.StateT
                                                 TigerSeman.Estado TigerUnique.StGen)
                                            @ e
                                            v
  = TigerSeman.$fManticoreExceptT_$s$fMonadExceptT @ e
"SPEC/TigerSeman $fMonadExceptT_$c>> @ (StateT Estado StGen) _" forall @ e
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                        TigerSeman.Estado
                                                                                        TigerUnique.StGen))
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ (Control.Monad.Trans.State.Lazy.StateT
                                                      TigerSeman.Estado TigerUnique.StGen)
                                                 @ e
                                                 $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadExceptT_$c>> @ e
"SPEC/TigerSeman $fMonadExceptT_$c>>= @ (StateT Estado StGen) _" forall @ e
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                                                         TigerSeman.Estado
                                                                                         TigerUnique.StGen))
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ (Control.Monad.Trans.State.Lazy.StateT
                                                       TigerSeman.Estado TigerUnique.StGen)
                                                  @ e
                                                  $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadExceptT_$c>>= @ e
"SPEC/TigerSeman $fMonadStateT @ (State Integer) _" [orphan] forall @ s
                                                                    (v :: GHC.Base.Monad
                                                                            (State.State
                                                                               GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ (State.State
                                                    GHC.Integer.Type.Integer)
                                               @ s
                                               v
  = TigerSeman.$fManticoreExceptT_$s$fMonadStateT @ s
"SPEC/TigerSeman $fMonadStateT_$c>> @ (State Integer) _" [orphan] forall @ s
                                                                         ($dMonad :: GHC.Base.Monad
                                                                                       (State.State
                                                                                          GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ (State.State
                                                         GHC.Integer.Type.Integer)
                                                    @ s
                                                    $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$c>> @ s
"SPEC/TigerSeman $fMonadStateT_$c>>= @ (State Integer) _" [orphan] forall @ s
                                                                          ($dMonad :: GHC.Base.Monad
                                                                                        (State.State
                                                                                           GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ (State.State
                                                          GHC.Integer.Type.Integer)
                                                     @ s
                                                     $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$c>>= @ s
"SPEC/TigerSeman $fMonadStateT_$cfail @ (State Integer) _" [orphan] forall @ s
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         (State.State
                                                                                            GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ (State.State
                                                           GHC.Integer.Type.Integer)
                                                      @ s
                                                      $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$cfail @ s
"SPEC/TigerSeman $fTLGeneratort @ (StateT Estado) @ (State Integer)" forall (v2 :: GHC.Base.Monad
                                                                                     (State.State
                                                                                        GHC.Integer.Type.Integer))
                                                                            (v1 :: TigerTemp.TLGenerator
                                                                                     (State.State
                                                                                        GHC.Integer.Type.Integer))
                                                                            (v :: Control.Monad.Trans.Class.MonadTrans
                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                       TigerSeman.Estado))
  TigerTemp.$fTLGeneratort @ (Control.Monad.Trans.State.Lazy.StateT
                                TigerSeman.Estado)
                           @ (State.State GHC.Integer.Type.Integer)
                           v
                           v1
                           v2
  = TigerSeman.$fMemMExceptT_$s$fTLGeneratort
"SPEC/TigerSeman bool @ Bool _" [orphan] forall @ a
                                                ($dToBool :: Control.Conditional.ToBool
                                                               GHC.Types.Bool)
  Control.Conditional.bool @ GHC.Types.Bool @ a $dToBool
  = TigerSeman.$sbool @ a
"SPEC/TigerSeman fromList @ Text _" [orphan] forall @ a
                                                    ($dOrd :: GHC.Classes.Ord
                                                                Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = TigerSeman.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

