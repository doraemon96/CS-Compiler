
==================== FINAL INTERFACE ====================
2018-12-06 21:30:50.048242407 UTC

interface HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY:TigerInterp 8043
  interface hash: 93f98e253f962ecd0367af2080e73f9b
  ABI hash: 8989facfec03145b711d9af8f12b7800
  export-list hash: 0f2e59b5477e480e6a090a7594b2b8a2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e1108d0f98bfe75ed65c5c2d5fbd7154
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerInterp.!!
  TigerInterp.compare
  TigerInterp.compute
  TigerInterp.emptyCPU
  TigerInterp.extCall
  TigerInterp.extDispatcher
  TigerInterp.getDat
  TigerInterp.getFBody
  TigerInterp.getInt
  TigerInterp.getStr
  TigerInterp.iexp
  TigerInterp.loadCPU
  TigerInterp.loadLabCod
  TigerInterp.loadLabels
  TigerInterp.loadProcs
  TigerInterp.newDir
  TigerInterp.printCpu
  TigerInterp.printExec
  TigerInterp.runInitial
  TigerInterp.runPc
  TigerInterp.splitLbls
  TigerInterp.splitStms
  TigerInterp.step
  TigerInterp.uTemp
  TigerInterp.CPU{TigerInterp.CPU dat input mem output wat}
  TigerInterp.Dato{TigerInterp.DInt TigerInterp.FBody TigerInterp.Str}
  TigerInterp.RC
module dependencies: State TigerAbs TigerFrame TigerSymbol
                     TigerTemp TigerTree TigerUnique
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2 syb-0.7 text-1.2.3.0
                      transformers-0.5.5.0
orphans: syb-0.7:Data.Generics.Instances text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY:TigerUnique
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text
import  -/  TigerFrame fdacbd9fc565bed21944541486f245fd
  exports: 133bb83980b11d630d101a96995648a0
  Access 402c4e2384b2b19d70426842a571c2c2
  Frame 69d2335ca6f6c900a4407bb11f38dd8d
  exp 33ea2e00e86c77ee86f4f49f08e7b4b5
  fp 6f68cbff88ed60a8019edb43ebd0cb9a
  name 69d2335ca6f6c900a4407bb11f38dd8d
  prepFormals 7d4be43319af54408d5e7f9e9674b5fb
  rv 725c6162bff212ff493253c939adc8d6
  sp d1f7a96f6768a5c82994af07aa162e07
import  -/  TigerSymbol 8cdb62767ac36bcd684c9f1304d4a564
  exports: da94fd004c9146d1f25642212f80c685
  Symbol 8706b0bbdbf6daae41c5fa34f29c9575
import  -/  TigerTemp b510c1a4ba72be5a0edb2fb8160c4aa1
  exports: 6b85f77b0bcc6e133222675af91d5259
  Label e211b5893645bd99d551cf10a36d620b
  Temp cab6f44f49e691c5c9d3b8607bf3d44a
import  -/  TigerTree b3822817a90e7d3d52e7faf396d1e661
  exports: 18931e72ed30bbeb7fa4b14d3a1cec66
  BOp 72a0bc6a01e07235468810f158aaa011
  Binop faf7f6a18bfd79d3c0cf1b8ec84dd76b
  CJump f9c4df5a608857e7e3a13d599af02159
  Call d18418b45fa695bd19aa29089226d8fa
  Const 2e241003f48516223e109f35db44ed4c
  EQ 73bb27b3e21aba6b44b2415c60c1164a
  Eseq fb548d788ce5bd7d322c1af9217cb690
  Exp 41dcc78a73675959911b133e79d2016d
  ExpS 3a29f4e7809ae1794504de3052de2e2c
  Jump b42879698d8b5db14f9aa3942d21ed85
  Label bad5c830d864f66bf4d972a5316315a2
  Mem ba2eb85ba7f0ea842ee2e5275f01bfbc
  Move 6ad598cc8ddd68dab64e5fa3758cb7f0
  Name 8925b162f69e6bfb3c7671fa36d1392c
  Plus 6072c28bb785621a53aa6ba570d770fd
  Relop d7ae84726b81075ad61adabc8074f2f0
  Seq 41d9a8b50d3a4fca04c5c5c057d51c84
  Stm 41dcc78a73675959911b133e79d2016d
  Temp 49b0bf6180dfc16efae43b0023765e37
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Debug.Trace 7d99b5cfd8ae9f4b50938e4fedeaadef
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
442edc98c1be287cc42b08a4abb7ebb5
  (!!) ::
    (GHC.Classes.Ord k, GHC.Show.Show k, GHC.Show.Show v) =>
    Data.Map.Internal.Map k v -> k -> v
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,1*U(A,1*C1(U),A)><L,A><S,1*U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ k
                   @ v
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dShow :: GHC.Show.Show k)
                   ($dShow1 :: GHC.Show.Show v)
                   (m :: Data.Map.Internal.Map k v)
                   (k1 :: k) ->
                 case Data.Map.Internal.lookup @ k @ v $dOrd k1 m of wild {
                   GHC.Base.Nothing -> TigerInterp.!!5 @ k @ v $dShow k1
                   GHC.Base.Just x -> x }) -}
9b7b8f1b36ef3b48b9aea4e393639870
  !!5 :: GHC.Show.Show k => k -> v
  {- Arity: 2, Strictness: <B,1*U(A,1*C1(U),A)><B,U>x -}
14338cbd0a9c9afc2c9a21532382ff65
  $fShowCPU :: GHC.Show.Show TigerInterp.CPU
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerInterp.CPU
                  TigerInterp.$fShowCPU_$cshowsPrec
                  TigerInterp.$fShowCPU_$cshow
                  TigerInterp.$fShowCPU_$cshowList -}
14338cbd0a9c9afc2c9a21532382ff65
  $fShowCPU1 :: TigerInterp.CPU -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,U,U)>,
     Unfolding: (\ (w :: TigerInterp.CPU) ->
                 case w of ww { TigerInterp.CPU ww1 ww2 ww3 ww4 ww5 ->
                 TigerInterp.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 }) -}
c7c630e4fa4d279d745b7054ceb7fcfa
  $fShowCPU2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
14338cbd0a9c9afc2c9a21532382ff65
  $fShowCPU_$cshow :: TigerInterp.CPU -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerInterp.CPU) ->
                 TigerInterp.$fShowCPU_$cshowsPrec
                   TigerInterp.$fShowCPU2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
14338cbd0a9c9afc2c9a21532382ff65
  $fShowCPU_$cshowList :: [TigerInterp.CPU] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerInterp.CPU]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerInterp.CPU
                   TigerInterp.$fShowCPU1
                   ls
                   s) -}
14338cbd0a9c9afc2c9a21532382ff65
  $fShowCPU_$cshowsPrec ::
    GHC.Types.Int -> TigerInterp.CPU -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: TigerInterp.CPU) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TigerInterp.CPU ww3 ww4 ww5 ww6 ww7 ->
                 TigerInterp.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 } }) -}
83f973395170c3d536c0d0e70c335027
  $fShowDato :: GHC.Show.Show TigerInterp.Dato
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerInterp.Dato
                  TigerInterp.$fShowDato_$cshowsPrec
                  TigerInterp.$fShowDato_$cshow
                  TigerInterp.$fShowDato_$cshowList -}
83f973395170c3d536c0d0e70c335027
  $fShowDato1 :: TigerInterp.Dato -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: TigerInterp.Dato) (w1 :: GHC.Base.String) ->
                 TigerInterp.$w$cshowsPrec1 0# w w1) -}
31820bff1054acfa8bc353f9b5d0e90d
  $fShowDato2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DInt "#) -}
5ca5dbfcf2b3c6117e5ee5485bc3933c
  $fShowDato3 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bef840774ce44cdb8dea4e1feafe0fc0
  $fShowDato4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FBody "#) -}
3f7eda2ad12aae8b617ed42ee382bc9f
  $fShowDato5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Str "#) -}
83f973395170c3d536c0d0e70c335027
  $fShowDato_$cshow :: TigerInterp.Dato -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: TigerInterp.Dato) ->
                 case x of wild {
                   TigerInterp.Str b1
                   -> GHC.CString.unpackAppendCString#
                        TigerInterp.$fShowDato5
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   TigerInterp.FBody b1
                   -> GHC.CString.unpackAppendCString#
                        TigerInterp.$fShowDato4
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.Show.showList__
                              @ TigerFrame.Access
                              TigerFrame.$fShowAccess1
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__1
                                 (GHC.Show.$fShow(,)_$sgo1
                                    TigerInterp.$fShowDato3
                                    (TigerTree.$fShowStm_$cshowList ww2)
                                    (GHC.Types.[] @ GHC.Show.ShowS)))) })
                   TigerInterp.DInt b1
                   -> GHC.CString.unpackAppendCString#
                        TigerInterp.$fShowDato2
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }) -}
83f973395170c3d536c0d0e70c335027
  $fShowDato_$cshowList :: [TigerInterp.Dato] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerInterp.Dato]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerInterp.Dato
                   TigerInterp.$fShowDato1
                   ls
                   s) -}
83f973395170c3d536c0d0e70c335027
  $fShowDato_$cshowsPrec ::
    GHC.Types.Int -> TigerInterp.Dato -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerInterp.Dato)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerInterp.$w$cshowsPrec1 ww1 w1 w2 }) -}
b1b9b5784671f6b00a881d48c406b4a5
  $sinsert_$sgo13 ::
    TigerTemp.Temp
    -> TigerTemp.Temp
    -> a1
    -> Data.Map.Internal.Map TigerTemp.Temp a1
    -> Data.Map.Internal.Map TigerTemp.Temp a1
  {- Arity: 4, Strictness: <L,U><S(SSS),1*U(U,U,U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a1
                   (w :: TigerTemp.Temp)
                   (w1 :: TigerTemp.Temp)
                   (w2 :: a1)
                   (w3 :: Data.Map.Internal.Map TigerTemp.Temp a1) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 TigerInterp.$w$sgo13 @ a1 w ww1 ww2 ww3 w2 w3 }) -}
c6d6727142f244b02a311182490345a0
  $tc'CPU :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7162283262566624587##
                   17013540512094156742##
                   TigerInterp.$trModule
                   TigerInterp.$tc'CPU2
                   0#
                   TigerInterp.$tc'CPU1) -}
ba1a6979cb2e34c8e899fa29417983a4
  $tc'CPU1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
07edbcafa5d9569e39f9f7cca9a8b57b
  $tc'CPU2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerInterp.$tc'CPU3) -}
f81ed1800afc22df45ebf8799792a162
  $tc'CPU3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CPU"#) -}
4d956aa97a6355110ed2c742d975bc7c
  $tc'DInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15406612524591860719##
                   13273388905014812604##
                   TigerInterp.$trModule
                   TigerInterp.$tc'DInt2
                   0#
                   TigerInterp.$tc'DInt1) -}
be8a90115366820fb3c4a4a6d4bf2613
  $tc'DInt1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fd77c3c8076013cdcc9a787b44cb2bd4
  $tc'DInt2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerInterp.$tc'DInt3) -}
e5c46da4959326e8f32d5b5c9b090410
  $tc'DInt3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DInt"#) -}
610ba0ec46f6b88926a76b597e78d3fd
  $tc'FBody :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7125826575836809797##
                   2453488094791153233##
                   TigerInterp.$trModule
                   TigerInterp.$tc'FBody2
                   0#
                   TigerInterp.$tc'FBody1) -}
b79a9fe0b2a467ed2f8e067305c6d370
  $tc'FBody1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4500ae789168cd47d46a03f42fda246f
  $tc'FBody2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerInterp.$tc'FBody3) -}
37159baed03dd6a9fdc65d6e91232482
  $tc'FBody3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FBody"#) -}
65a04a8ae5f74c48a60ac797ee0e4da4
  $tc'Str :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11105533370232939952##
                   12597253243529885686##
                   TigerInterp.$trModule
                   TigerInterp.$tc'Str2
                   0#
                   TigerInterp.$tc'Str1) -}
23bdd8d708af31db0ead1cba0a96d9bf
  $tc'Str1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
78d2ae4c5265c778d90f55461d7d380b
  $tc'Str2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerInterp.$tc'Str3) -}
703140e652521989c1405cdac2f45521
  $tc'Str3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Str"#) -}
5809b8448b7759263ce98dbb11d892a8
  $tcCPU :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4787173323446627872##
                   3037879517546693077##
                   TigerInterp.$trModule
                   TigerInterp.$tcCPU1
                   0#
                   GHC.Types.krep$*) -}
f075a6a78e7651de02805ba158144ec5
  $tcCPU1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerInterp.$tcCPU2) -}
c59f269bd8eaa4ee58f2fc6e56da8817
  $tcCPU2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CPU"#) -}
c9d51275d5cceae784d4e93d9f77d964
  $tcDato :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4688112542842518463##
                   17312126197396129819##
                   TigerInterp.$trModule
                   TigerInterp.$tcDato1
                   0#
                   GHC.Types.krep$*) -}
c6736a4a4ef926b6e4cdda3b31b9efd8
  $tcDato1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerInterp.$tcDato2) -}
5871569c62d8c1e5038faeb042357efd
  $tcDato2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dato"#) -}
a8cb48fe32518075a31adf0fb76ea828
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerInterp.$trModule3
                   TigerInterp.$trModule1) -}
d9bb6c0ea0e53fa6479380b0a0ee4289
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerInterp.$trModule2) -}
ad8cef96fe41c2a0809752b85f884ddf
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TigerInterp"#) -}
4f34efca362a9c8ff45f40fc683cb77a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerInterp.$trModule4) -}
7f5277956781cac5cf800b7565f1ab55
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY"#) -}
6f475b3674e12c86237de7c9cc4654d3
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerTemp.Temp GHC.Types.Int
    -> Data.Map.Internal.Map GHC.Types.Int TigerInterp.Dato
    -> Data.Map.Internal.Map TigerTemp.Label GHC.Types.Int
    -> [TigerSymbol.Symbol]
    -> [TigerSymbol.Symbol]
    -> GHC.Show.ShowS
  {- Arity: 6, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U><L,U>,
     Inline: [0] -}
83f973395170c3d536c0d0e70c335027
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> TigerInterp.Dato -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
e5afecc5371563f0b086a7580226e159
  $w$sgo1 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
5cf73f5d7b94eab171ee5f77642bec51
  $w$sgo13 ::
    TigerTemp.Temp
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map TigerTemp.Temp a1
    -> Data.Map.Internal.Map TigerTemp.Temp a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
e8af5b7ca894bfccbc38985c2acc5a4a
  $wextDispatcher ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> TigerInterp.RC GHC.Types.Int
  {- Arity: 4, Strictness: <S,U><S,U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: [GHC.Types.Int]) ->
                 case TigerInterp.extDispatcher2 of wild1 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Prim.==# ww2 dt5 of lwild {
                   DEFAULT -> TigerInterp.extDispatcher1
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> TigerInterp.extDispatcher1
                        0#
                        -> case w of wild2 {
                             [] -> TigerInterp.extDispatcher1
                             : x ds -> TigerInterp.printExec x } } } } }) -}
2f912c9c675c4811afd16e7152b45acd
  $wgetDat ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int TigerInterp.Dato
    -> Data.Map.Internal.Map TigerTemp.Label GHC.Types.Int
    -> TigerInterp.Dato
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Data.Map.Internal.Map GHC.Types.Int TigerInterp.Dato)
                   (ww4 :: Data.Map.Internal.Map TigerTemp.Label GHC.Types.Int) ->
                 case TigerInterp.$wpoly_go1
                        @ GHC.Types.Int
                        ww
                        ww1
                        ww2
                        ww4 of wild {
                   GHC.Base.Nothing
                   -> case TigerInterp.!!5
                             @ TigerTemp.Label
                             @ GHC.Types.Int
                             Data.Text.Show.$fShowText
                             (Data.Text.Internal.Text ww ww1 ww2)
                      ret_ty TigerInterp.Dato
                      of {}
                   GHC.Base.Just x
                   -> case x of ww5 { GHC.Types.I# ww6 ->
                      case TigerInterp.$wpoly_go13 @ TigerInterp.Dato ww6 ww3 of wild1 {
                        GHC.Base.Nothing -> TigerInterp.getDat1 ww6
                        GHC.Base.Just x1 -> x1 } } }) -}
f8c6a006285efdf3060ecfdab812cf82
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
960a5d1e0ad0792eb43e03e2c7b9cf15
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerTemp.Temp a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
8b0a5fee6b49a4bd934ce713acf11d7a
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
87900f32da6fc86f81e1a7277728f70a
  $wpoly_go2 ::
    GHC.Prim.Int# -> Data.Map.Internal.Map GHC.Types.Int a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
798c80931d0e84f8dd3297ba7d0e2ad5
  $wpoly_go3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerTemp.Temp a
    -> a
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,1*U>, Inline: [0] -}
7b8531f586803da28824cdc8a33a0db8
  $wshowl ::
    [Data.Text.Internal.Text] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
5cb01e8d9bef9f25f86b86fb2ff038da
  $wsplitLbls ::
    [TigerTree.Stm]
    -> (TigerTemp.Label, [TigerTree.Stm])
    -> (# (TigerTemp.Label, [TigerTree.Stm]),
          [(TigerTemp.Label, [TigerTree.Stm])] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(1*U,U)>,
     Inline: [0] -}
d95540fdc7f847133427d5577272a462
  $wsplitStms ::
    [TigerTree.Stm]
    -> (# [TigerTree.Stm], [(TigerTemp.Label, [TigerTree.Stm])] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
14338cbd0a9c9afc2c9a21532382ff65
  data CPU
    = CPU {mem :: Data.Map.Internal.Map TigerTemp.Temp GHC.Types.Int,
           wat :: Data.Map.Internal.Map GHC.Types.Int TigerInterp.Dato,
           dat :: Data.Map.Internal.Map TigerTemp.Label GHC.Types.Int,
           output :: [TigerSymbol.Symbol],
           input :: [TigerSymbol.Symbol]}
83f973395170c3d536c0d0e70c335027
  data Dato
    = Str TigerSymbol.Symbol
    | FBody ([TigerFrame.Access], [TigerTree.Stm])
    | DInt GHC.Types.Int
adfaf8f9763e4e9001f1cdbf243ef199
  type RC =
    Control.Monad.Trans.State.Lazy.State TigerInterp.CPU :: * -> *
9e31eefa64f617c8f33fffa613e2e3a7
  compare ::
    TigerTree.Relop -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,1*U><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: TigerTree.Relop)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int) ->
                 case ds of wild {
                   DEFAULT -> case TigerInterp.compare1 ret_ty GHC.Types.Bool of {}
                   TigerTree.EQ -> GHC.Classes.eqInt eta eta1 }) -}
869ffdeee568b21f679c9b91ec24b492
  compare1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Strictness: x -}
258ab89276f546cb3a1a53931f4b4d86
  compute ::
    TigerTree.BOp -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 3, Strictness: <S,1*U><S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: TigerTree.BOp)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int) ->
                 case ds of wild {
                   DEFAULT -> case TigerInterp.compute1 ret_ty GHC.Types.Int of {}
                   TigerTree.Plus -> GHC.Num.$fNumInt_$c+ eta eta1 }) -}
c995e6d450a4db65f7fe12791f72f8bc
  compute1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Strictness: x -}
14338cbd0a9c9afc2c9a21532382ff65
  dat ::
    TigerInterp.CPU
    -> Data.Map.Internal.Map TigerTemp.Label GHC.Types.Int
  RecSel Left TigerInterp.CPU
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerInterp.CPU) ->
                 case ds of wild { TigerInterp.CPU ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
9b3785d2fa1e6efc7211bc453d5619ae
  emptyCPU :: TigerInterp.CPU
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (TigerInterp.CPU
                   (Data.Map.Internal.Tip @ TigerTemp.Temp @ GHC.Types.Int)
                   (Data.Map.Internal.Tip @ GHC.Types.Int @ TigerInterp.Dato)
                   (Data.Map.Internal.Tip @ TigerTemp.Label @ GHC.Types.Int)
                   (GHC.Types.[] @ TigerSymbol.Symbol)
                   (GHC.Types.[] @ TigerSymbol.Symbol)) -}
b3bb8763ce8b1ce87d5fdc9e6bd2e4a8
  extCall :: TigerTemp.Label -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U(U,U,U)>,
     Unfolding: (\ (l :: TigerTemp.Label) ->
                 let {
                   c :: GHC.Base.String -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newByteArray#
                                    @ GHC.Prim.RealWorld
                                    10#
                                    s1 of ds1 { (#,#) ipv ipv1 ->
                             TigerInterp.$wouter ipv1 4# x 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                     case ipv1 of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     case l of wild1 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                     case GHC.Prim.==# dt2 dt5 of lwild {
                       DEFAULT -> GHC.Types.False
                       1#
                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.ByteArray#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               GHC.Prim.Int# #)}
                                 dt
                                 (GHC.Prim.int2Word# dt1)
                                 dt3
                                 (GHC.Prim.int2Word# dt4)
                                 (GHC.Prim.int2Word# dt2)
                                 GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                          case GHC.Prim.narrow32Int# ds3 of wild2 {
                            DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } }
                 } in
                 case c TigerInterp.extCall5 of wild {
                   GHC.Types.False
                   -> case c TigerInterp.extCall3 of wild1 {
                        GHC.Types.False -> c TigerInterp.extCall1
                        GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True -> GHC.Types.True }) -}
1712b34a0eff65846d3fda2e094b5126
  extCall1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerInterp.extCall2) -}
148a39e967a0701906365bdfedb26b77
  extCall2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("getchar"#) -}
7f1c45bafcb6d5c93c99f46612aab373
  extCall3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerInterp.extCall4) -}
c9efb13b85029ee647f47e2fc971889d
  extCall4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("flush"#) -}
2ae1df49250ac44de934b1d40adafb57
  extCall5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerInterp.extCall6) -}
c3c3d2a8dc3259cec0b2bba5fb7f6df7
  extCall6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("print"#) -}
087de11709fbb4e3c1137a53c097ccc4
  extDispatcher ::
    TigerTemp.Label -> [GHC.Types.Int] -> TigerInterp.RC GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSS),1*U(U,U,U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: TigerTemp.Label) (w1 :: [GHC.Types.Int]) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 TigerInterp.$wextDispatcher ww1 ww2 ww3 w1 }) -}
f96891f30efab363992c55f24d32556b
  extDispatcher1 :: TigerInterp.RC GHC.Types.Int
  {- Strictness: x -}
2c67d67ac20d075b736df3e8885145f2
  extDispatcher2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerInterp.extCall6) -}
0a1061cb5837103b51edde3173625db1
  getDat :: TigerTemp.Label -> TigerInterp.CPU -> TigerInterp.Dato
  {- Arity: 2,
     Strictness: <S(SSS),1*U(U,U,U)><S(LSSLL),1*U(A,1*U,1*U,A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: TigerTemp.Label) (w1 :: TigerInterp.CPU) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerInterp.CPU ww5 ww6 ww7 ww8 ww9 ->
                 TigerInterp.$wgetDat ww1 ww2 ww3 ww6 ww7 } }) -}
65ec1b0f4b86658e5ebf0113fad74e83
  getDat1 :: GHC.Prim.Int# -> TigerInterp.Dato
  {- Arity: 1, Strictness: <B,U>x -}
cce25a4494d38d0a5089e45ca8021ee1
  getFBody ::
    TigerInterp.Dato -> ([TigerFrame.Access], [TigerTree.Stm])
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerInterp.Dato) ->
                 case ds of wild {
                   DEFAULT -> TigerInterp.getFBody1 TigerInterp.FBody sts -> sts }) -}
135fffc1b56edd9fb1b1472398d50610
  getFBody1 :: ([TigerFrame.Access], [TigerTree.Stm])
  {- Strictness: x -}
2d2f6c9072d97b4cdea992c5d446a6e3
  getInt :: TigerInterp.Dato -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerInterp.Dato) ->
                 case ds of wild {
                   DEFAULT -> TigerInterp.getInt1 TigerInterp.DInt i -> i }) -}
4b9f2eb87541ba347c42a7f0353c4f4b
  getInt1 :: GHC.Types.Int
  {- Strictness: x -}
697bfbcb6ad8c62315059a1b4c8c4ff9
  getStr :: TigerInterp.Dato -> TigerSymbol.Symbol
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerInterp.Dato) ->
                 case ds of wild {
                   DEFAULT -> TigerInterp.printExec1 TigerInterp.Str s -> s }) -}
0bf01a778c74a7c8480c1a304430164a
  iexp :: TigerTree.Exp -> TigerInterp.RC GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
14338cbd0a9c9afc2c9a21532382ff65
  input :: TigerInterp.CPU -> [TigerSymbol.Symbol]
  RecSel Left TigerInterp.CPU
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerInterp.CPU) ->
                 case ds of wild { TigerInterp.CPU ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
e5788e535e8b4847e4a267f85cfe5317
  loadCPU ::
    [(TigerFrame.Frame, [TigerTree.Stm])]
    -> [(TigerTemp.Label, TigerSymbol.Symbol)]
    -> [TigerTree.Stm]
    -> TigerInterp.CPU
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,1*U>,
     Unfolding: (\ (fs :: [(TigerFrame.Frame, [TigerTree.Stm])])
                   (ss :: [(TigerTemp.Label, TigerSymbol.Symbol)])
                   (tmain :: [TigerTree.Stm]) ->
                 case TigerInterp.$wsplitStms tmain of ww { (#,#) ww1 ww2 ->
                 let {
                   cpuInit :: TigerInterp.CPU
                   = case ((TigerInterp.loadProcs
                              fs
                              (TigerInterp.loadLabels
                                 ss
                                 (TigerInterp.loadLabCod
                                    ww2
                                    TigerInterp.loadCPU1
                                      `cast`
                                    ((<GHC.Types.Int>_R
                                      ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                    <(TigerInterp.CPU,
                                                      GHC.Types.Int)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <GHC.Types.Int>_N
                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                     <TigerInterp.CPU>_N)))))
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <GHC.Types.Int>_N
                                <Data.Functor.Identity.Identity>_R
                                <TigerInterp.CPU>_N)
                             TigerInterp.$fShowCPU2)
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(TigerInterp.CPU, GHC.Types.Int)>_R) of wild { (,) cpuInit' me ->
                     case cpuInit' of wild1 { TigerInterp.CPU ds ds1 ds2 ds3 ds4 ->
                     TigerInterp.CPU
                       (case TigerFrame.rv of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                        case TigerFrame.fp of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                        case TigerFrame.sp of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                        TigerInterp.$w$sgo13
                          @ GHC.Types.Int
                          ww3
                          ww4
                          ww5
                          ww6
                          me
                          (TigerInterp.$w$sgo13
                             @ GHC.Types.Int
                             ww7
                             ww8
                             ww9
                             ww10
                             me
                             (TigerInterp.$w$sgo13
                                @ GHC.Types.Int
                                ww11
                                ww12
                                ww13
                                ww14
                                me
                                ds)) } } })
                       ds1
                       ds2
                       ds3
                       ds4 } }
                 } in
                 case ww1 of wild {
                   []
                   -> case ww2 of wild1 {
                        [] -> case GHC.List.badHead ret_ty TigerInterp.CPU of {}
                        : x ds1
                        -> case x of wild2 { (,) ds2 y ->
                           case ((TigerInterp.runPc y)
                                   `cast`
                                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <TigerInterp.CPU>_N <Data.Functor.Identity.Identity>_R <()>_N)
                                   cpuInit)
                                  `cast`
                                (Data.Functor.Identity.N:Identity[0]
                                     <((), TigerInterp.CPU)>_R) of wild3 { (,) ds3 y1 ->
                           y1 } } }
                   : ds1 ds2
                   -> case ((TigerInterp.runPc wild)
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <TigerInterp.CPU>_N <Data.Functor.Identity.Identity>_R <()>_N)
                              cpuInit)
                             `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <((), TigerInterp.CPU)>_R) of wild1 { (,) ds4 y ->
                      y } } }) -}
947eeeae26fbf551cc9ef612367824fd
  loadCPU1 :: GHC.Types.Int -> (TigerInterp.CPU, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (eta1 :: GHC.Types.Int) -> (TigerInterp.emptyCPU, eta1)) -}
fe72451ad1d0f569c744ccceb4378bb9
  loadLabCod ::
    [(TigerTemp.Label, [TigerTree.Stm])]
    -> Control.Monad.Trans.State.Lazy.State
         GHC.Types.Int TigerInterp.CPU
    -> Control.Monad.Trans.State.Lazy.State
         GHC.Types.Int TigerInterp.CPU
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
ac3056095b2bfa40ab7314f912c33d42
  loadLabels ::
    [(TigerTemp.Label, TigerSymbol.Symbol)]
    -> Control.Monad.Trans.State.Lazy.State
         GHC.Types.Int TigerInterp.CPU
    -> Control.Monad.Trans.State.Lazy.State
         GHC.Types.Int TigerInterp.CPU
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
4f74c848a9fa96286b9a32a95dd2e40d
  loadProcs ::
    [(TigerFrame.Frame, [TigerTree.Stm])]
    -> Control.Monad.Trans.State.Lazy.State
         GHC.Types.Int TigerInterp.CPU
    -> Control.Monad.Trans.State.Lazy.State
         GHC.Types.Int TigerInterp.CPU
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
14338cbd0a9c9afc2c9a21532382ff65
  mem ::
    TigerInterp.CPU
    -> Data.Map.Internal.Map TigerTemp.Temp GHC.Types.Int
  RecSel Left TigerInterp.CPU
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerInterp.CPU) ->
                 case ds of wild { TigerInterp.CPU ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
d0b4ce54dba75bb9744800963ac44285
  newDir ::
    Control.Monad.Trans.State.Lazy.State GHC.Types.Int GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m,
     Unfolding: InlineRule (0, True, True)
                TigerInterp.newDir1
                  `cast`
                ((<GHC.Types.Int>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <(GHC.Types.Int,
                                  GHC.Types.Int)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                 <GHC.Types.Int>_N
                                                                 <Data.Functor.Identity.Identity>_R
                                                                 <GHC.Types.Int>_N)) -}
103ff5e45b85329793f9217584e084b9
  newDir1 :: GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: GHC.Types.Int) ->
                 (s1,
                  case s1 of wild { GHC.Types.I# x ->
                  GHC.Types.I# (GHC.Prim.+# x 1#) })) -}
14338cbd0a9c9afc2c9a21532382ff65
  output :: TigerInterp.CPU -> [TigerSymbol.Symbol]
  RecSel Left TigerInterp.CPU
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerInterp.CPU) ->
                 case ds of wild { TigerInterp.CPU ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
9dfb593df240f29d5a5296e2391b82f4
  printCpu :: TigerInterp.CPU -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,1*U,A)>,
     Unfolding: (\ (cpu :: TigerInterp.CPU) ->
                 GHC.CString.unpackAppendCString#
                   TigerInterp.printCpu6
                   (case TigerFrame.rv of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                    case cpu of wild { TigerInterp.CPU ds ds1 ds2 ds3 ds4 ->
                    case TigerInterp.$wpoly_go3
                           @ GHC.Types.Int
                           ww1
                           ww2
                           ww3
                           ds of ww4 { GHC.Types.I# ww5 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww5
                           (GHC.Types.[] @ GHC.Types.Char) of ww6 { (#,#) ww7 ww8 ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         TigerInterp.printCpu5
                         (case ds3 of wild1 {
                            [] -> TigerInterp.printCpu3
                            : x xs
                            -> GHC.Base.++_$s++
                                 @ GHC.Types.Char
                                 TigerInterp.printCpu1
                                 GHC.Show.showList__3
                                 (case Data.Text.Show.$w$cshowsPrec
                                         x
                                         (TigerInterp.printCpu_showl xs) of ww9 { (#,#) ww10 ww11 ->
                                  GHC.Types.: @ GHC.Types.Char ww10 ww11 }) }))
                      ww7
                      ww8 } } } })) -}
37408d678a6de89c3aa8182b8b884348
  printCpu1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerInterp.printCpu2) -}
b92aecab88a775b2628cfb60125ce95b
  printCpu2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \----------\n"#) -}
d586b20a9a31baf5a6908cc7e4d35769
  printCpu3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   TigerInterp.printCpu4
                   TigerInterp.printCpu1) -}
e249888e80887d239758a5cdef3f3a28
  printCpu4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4ae268b65972fc094d5b5833601ae840
  printCpu5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Output: "#) -}
7dcc4988adfe8a1cff4a66ce85213e8f
  printCpu6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("----------\n\
                 \RV : "#) -}
90a16ffe02ccb57d148dd8532e9840e5
  printCpu_showl :: [Data.Text.Internal.Text] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Data.Text.Internal.Text]) ->
                 case TigerInterp.$wshowl w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
4ce09b2c409516121d7f3ce340a551a1
  printExec :: GHC.Types.Int -> TigerInterp.RC GHC.Types.Int
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ (i :: GHC.Types.Int) ->
                 Debug.Trace.trace
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        TigerInterp.CPU Data.Functor.Identity.Identity GHC.Types.Int)
                   (GHC.CString.unpackAppendCString#
                      TigerInterp.printExec4
                      (case i of ww2 { GHC.Types.I# ww3 ->
                       case GHC.Show.$wshowSignedInt
                              0#
                              ww3
                              (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                       GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))
                   (\ (s1 :: TigerInterp.CPU) ->
                    (TigerInterp.printExec3,
                     case s1 of wild { TigerInterp.CPU ds ds1 ds2 ds3 ds4 ->
                     TigerInterp.CPU
                       ds
                       ds1
                       ds2
                       (GHC.Base.++
                          @ Data.Text.Internal.Text
                          ds3
                          (GHC.Types.:
                             @ Data.Text.Internal.Text
                             (case i of ww { GHC.Types.I# ww1 ->
                              case TigerInterp.$wpoly_go13 @ TigerInterp.Dato ww1 ds1 of wild1 {
                                GHC.Base.Nothing
                                -> case TigerInterp.printExec2 ww
                                   ret_ty Data.Text.Internal.Text
                                   of {}
                                GHC.Base.Just x
                                -> case x of wild2 {
                                     DEFAULT -> TigerInterp.printExec1 TigerInterp.Str s -> s } } })
                             (GHC.Types.[] @ Data.Text.Internal.Text)))
                       ds4 }))
                     `cast`
                   ((<TigerInterp.CPU>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <(GHC.Types.Int,
                                     TigerInterp.CPU)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                      <TigerInterp.CPU>_N
                                                                      <Data.Functor.Identity.Identity>_R
                                                                      <GHC.Types.Int>_N))) -}
b55cf6c836f29b5594fdedc55441c2ce
  printExec1 :: TigerSymbol.Symbol
  {- Strictness: x -}
c6b23d3a0ab91ab031b2cea974de5eff
  printExec2 :: GHC.Types.Int -> TigerInterp.Dato
  {- Arity: 1, Strictness: <B,U>x -}
83675e686c785dd2e67b3c85eb255042
  printExec3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
41123f0b8376da40026065821f15a343
  printExec4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Llamada a print con argumento: "#) -}
503d30550dc7c439b1c7096f0d16dd2a
  runInitial :: TigerInterp.CPU -> [TigerTree.Stm] -> TigerInterp.CPU
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (cpu :: TigerInterp.CPU) (prog :: [TigerTree.Stm]) ->
                 case ((TigerInterp.runPc prog)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <TigerInterp.CPU>_N <Data.Functor.Identity.Identity>_R <()>_N)
                         cpu)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <((), TigerInterp.CPU)>_R) of wild { (,) ds1 y ->
                 y }) -}
833e7660e1c7aeead04cddc025c042c7
  runPc :: [TigerTree.Stm] -> TigerInterp.RC ()
  {- Arity: 1, Strictness: <S,1*U> -}
66c692b477bbce7e6e0f1df853faa553
  splitLbls ::
    [TigerTree.Stm]
    -> (TigerTemp.Label, [TigerTree.Stm])
    -> [(TigerTemp.Label, [TigerTree.Stm])]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U,U)>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [TigerTree.Stm])
                   (w1 :: (TigerTemp.Label, [TigerTree.Stm])) ->
                 case TigerInterp.$wsplitLbls w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (TigerTemp.Label, [TigerTree.Stm]) ww1 ww2 }) -}
57597df3cba507792de6ad5a5ed23513
  splitStms ::
    [TigerTree.Stm]
    -> ([TigerTree.Stm], [(TigerTemp.Label, [TigerTree.Stm])])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [TigerTree.Stm]) ->
                 case TigerInterp.$wsplitStms w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
0d22217ee44b138adc83f25f00c30c38
  step :: TigerTree.Stm -> TigerInterp.RC [TigerTree.Stm]
  {- Arity: 1, Strictness: <S,1*U> -}
e6cc993eb7eb91714e0f777f0e8a43bc
  uTemp ::
    TigerTemp.Temp
    -> GHC.Types.Int -> TigerInterp.CPU -> TigerInterp.CPU
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><S,1*U(1*U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (t :: TigerTemp.Temp)
                   (i :: GHC.Types.Int)
                   (cpu :: TigerInterp.CPU) ->
                 case cpu of wild { TigerInterp.CPU ds ds1 ds2 ds3 ds4 ->
                 TigerInterp.CPU
                   (TigerInterp.$sinsert_$sgo13 @ GHC.Types.Int t t i ds)
                   ds1
                   ds2
                   ds3
                   ds4 }) -}
14338cbd0a9c9afc2c9a21532382ff65
  wat ::
    TigerInterp.CPU
    -> Data.Map.Internal.Map GHC.Types.Int TigerInterp.Dato
  RecSel Left TigerInterp.CPU
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerInterp.CPU) ->
                 case ds of wild { TigerInterp.CPU ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
instance GHC.Show.Show [TigerInterp.CPU] = TigerInterp.$fShowCPU
instance GHC.Show.Show [TigerInterp.Dato] = TigerInterp.$fShowDato
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

