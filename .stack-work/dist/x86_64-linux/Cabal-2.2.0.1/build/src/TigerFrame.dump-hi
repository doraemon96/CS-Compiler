
==================== FINAL INTERFACE ====================
2019-03-18 19:26:20.091646641 UTC

interface HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY:TigerFrame 8043
  interface hash: a06623e1920ec6e1843efc579b169c91
  ABI hash: b92d5f1cc4aa8a798b6eadecc5da9c65
  export-list hash: 133bb83980b11d630d101a96995648a0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 84a707957232ceed2ddebd5ca4ca265a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerFrame.allocArg
  TigerFrame.allocLocal
  TigerFrame.argsGap
  TigerFrame.argsInicial
  TigerFrame.auxexp
  TigerFrame.calldefs
  TigerFrame.defaultFrame
  TigerFrame.exp
  TigerFrame.externalCall
  TigerFrame.fp
  TigerFrame.fpPrev
  TigerFrame.fpPrevLev
  TigerFrame.localsGap
  TigerFrame.localsInicial
  TigerFrame.log2WSz
  TigerFrame.newFrame
  TigerFrame.prepFormals
  TigerFrame.regInicial
  TigerFrame.rv
  TigerFrame.sepFrag
  TigerFrame.sp
  TigerFrame.specialregs
  TigerFrame.wSz
  TigerFrame.Access{TigerFrame.InFrame TigerFrame.InReg}
  TigerFrame.Frag{TigerFrame.AString TigerFrame.Proc}
  TigerFrame.Frame{TigerFrame.Frame actualArg actualLocal actualReg formals locals name}
module dependencies: State TigerAbs TigerSymbol TigerTemp TigerTree
                     TigerUnique
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2 syb-0.7 text-1.2.3.0
                      transformers-0.5.5.0
orphans: HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY:TigerUnique
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text
import  -/  TigerAbs 1d186fe051144908f0c50c683d8be41b
  exports: 66e1533f82207906d70ea37c53c3d5c6
  Escapa 201d74a1bfba10a5215d7dd2cd11dba3
  Escapa c09003e06c2f0977e7facdcf1c6e85a6
  NoEscapa 66690b4920822a350152fb2706ac858c
import  -/  TigerSymbol 8cdb62767ac36bcd684c9f1304d4a564
  exports: da94fd004c9146d1f25642212f80c685
  Symbol 8706b0bbdbf6daae41c5fa34f29c9575
import  -/  TigerTemp 3bc4ed564aeabe58cf535512ec048d33
  exports: 6b85f77b0bcc6e133222675af91d5259
  Label e211b5893645bd99d551cf10a36d620b
  TLGenerator 0da889271ca392648fe70411a9dd5b23
  Temp cab6f44f49e691c5c9d3b8607bf3d44a
  newTemp 28e5981eb3c4f40cb3463ab7db349b5a
import  -/  TigerTree b3822817a90e7d3d52e7faf396d1e661
  exports: 18931e72ed30bbeb7fa4b14d3a1cec66
  Binop faf7f6a18bfd79d3c0cf1b8ec84dd76b
  Call d18418b45fa695bd19aa29089226d8fa
  Const 2e241003f48516223e109f35db44ed4c
  Exp 41dcc78a73675959911b133e79d2016d
  Mem ba2eb85ba7f0ea842ee2e5275f01bfbc
  Name 8925b162f69e6bfb3c7671fa36d1392c
  Plus 6072c28bb785621a53aa6ba570d770fd
  Stm 41dcc78a73675959911b133e79d2016d
  Temp 49b0bf6180dfc16efae43b0023765e37
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
402c4e2384b2b19d70426842a571c2c2
  $fShowAccess :: GHC.Show.Show TigerFrame.Access
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerFrame.Access
                  TigerFrame.$fShowAccess_$cshowsPrec
                  TigerFrame.$fShowAccess_$cshow
                  TigerFrame.$fShowAccess_$cshowList -}
402c4e2384b2b19d70426842a571c2c2
  $fShowAccess1 :: TigerFrame.Access -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: TigerFrame.Access) (w1 :: GHC.Base.String) ->
                 TigerFrame.$w$cshowsPrec 0# w w1) -}
7fc8469ea63247cdda03bc3e9a8ee28b
  $fShowAccess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InReg "#) -}
db65eb29854a9b6b0c45bc4bb452a49f
  $fShowAccess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InFrame "#) -}
402c4e2384b2b19d70426842a571c2c2
  $fShowAccess_$cshow :: TigerFrame.Access -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: TigerFrame.Access) ->
                 case x of wild {
                   TigerFrame.InFrame b1
                   -> GHC.CString.unpackAppendCString#
                        TigerFrame.$fShowAccess3
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   TigerFrame.InReg b1
                   -> GHC.CString.unpackAppendCString#
                        TigerFrame.$fShowAccess2
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 }) }) -}
402c4e2384b2b19d70426842a571c2c2
  $fShowAccess_$cshowList :: [TigerFrame.Access] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerFrame.Access]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerFrame.Access
                   TigerFrame.$fShowAccess1
                   ls
                   s) -}
402c4e2384b2b19d70426842a571c2c2
  $fShowAccess_$cshowsPrec ::
    GHC.Types.Int -> TigerFrame.Access -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerFrame.Access)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerFrame.$w$cshowsPrec ww1 w1 w2 }) -}
56100333360f19166abd501d364a04de
  $fShowFrag :: GHC.Show.Show TigerFrame.Frag
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerFrame.Frag
                  TigerFrame.$fShowFrag_$cshowsPrec
                  TigerFrame.$fShowFrag_$cshow
                  TigerFrame.$fShowFrag_$cshowList -}
56100333360f19166abd501d364a04de
  $fShowFrag1 ::
    TigerFrame.Frag -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: TigerFrame.Frag) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (TigerFrame.$fShowFrag_$cshow x))
                   s) -}
0ec4bb571c1255148c0c64e86364e305
  $fShowFrag2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (":\n"#) -}
980164431c79761a2e0c04dbc7c069da
  $fShowFrag3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n'#) -}
013624880a3c8bf04bd56fc1dd255edc
  $fShowFrag4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frame:"#) -}
56100333360f19166abd501d364a04de
  $fShowFrag_$cshow :: TigerFrame.Frag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: TigerFrame.Frag) ->
                 case ds of wild {
                   TigerFrame.Proc s f2
                   -> GHC.CString.unpackAppendCString#
                        TigerFrame.$fShowFrag4
                        (case f2 of ww { TigerFrame.Frame ww1 ww2 ww3 ww4 ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (TigerFrame.$w$cshowsPrec1
                              0#
                              ww1
                              ww2
                              ww3
                              ww4
                              ww5
                              ww6
                              (GHC.Types.[] @ GHC.Types.Char))
                           (GHC.Types.:
                              @ GHC.Types.Char
                              TigerFrame.$fShowFrag3
                              (TigerTree.$w$cshowsPrec3 0# s (GHC.Types.[] @ GHC.Types.Char))) })
                   TigerFrame.AString l ts
                   -> case Data.Text.Show.$w$cshow l of ww { (#,#) ww1 ww2 ->
                      GHC.Base.++_$s++
                        @ GHC.Types.Char
                        (GHC.CString.unpackAppendCString#
                           TigerFrame.$fShowFrag2
                           (TigerFrame.$fShowFrag_go ts))
                        ww1
                        ww2 } }) -}
56100333360f19166abd501d364a04de
  $fShowFrag_$cshowList :: [TigerFrame.Frag] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerFrame.Frag]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerFrame.Frag
                   TigerFrame.$fShowFrag1
                   ls
                   s) -}
56100333360f19166abd501d364a04de
  $fShowFrag_$cshowsPrec ::
    GHC.Types.Int -> TigerFrame.Frag -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: TigerFrame.Frag)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (TigerFrame.$fShowFrag_$cshow x))
                   s) -}
fcda6157e7117b521d2ef114c870b0a8
  $fShowFrag_go :: [Data.Text.Internal.Text] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
69d2335ca6f6c900a4407bb11f38dd8d
  $fShowFrame :: GHC.Show.Show TigerFrame.Frame
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerFrame.Frame
                  TigerFrame.$fShowFrame_$cshowsPrec
                  TigerFrame.$fShowFrame_$cshow
                  TigerFrame.$fShowFrame_$cshowList -}
69d2335ca6f6c900a4407bb11f38dd8d
  $fShowFrame1 :: TigerFrame.Frame -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U,U,U),1*U,1*U,1*U(U),1*U(U),1*U(U))><L,U>,
     Unfolding: (\ (w :: TigerFrame.Frame) (w1 :: GHC.Base.String) ->
                 case w of ww { TigerFrame.Frame ww1 ww2 ww3 ww4 ww5 ww6 ->
                 TigerFrame.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 ww5 ww6 w1 }) -}
69d2335ca6f6c900a4407bb11f38dd8d
  $fShowFrame_$cshow :: TigerFrame.Frame -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U),1*U,1*U,1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerFrame.Frame) ->
                 TigerFrame.$fShowFrame_$cshowsPrec
                   TigerFrame.localsInicial
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
69d2335ca6f6c900a4407bb11f38dd8d
  $fShowFrame_$cshowList :: [TigerFrame.Frame] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerFrame.Frame]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerFrame.Frame
                   TigerFrame.$fShowFrame1
                   ls
                   s) -}
69d2335ca6f6c900a4407bb11f38dd8d
  $fShowFrame_$cshowsPrec ::
    GHC.Types.Int -> TigerFrame.Frame -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U,1*U,1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerFrame.Frame)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TigerFrame.Frame ww3 ww4 ww5 ww6 ww7 ww8 ->
                 TigerFrame.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 ww7 ww8 w2 } }) -}
1cf10cf27e3dcc8d8f4de938e56599ee
  $tc'AString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2572867768421016245##
                   1464925581812584005##
                   TigerFrame.$trModule
                   TigerFrame.$tc'AString2
                   0#
                   TigerFrame.$tc'AString1) -}
45ca5cfb28c489d37a023ca009457bc9
  $tc'AString1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8a6b61c2b90c6f2acfb619cfc8dec63d
  $tc'AString2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'AString3) -}
30791ff1aea036dd4f5301947f414451
  $tc'AString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AString"#) -}
394dd6413917c05a3c0ddadd206fde81
  $tc'Frame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   782265747949109504##
                   5730881602267547756##
                   TigerFrame.$trModule
                   TigerFrame.$tc'Frame2
                   0#
                   TigerFrame.$tc'Frame1) -}
8b4fc88a2a7cfd415b4e487f2806f20d
  $tc'Frame1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c71a5273be2a9e0ff55942c98bb29f9a
  $tc'Frame2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'Frame3) -}
72b228208a47d40893a5f4ad7c75a47e
  $tc'Frame3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Frame"#) -}
83e86cd4e5e1503dde8fde84c662a3bf
  $tc'InFrame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13160906478630050622##
                   6319452098643660458##
                   TigerFrame.$trModule
                   TigerFrame.$tc'InFrame2
                   0#
                   TigerFrame.$tc'InFrame1) -}
358f52c5d7110679bdaa2b193a48c872
  $tc'InFrame1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6519a1c25464317dc504490e37a4f71b
  $tc'InFrame2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'InFrame3) -}
4117b77226c77f8311fdacf264eb5f2c
  $tc'InFrame3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InFrame"#) -}
b8e9bb5dfae1366157e4d011bcb61190
  $tc'InReg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6775646513856189467##
                   1876590791519584201##
                   TigerFrame.$trModule
                   TigerFrame.$tc'InReg2
                   0#
                   TigerFrame.$tc'InReg1) -}
1af93f9574b1e89be8e5fe690138cabe
  $tc'InReg1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2de2d466a4368c8c299f52febbcec02d
  $tc'InReg2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'InReg3) -}
fa1130ce7d56d78265c430c2b27c7844
  $tc'InReg3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InReg"#) -}
8079bc15e8513e37a0b8e627033a725b
  $tc'Proc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17824227325419083577##
                   15857701478185210708##
                   TigerFrame.$trModule
                   TigerFrame.$tc'Proc2
                   0#
                   TigerFrame.$tc'Proc1) -}
b8fcbc5c0942fa7b07daadcca434b54f
  $tc'Proc1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb82841cbe65eb9bbe7bfd2eb244df04
  $tc'Proc2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'Proc3) -}
4702c1877ec8c2ad87d9eb5031184b43
  $tc'Proc3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Proc"#) -}
f1a4219cb87970486d0c492832afa68d
  $tcAccess :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4764655631308040644##
                   14729409842777617542##
                   TigerFrame.$trModule
                   TigerFrame.$tcAccess1
                   0#
                   GHC.Types.krep$*) -}
e88dbfee0d858ed9be692a9218c3c0f3
  $tcAccess1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tcAccess2) -}
d954f586315bbbb09f6a7bbb6f171d1e
  $tcAccess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Access"#) -}
f7983d340f01037edd0c2203639b1426
  $tcFrag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18236856607119297204##
                   785414963009180234##
                   TigerFrame.$trModule
                   TigerFrame.$tcFrag1
                   0#
                   GHC.Types.krep$*) -}
18dae92547f2b2f62b55813e27670506
  $tcFrag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tcFrag2) -}
649acc535e0ee3b769e88913deb4c607
  $tcFrag2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frag"#) -}
290c7100195918578fa071dcbbc02489
  $tcFrame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1606663809126575690##
                   1759794397346043105##
                   TigerFrame.$trModule
                   TigerFrame.$tcFrame1
                   0#
                   GHC.Types.krep$*) -}
f7c29c5de1640312e0248a1208541017
  $tcFrame1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tcFrame2) -}
45e639687d9c234f4baa6d61909cf924
  $tcFrame2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frame"#) -}
a2e4dbff0e26cf7c867b8f4fc20f846d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerFrame.$trModule3
                   TigerFrame.$trModule1) -}
af4adc2d64e9f3b385923b3e69afc59b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$trModule2) -}
1cf05fdba053ccdffae730c802ffc7de
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TigerFrame"#) -}
109ab15d67434600366e9880c97b6f7b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$trModule4) -}
88f24c62b1822a705d3cc3d92bc25829
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY"#) -}
402c4e2384b2b19d70426842a571c2c2
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> TigerFrame.Access -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: TigerFrame.Access)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TigerFrame.InFrame b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             TigerFrame.$fShowAccess3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                TigerFrame.$fShowAccess3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   TigerFrame.InReg b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             TigerFrame.$fShowAccess2
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                TigerFrame.$fShowAccess2
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) } }) -}
3301a2a7a9044c26df324d48b4301bd8
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> TigerSymbol.Symbol
    -> [TigerAbs.Escapa]
    -> [TigerAbs.Escapa]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0] -}
5af07ee26ec36dcd3ac5c88f3c6f1414
  $wauxexp :: GHC.Prim.Int# -> TigerTree.Exp
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
5dfd2a70e73373c913fbf3def3273be4
  $wgo ::
    [TigerAbs.Escapa]
    -> GHC.Types.Int -> [TigerFrame.Access] -> [TigerFrame.Access]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><L,U>,
     Inline: [0] -}
e2f577fa26fca230e9fcee39cd1bb015
  $wgo1 ::
    [TigerFrame.Frag]
    -> [TigerFrame.Frag]
    -> [(TigerTree.Stm, TigerFrame.Frame)]
    -> ([TigerFrame.Frag], [(TigerTree.Stm, TigerFrame.Frame)])
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>m,
     Inline: [0] -}
ab24b6002a5b2fc772663bbf3f55b0d3
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
9aa9fe4a4f5c470babb7a81cd3c0d53d
  $wprepFormals :: [TigerAbs.Escapa] -> [TigerFrame.Access]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [TigerAbs.Escapa]) ->
                 TigerFrame.$wgo
                   ww
                   TigerFrame.localsInicial
                   (GHC.Types.[] @ TigerFrame.Access)) -}
9fa3e3926c7a153c0eff9a588629df81
  $wsepFrag ::
    [TigerFrame.Frag]
    -> (# [TigerFrame.Frag], [(TigerTree.Stm, TigerFrame.Frame)] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: [TigerFrame.Frag]) ->
                 let {
                   ds :: ([TigerFrame.Frag], [(TigerTree.Stm, TigerFrame.Frame)])
                   = TigerFrame.$wgo1
                       w
                       (GHC.Types.[] @ TigerFrame.Frag)
                       (GHC.Types.[] @ (TigerTree.Stm, TigerFrame.Frame))
                 } in
                 (# case ds of wild { (,) ass stmss ->
                    GHC.List.reverse1
                      @ TigerFrame.Frag
                      ass
                      (GHC.Types.[] @ TigerFrame.Frag) },
                    case ds of wild { (,) ass stmss ->
                    GHC.List.reverse1
                      @ (TigerTree.Stm, TigerFrame.Frame)
                      stmss
                      (GHC.Types.[] @ (TigerTree.Stm, TigerFrame.Frame)) } #)) -}
402c4e2384b2b19d70426842a571c2c2
  data Access = InFrame GHC.Types.Int | InReg TigerTemp.Temp
56100333360f19166abd501d364a04de
  data Frag
    = Proc TigerTree.Stm TigerFrame.Frame
    | AString TigerTemp.Label [TigerSymbol.Symbol]
69d2335ca6f6c900a4407bb11f38dd8d
  data Frame
    = Frame {name :: TigerSymbol.Symbol,
             formals :: [TigerAbs.Escapa],
             locals :: [TigerAbs.Escapa],
             actualArg :: GHC.Types.Int,
             actualLocal :: GHC.Types.Int,
             actualReg :: GHC.Types.Int}
69d2335ca6f6c900a4407bb11f38dd8d
  actualArg :: TigerFrame.Frame -> GHC.Types.Int
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
69d2335ca6f6c900a4407bb11f38dd8d
  actualLocal :: TigerFrame.Frame -> GHC.Types.Int
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
69d2335ca6f6c900a4407bb11f38dd8d
  actualReg :: TigerFrame.Frame -> GHC.Types.Int
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
3826f31771e5b740839be0f399ccd08a
  allocArg ::
    (GHC.Base.Monad w, TigerTemp.TLGenerator w) =>
    TigerFrame.Frame
    -> TigerAbs.Escapa -> w (TigerFrame.Frame, TigerFrame.Access)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U(A,1*C1(C1(U)),A,C(U),A)><L,1*U(1*U,A)><L,U(U,U,U,U(U),U,U)><S,1*U>,
     Unfolding: (\ @ w :: * -> *
                   ($dMonad :: GHC.Base.Monad w)
                   ($dTLGenerator :: TigerTemp.TLGenerator w)
                   (fr :: TigerFrame.Frame)
                   (ds :: TigerAbs.Escapa) ->
                 case ds of wild {
                   TigerAbs.Escapa
                   -> let {
                        actual :: GHC.Types.Int
                        = case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                          ds4 }
                      } in
                      GHC.Base.return
                        @ w
                        $dMonad
                        @ (TigerFrame.Frame, TigerFrame.Access)
                        (case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                         TigerFrame.Frame
                           ds1
                           ds2
                           ds3
                           (case actual of wild2 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 1#) })
                           ds5
                           ds6 },
                         TigerFrame.InFrame
                           (case actual of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# x 4#) 4#) }))
                   TigerAbs.NoEscapa
                   -> GHC.Base.>>=
                        @ w
                        $dMonad
                        @ TigerTemp.Temp
                        @ (TigerFrame.Frame, TigerFrame.Access)
                        (TigerTemp.newTemp @ w $dTLGenerator)
                        (\ (s :: TigerTemp.Temp) ->
                         GHC.Base.return
                           @ w
                           $dMonad
                           @ (TigerFrame.Frame, TigerFrame.Access)
                           (fr, TigerFrame.InReg s)) }) -}
a72795454f49028809d576612431ecad
  allocLocal ::
    (GHC.Base.Monad w, TigerTemp.TLGenerator w) =>
    TigerFrame.Frame
    -> TigerAbs.Escapa -> w (TigerFrame.Frame, TigerFrame.Access)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U(A,1*C1(C1(U)),A,C(U),A)><L,1*U(1*U,A)><L,U(U,U,U,U,U(U),U)><S,1*U>,
     Unfolding: (\ @ w :: * -> *
                   ($dMonad :: GHC.Base.Monad w)
                   ($dTLGenerator :: TigerTemp.TLGenerator w)
                   (fr :: TigerFrame.Frame)
                   (ds :: TigerAbs.Escapa) ->
                 case ds of wild {
                   TigerAbs.Escapa
                   -> let {
                        actual :: GHC.Types.Int
                        = case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                          ds5 }
                      } in
                      GHC.Base.return
                        @ w
                        $dMonad
                        @ (TigerFrame.Frame, TigerFrame.Access)
                        (case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                         TigerFrame.Frame
                           ds1
                           ds2
                           ds3
                           ds4
                           (case actual of wild2 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 1#) })
                           ds6 },
                         TigerFrame.InFrame
                           (case actual of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# x 4#) 4#) }))
                   TigerAbs.NoEscapa
                   -> GHC.Base.>>=
                        @ w
                        $dMonad
                        @ TigerTemp.Temp
                        @ (TigerFrame.Frame, TigerFrame.Access)
                        (TigerTemp.newTemp @ w $dTLGenerator)
                        (\ (s :: TigerTemp.Temp) ->
                         GHC.Base.return
                           @ w
                           $dMonad
                           @ (TigerFrame.Frame, TigerFrame.Access)
                           (fr, TigerFrame.InReg s)) }) -}
3f1260509c7a9e5b96a3284ca262684b
  argsGap :: GHC.Types.Int
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) TigerFrame.wSz -}
5de4552303a394f46b777c7c463b7cbb
  argsInicial :: GHC.Types.Int
  {- Strictness: m, Unfolding: (TigerFrame.localsInicial) -}
5043c9113137ee2c548077bad51504c8
  auxexp :: GHC.Types.Int -> TigerTree.Exp
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> TigerFrame.$wauxexp ww1 }) -}
1279d0bfd4d789c9b7051aea986b8c9b
  calldefs :: [TigerTemp.Temp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTemp.Temp
                   TigerFrame.rv
                   (GHC.Types.[] @ TigerTemp.Temp)) -}
331202f5711f4234a808f6a5cf3a738e
  defaultFrame :: TigerFrame.Frame
  {- Strictness: m,
     Unfolding: (TigerFrame.Frame
                   Data.Text.Internal.empty
                   (GHC.Types.[] @ TigerAbs.Escapa)
                   (GHC.Types.[] @ TigerAbs.Escapa)
                   TigerFrame.localsInicial
                   TigerFrame.localsInicial
                   TigerFrame.regInicial) -}
33ea2e00e86c77ee86f4f49f08e7b4b5
  exp :: TigerFrame.Access -> GHC.Types.Int -> TigerTree.Exp
  {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U)>,
     Unfolding: (\ (ds :: TigerFrame.Access) (e :: GHC.Types.Int) ->
                 case ds of wild {
                   TigerFrame.InFrame k
                   -> TigerTree.Mem
                        (TigerTree.Binop
                           TigerTree.Plus
                           (TigerFrame.auxexp e)
                           (TigerTree.Const k))
                   TigerFrame.InReg l
                   -> case e of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT -> TigerTree.Temp l 0# -> TigerFrame.exp1 } } }) -}
789df95aa3cda6abb9739a0a5f1b6351
  exp1 :: TigerTree.Exp
  {- Strictness: x -}
232594bd38aef2b0a1f87e9b2767201a
  externalCall :: GHC.Base.String -> [TigerTree.Exp] -> TigerTree.Exp
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 TigerTree.Call
                   (TigerTree.Name
                      (case GHC.Magic.runRW#
                              @ ('GHC.Types.TupleRep
                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                              @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               TigerFrame.$wouter ipv1 4# s 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                       ipv1 }))) -}
69d2335ca6f6c900a4407bb11f38dd8d
  formals :: TigerFrame.Frame -> [TigerAbs.Escapa]
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
6f68cbff88ed60a8019edb43ebd0cb9a
  fp :: TigerTemp.Temp
  {- Unfolding: (Data.Text.Show.unpackCString# TigerFrame.fp1) -}
ac0a81cbaaa8062b8bf8f4c2be1c6b73
  fp1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FP"#) -}
30a6f1c27d38aac6cc2182b4a39a4a03
  fpPrev :: GHC.Types.Int
  {- Strictness: m, Unfolding: (TigerFrame.localsInicial) -}
c31df33838ad17d8e4c52d41b5bdd434
  fpPrevLev :: GHC.Types.Int
  {- Strictness: m, Unfolding: (TigerFrame.localsInicial) -}
69d2335ca6f6c900a4407bb11f38dd8d
  locals :: TigerFrame.Frame -> [TigerAbs.Escapa]
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
f505a082172255f59604e43c277b0775
  localsGap :: GHC.Types.Int
  {- Strictness: m, Unfolding: (TigerFrame.wSz) -}
8fd6ff4031475d669914ff6e55452af9
  localsInicial :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e9a052d4507335cf7b73d678281b781d
  log2WSz :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
69d2335ca6f6c900a4407bb11f38dd8d
  name :: TigerFrame.Frame -> TigerSymbol.Symbol
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
9f1c40a38f7066c477e08ac07cfddc48
  newFrame ::
    TigerSymbol.Symbol -> [TigerAbs.Escapa] -> TigerFrame.Frame
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (nm :: TigerSymbol.Symbol) (fs :: [TigerAbs.Escapa]) ->
                 TigerFrame.Frame
                   nm
                   fs
                   (GHC.Types.[] @ TigerAbs.Escapa)
                   TigerFrame.localsInicial
                   TigerFrame.localsInicial
                   TigerFrame.regInicial) -}
7d4be43319af54408d5e7f9e9674b5fb
  prepFormals :: TigerFrame.Frame -> [TigerFrame.Access]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerFrame.Frame) ->
                 case w of ww { TigerFrame.Frame ww1 ww2 ww3 ww4 ww5 ww6 ->
                 TigerFrame.$wprepFormals ww2 }) -}
80cb27f42b3f39e1f4b9f30de7ea27e8
  regInicial :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
725c6162bff212ff493253c939adc8d6
  rv :: TigerTemp.Temp
  {- Unfolding: (Data.Text.Show.unpackCString# TigerFrame.rv1) -}
520c39b4111cd20a113749a320139b50
  rv1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RV"#) -}
fda6f29fd245316df328a97e6d86db1b
  sepFrag ::
    [TigerFrame.Frag]
    -> ([TigerFrame.Frag], [(TigerTree.Stm, TigerFrame.Frame)])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [TigerFrame.Frag]) ->
                 case TigerFrame.$wsepFrag w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d1f7a96f6768a5c82994af07aa162e07
  sp :: TigerTemp.Temp
  {- Unfolding: (Data.Text.Show.unpackCString# TigerFrame.sp1) -}
de7e0a61c809eb7b4298469c3a6d9173
  sp1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SP"#) -}
07a447fbd7b79ae3a8d76a7155f88fc1
  specialregs :: [TigerTemp.Temp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTemp.Temp
                   TigerFrame.rv
                   TigerFrame.specialregs1) -}
7a10874c975518c2a4b2f99be75e9129
  specialregs1 :: [TigerTemp.Temp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTemp.Temp
                   TigerFrame.fp
                   TigerFrame.specialregs2) -}
bd3ec08a295f8630274c46587580386f
  specialregs2 :: [TigerTemp.Temp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTemp.Temp
                   TigerFrame.sp
                   (GHC.Types.[] @ TigerTemp.Temp)) -}
bc2ea35a99c5aedcb118975a6b140cb5
  wSz :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
instance GHC.Show.Show [TigerFrame.Access]
  = TigerFrame.$fShowAccess
instance GHC.Show.Show [TigerFrame.Frag] = TigerFrame.$fShowFrag
instance GHC.Show.Show [TigerFrame.Frame] = TigerFrame.$fShowFrame
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

