
==================== FINAL INTERFACE ====================
2018-12-06 21:30:45.921383075 UTC

interface HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY:TigerParser 8043
  interface hash: 300c0273e611e74f4879e817ba180f33
  ABI hash: 3bfa0338b85920b456f0621dfc681037
  export-list hash: 13f48254be81a1bfc1f1e676b19e5b9d
  orphan hash: 996acb3389356bd223f11a4628515d7c
  flag hash: 84a707957232ceed2ddebd5ca4ca265a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerParser.amperCmp
  TigerParser.arrayexp
  TigerParser.arrty
  TigerParser.assignexp
  TigerParser.binary
  TigerParser.breakexp
  TigerParser.callexp
  TigerParser.declarations
  TigerParser.expression
  TigerParser.expression'
  TigerParser.field
  TigerParser.field'
  TigerParser.forexp
  TigerParser.ftype
  TigerParser.functiondec
  TigerParser.fundec
  TigerParser.gline
  TigerParser.ifexp
  TigerParser.int
  TigerParser.letexp
  TigerParser.mTypo
  TigerParser.namety
  TigerParser.nilexp
  TigerParser.parse
  TigerParser.parseFromFile
  TigerParser.parseFromStr
  TigerParser.parseexp
  TigerParser.pipeCmp
  TigerParser.recfld
  TigerParser.recordexp
  TigerParser.rety
  TigerParser.seqexp
  TigerParser.seqexpWOut
  TigerParser.stringexp
  TigerParser.table
  TigerParser.ty
  TigerParser.tydec
  TigerParser.tydecs
  TigerParser.unitexp
  TigerParser.v'
  TigerParser.vardec
  TigerParser.varexp
  TigerParser.variable
  TigerParser.whileexp
module dependencies: TigerAbs TigerLexer TigerSymbol
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      syb-0.7 text-1.2.3.0 transformers-0.5.5.0
orphans: syb-0.7:Data.Generics.Instances
         text-1.2.3.0:Data.Text.Lazy
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  TigerAbs 1d186fe051144908f0c50c683d8be41b
  exports: 66e1533f82207906d70ea37c53c3d5c6
  ArrayExp ac832c47ff0355b402f68a7d03fc4d78
  ArrayTy 2a1be44c647db3d72b14f609038cc7da
  AssignExp be679541b1d717312a2c2a09ec9a3aaf
  BreakExp 8961937da28f0f5112f52937e3d2ab22
  CallExp bdb2fb755ac7b2fd23cbaf119516fce6
  Dec ad89b6e5e364054c22a55dff17ee7887
  DivideOp 82ac95724b70b2ff5753e7ccf0ea2d4c
  EqOp 69c34fb6a146bfd376d32ecf3c5e4255
  Escapa c09003e06c2f0977e7facdcf1c6e85a6
  Exp ad89b6e5e364054c22a55dff17ee7887
  FieldVar 2582b4c40278c0e2b4485828f2ba9570
  ForExp cfc6ef9086c19fcb99143da01eb0398d
  FunctionDec abe3b9b54849272367ca6ff8008292db
  GeOp 9665b815308596c90ac99172b8860e2d
  GtOp 0fd8b1b5d0427f4cbd7b85986da01905
  IfExp b51a5d74a67f44b3371f933b86465370
  IntExp 198ba506b21a1cd90b7659baff313d14
  LeOp 296b86b4aa90ebb45d606aafdc3d209b
  LetExp 59813586689412cb9e9327ec6f076974
  LtOp 7fb46a358e9cd1f152dcb68bd2eab6dd
  MinusOp 9a7f539da5ef283ef631b6a680f1ee91
  NameTy e3886b3049b9a354fbf122fc327a42eb
  NeqOp f2dd6c2c0ba1ba61c34af9a009a4463d
  NilExp 799b0afe359ee53dd551c61ea29798c3
  NoEscapa 66690b4920822a350152fb2706ac858c
  OpExp a54f729e9b7d06c1c0a3c959d5cdca3b
  PlusOp 2446ba7944645c0fa62ec388edcca087
  Pos 3e89dee41a00a3bf8c3f5f962e8847c1
  Range 2e8a58efe5b12c639119ee9900a3eb50
  RecordExp 08c91400b6fd391f1d2d126b5214fa83
  RecordTy 1b574a1fa2b9fc0ce60170c3d608582b
  SeqExp a32c7f72e1cbc842ebedab1075ce4e7f
  Simple b8700e16d54943096eaa146c3beeb7d5
  SimpleVar e48867a4abe39f1af5851f8d905b59c9
  StringExp 0bc5f3e7d70dabb00a90a88055141aa7
  SubscriptVar a3f32f2bd11db53704af22026918ecce
  TimesOp 3d4a0500175c20ae00301f98802c70fe
  Ty e2bedd26776c3ab2ad028af09643fc49
  TypeDec eb63a5cd9d26e46282950790626b3067
  UnitExp ba64671d2b28b5fd54a40b2dcaeacaa6
  Var ad89b6e5e364054c22a55dff17ee7887
  VarDec ba13b69552df7c2c811f3e90a018e4d8
  VarExp 1b7379badb86673206c9dd81053083b6
  WhileExp ee88e6f22b7ed417186fbf1d7c3ada62
import  -/  TigerLexer 59b5cea7dc6df1a4fa4f2e1f6fa9a1ce
  exports: bbf0c3b2182974d0102c126b274f8308
  braces ba2651034d9bc93f7a571b94b897dab8
  brackets 280f623852d16237183fc8c794d9f84d
  colon 90a06fb284ae59ec7a2cb92f8283ae52
  commaSep 4615888ba8d766cce957360ee2bd8d55
  dot 86ffd836c7f4f07860d6e7bdefe9d2ff
  identifier 04ec2a3af1e53cf5e766d6f7c9d18c0c
  number 440e67d360b0500582bf547c8262153e
  parens 54406ff24a3c9a0f3735d3e7157907f0
  reserved 4c389d41cfe95189c26dfc11035b7007
  reservedOp 665ef75a8ef4806b436bd803d9d5f93e
  semiSep1 20ca9bf6754660fbb9dc0b90add1cf47
  stringLiteral eeed8015029bae959769b45f67986436
  symbol defc3087456b22d324516cb7cb79493c
  whiteSpace 153e012f7392400a4e4e45624ed1e107
import  -/  TigerSymbol 8cdb62767ac36bcd684c9f1304d4a564
  exports: da94fd004c9146d1f25642212f80c685
  Symbol 8706b0bbdbf6daae41c5fa34f29c9575
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  parsec-3.1.13.0:Text.Parsec 8698ecc486e7a2a7bdc9500cd29ef6f2
import  -/  parsec-3.1.13.0:Text.Parsec.Char ba652f10f2db2d657f224e91ed53fce9
import  -/  parsec-3.1.13.0:Text.Parsec.Combinator 867c44e0e488ef24ec5bd4da95f91de9
import  -/  parsec-3.1.13.0:Text.Parsec.Error 5c35aa426bd1cd52bcab90d9a1e3ce4c
import  -/  parsec-3.1.13.0:Text.Parsec.Expr 1a53c32ad29c608a30ef4c4ea3004f9a
import  -/  parsec-3.1.13.0:Text.Parsec.Pos 85d30a347a2120f1b5f286869826a471
import  -/  parsec-3.1.13.0:Text.Parsec.Prim 48929b84b5d30b299edcfed21f9bf40e
import  -/  parsec-3.1.13.0:Text.Parsec.String 2197da5d25a401744ce266b9d6355c6b
import  -/  parsec-3.1.13.0:Text.Parsec.Token 5ff1253a33e9911f5f6e7391fc9dc21b
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
2d42bbca1ed32879cb9303c9756fe576
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (TigerParser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
25c501ba53d8bb40abff51e7864bbf80
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> (GHC.Base.Nothing @ (tok, [tok]))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R))
                   : t ts
                   -> (GHC.Base.Just @ (tok, [tok]) (t, ts))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R)) }) -}
1d66f1812c90e03d502edb39b822555f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerParser.$trModule3
                   TigerParser.$trModule1) -}
b164ad00c0181ffc666f637e9959dc63
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerParser.$trModule2) -}
54fdd19d88279f29b05f622d3c1907e9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TigerParser"#) -}
724be7f28369687f20ed84680409a141
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerParser.$trModule4) -}
c03edc0d86b013bcac1b2e8e92f4d860
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HaskTiger-0.1.0.0-ICRikAExwdr6IYW5QWtTsY"#) -}
4180e4cd2794236fc03e224c7e74d808
  $wamperCmp ::
    TigerAbs.Pos
    -> (# Text.Parsec.Prim.ParsecT
            GHC.Base.String
            ()
            Data.Functor.Identity.Identity
            (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp),
          Text.Parsec.Expr.Assoc #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: TigerAbs.Pos) ->
                 let {
                   lvl64 :: TigerAbs.Exp = TigerAbs.IntExp TigerParser.amperCmp4 w
                 } in
                 let {
                   lvl65 :: GHC.Base.Maybe TigerAbs.Exp
                   = GHC.Base.Just @ TigerAbs.Exp lvl64
                 } in
                 (# (Text.Parsec.Prim.$fApplicativeParsecT2
                       @ [GHC.Types.Char]
                       @ ()
                       @ Data.Functor.Identity.Identity
                       @ ()
                       @ (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                       TigerParser.amperCmp1
                       (let {
                          x :: TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp
                            {- Arity: 2, Strictness: <L,U><L,U>,
                               Unfolding: InlineRule (2, True, False)
                                          (\ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                                           TigerAbs.IfExp e1 e2 lvl65 w) -}
                          = \ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                            TigerAbs.IfExp e1 e2 lvl65 w
                        } in
                        (\ @ b
                           (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                           (ds :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                  -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                  -> Text.Parsec.Error.ParseError
                                  -> Data.Functor.Identity.Identity b)
                           (ds1 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (eok :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                   -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                   -> Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (ds2 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b) ->
                         eok
                           x
                           s1
                           (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                            Text.Parsec.Error.ParseError
                              ds4
                              (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                          `cast`
                        (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                  <[GHC.Types.Char]>_R
                                  <()>_R
                                  <Data.Functor.Identity.Identity>_R
                                  <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R))))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R)),
                    Text.Parsec.Expr.AssocLeft #)) -}
cb11e224f5e9962f892fc2e596798e99
  $wbinary ::
    GHC.Base.String
    -> TigerAbs.Oper
    -> Text.Parsec.Expr.Assoc
    -> TigerAbs.Pos
    -> (# Text.Parsec.Prim.ParsecT
            GHC.Base.String
            ()
            Data.Functor.Identity.Identity
            (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp),
          Text.Parsec.Expr.Assoc #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: TigerAbs.Oper)
                   (w2 :: Text.Parsec.Expr.Assoc)
                   (w3 :: TigerAbs.Pos) ->
                 (# (Text.Parsec.Prim.$fApplicativeParsecT2
                       @ [GHC.Types.Char]
                       @ ()
                       @ Data.Functor.Identity.Identity
                       @ ()
                       @ (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                       (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                        ds4 w })
                       (let {
                          x :: TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp
                            {- Arity: 2, Strictness: <L,U><L,U>,
                               Unfolding: InlineRule (2, True, False)
                                          (\ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                                           TigerAbs.OpExp e1 w1 e2 w3) -}
                          = \ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                            TigerAbs.OpExp e1 w1 e2 w3
                        } in
                        (\ @ b
                           (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                           (ds :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                  -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                  -> Text.Parsec.Error.ParseError
                                  -> Data.Functor.Identity.Identity b)
                           (ds1 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (eok :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                   -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                   -> Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (ds2 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b) ->
                         eok
                           x
                           s1
                           (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                            Text.Parsec.Error.ParseError
                              ds4
                              (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                          `cast`
                        (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                  <[GHC.Types.Char]>_R
                                  <()>_R
                                  <Data.Functor.Identity.Identity>_R
                                  <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R))))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R)),
                    w2 #)) -}
48393b6eab31acc850f6ccc8d8aa458a
  $wftype ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Base.Maybe Data.Text.Internal.Text
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.Maybe Data.Text.Internal.Text
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 TigerParser.ftype2
                   @ b
                   w
                   w1
                   w2
                   w3
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    w3
                      (GHC.Base.Nothing @ Data.Text.Internal.Text)
                      w
                      (case w of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))) -}
2930973caf4362fd463d7a00d1aac486
  $wgline ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Pos
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 2,
     Strictness: <L,U(U,U(U,U,U),U)><C(C(C(S))),1*C1(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: TigerAbs.Pos
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 let {
                   x :: Text.Parsec.Pos.SourcePos
                   = case w of wild { Text.Parsec.Prim.State ds ds1 ds2 -> ds1 }
                 } in
                 w1
                   (TigerAbs.Simple
                      (case x of wild { Text.Parsec.Pos.SourcePos _name dt dt1 ->
                       GHC.Types.I# dt })
                      (case x of wild { Text.Parsec.Pos.SourcePos _name dt dt1 ->
                       GHC.Types.I# dt1 }))
                   w
                   (case w of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                    case ds4 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                    case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww4 of wild1 {
                      DEFAULT
                      -> Text.Parsec.Error.ParseError
                           ww3
                           (GHC.Types.[] @ Text.Parsec.Error.Message)
                      GHC.Types.EQ
                      -> case Text.Parsec.Error.$wmergeError
                                ww4
                                ww5
                                ww6
                                Text.Parsec.Prim.$fMonadReaderrParsecT2
                                ww4
                                ww5
                                ww6
                                (GHC.Types.[]
                                   @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                         Text.Parsec.Error.ParseError ww15 ww16 } } } })) -}
0c1cbd17a7bff60585e86da230bdd9af
  $wmTypo ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe TigerSymbol.Symbol
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe TigerSymbol.Symbol
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Base.Maybe TigerSymbol.Symbol
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.Maybe TigerSymbol.Symbol
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Base.Maybe TigerSymbol.Symbol)
                   TigerLexer.colon
                   TigerParser.ftype1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.Maybe Data.Text.Internal.Text>_R))
                   @ b
                   w
                   w1
                   w2
                   w3
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    w3
                      (GHC.Base.Nothing @ TigerSymbol.Symbol)
                      w
                      (case w of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))) -}
74d4174ee5e9053e191660c7df726014
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
082e230c75eb822da0eedfd648b01502
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
07716dc5448e577b6993573c4a5195c8
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
2f409d7b2ba78385f79f0a56fcc17052
  $wparseFromStr ::
    GHC.Base.Monad m =>
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> m TigerAbs.Exp
  {- Arity: 5,
     Strictness: <S,1*U(A,A,A,1*C1(U),1*C1(U))><L,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0] -}
1b095c262eebcb5d15f0b8020ca71730
  $wparseexp ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: TigerAbs.Exp
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: TigerAbs.Exp
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   w
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    case TigerParser.$wtable x of ww { (#,#) ww1 ww2 ->
                    let {
                      eerr :: Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1
                        {- Arity: 1, Strictness: <L,1*U(U(U,U,U),U)>,
                           Unfolding: InlineRule (1, True, False)
                                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                                       w3 (Text.Parsec.Error.mergeError err err')) -}
                      = \ (err' :: Text.Parsec.Error.ParseError) ->
                        w3 (Text.Parsec.Error.mergeError err err')
                    } in
                    (Text.Parsec.Expr.buildExpressionParser1
                       @ TigerAbs.Exp
                       @ GHC.Base.String
                       @ ()
                       @ Data.Functor.Identity.Identity
                       (GHC.Types.:
                          @ [Text.Parsec.Expr.Operator
                               GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp]
                          ww1
                          ww2)
                       TigerParser.expression3
                         `cast`
                       (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                 <GHC.Base.String>_R
                                 <()>_R
                                 <Data.Functor.Identity.Identity>_R
                                 <TigerAbs.Exp>_R)))
                      `cast`
                    (Text.Parsec.Prim.N:ParsecT[0]
                         <GHC.Base.String>_R
                         <()>_R
                         <Data.Functor.Identity.Identity>_R
                         <TigerAbs.Exp>_R)
                      @ b1
                      s2
                      w1
                      eerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err' :: Text.Parsec.Error.ParseError) ->
                       w2 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      eerr })) -}
64d70aee550a3c1e51863de88578b933
  $wpipeCmp ::
    TigerAbs.Pos
    -> (# Text.Parsec.Prim.ParsecT
            GHC.Base.String
            ()
            Data.Functor.Identity.Identity
            (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp),
          Text.Parsec.Expr.Assoc #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: TigerAbs.Pos) ->
                 let {
                   lvl64 :: TigerAbs.Exp = TigerAbs.IntExp TigerParser.pipeCmp4 w
                 } in
                 (# (Text.Parsec.Prim.$fApplicativeParsecT2
                       @ [GHC.Types.Char]
                       @ ()
                       @ Data.Functor.Identity.Identity
                       @ ()
                       @ (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                       TigerParser.pipeCmp1
                       (let {
                          x :: TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp
                            {- Arity: 2, Strictness: <L,U><L,U>,
                               Unfolding: InlineRule (2, True, False)
                                          (\ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                                           TigerAbs.IfExp
                                             e1
                                             lvl64
                                             (GHC.Base.Just @ TigerAbs.Exp e2)
                                             w) -}
                          = \ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                            TigerAbs.IfExp e1 lvl64 (GHC.Base.Just @ TigerAbs.Exp e2) w
                        } in
                        (\ @ b
                           (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                           (ds :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                  -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                  -> Text.Parsec.Error.ParseError
                                  -> Data.Functor.Identity.Identity b)
                           (ds1 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (eok :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                   -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                   -> Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (ds2 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b) ->
                         eok
                           x
                           s1
                           (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                            Text.Parsec.Error.ParseError
                              ds4
                              (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                          `cast`
                        (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                  <[GHC.Types.Char]>_R
                                  <()>_R
                                  <Data.Functor.Identity.Identity>_R
                                  <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R))))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R)),
                    Text.Parsec.Expr.AssocLeft #)) -}
0b1e005b7ecd68c9b4a16a381017ecb2
  $wtable ::
    TigerAbs.Pos
    -> (# [Text.Parsec.Expr.Operator
             GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp],
          [[Text.Parsec.Expr.Operator
              GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp]] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
d55c5311715180ff56ee0280671a0728
  $wv' ::
    TigerAbs.Var
    -> forall b.
       Text.Parsec.Prim.State GHC.Base.String ()
       -> (TigerAbs.Var
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Var
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))>,
     Inline: [0] -}
b74269cdbd9cd5138969d3bd032535f8
  amperCmp ::
    TigerAbs.Pos
    -> Text.Parsec.Expr.Operator
         GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp
  {- Arity: 1, Strictness: <L,U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerAbs.Pos) ->
                 case TigerParser.$wamperCmp w of ww { (#,#) ww1 ww2 ->
                 Text.Parsec.Expr.Infix
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ TigerAbs.Exp
                   ww1
                   ww2 }) -}
b154e150a1b53fba04b242951f28e317
  amperCmp1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds4 TigerParser.amperCmp2 }) -}
6557ae593cbc83cd0982b1799a6af717
  amperCmp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.amperCmp3) -}
b61522a894652b2ab3953fed7d6789e5
  amperCmp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("&"#) -}
81e6b876752b42e3bbd28cf4a573d896
  amperCmp4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9fb969d1dd9ad688c03191f49d11ae1d
  arrayexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.arrayexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
edcd5b6bb002bb2e740a9a5160c2f1f7
  arrayexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.arrayexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
ecafda8ecde349df2a84740afa34451a
  arrayexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
ab44a5e7955acf1cce1b0c8d1a484281
  arrty :: Text.Parsec.String.Parser TigerAbs.Ty
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                TigerParser.arrty1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Ty>_R)) -}
4b920ed0d139d8a15dc24278e083e231
  arrty1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Ty
                   TigerParser.arrty3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   TigerParser.arrty2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <TigerAbs.Ty>_R))) -}
3845e8928dc3ac7c5c35bf62bdbdbbad
  arrty2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) ->
                    cok
                      (TigerAbs.ArrayTy
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s2 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 })))
                   cerr
                   (\ (x :: GHC.Base.String) ->
                    eok
                      (TigerAbs.ArrayTy
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s2 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 })))
                   eerr }) -}
d545c9539d4d9af6aba37ffd578484cd
  arrty3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (()
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (()
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ ()
                   TigerParser.arrty7
                   TigerParser.arrty4) -}
ab47fe153f4bcfeb57eb5c93a69ebfd7
  arrty4 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.arrty5 }) -}
9fbb2b26ed4cf9d0cd1a9b557ee115d1
  arrty5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.arrty6) -}
27eedda37311c1857a2e8c7dfd4c4d93
  arrty6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("of"#) -}
c9ce6664e2695bd741a1a83c156cd484
  arrty7 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.arrty8 }) -}
9de7a64e73eba9c01bb8fd2ecba8e53e
  arrty8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.arrty9) -}
03d2247f513b9cbf4a20326c9e63460d
  arrty9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("array"#) -}
e940d64d76c958db639de2429b19dac8
  assignexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.assignexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
5f4adfc587bc4407e9768f324108e973
  assignexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.assignexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
fdb7d7f23395b6868f354ad34a98ca03
  assignexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
4b12f3a1edd11987c82bb2a32436c878
  binary ::
    GHC.Base.String
    -> TigerAbs.Oper
    -> Text.Parsec.Expr.Assoc
    -> TigerAbs.Pos
    -> Text.Parsec.Expr.Operator
         GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m1, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: TigerAbs.Oper)
                   (w2 :: Text.Parsec.Expr.Assoc)
                   (w3 :: TigerAbs.Pos) ->
                 case TigerParser.$wbinary w w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 Text.Parsec.Expr.Infix
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ TigerAbs.Exp
                   ww1
                   ww2 }) -}
71ccd6bf0f9795d338961b56a58be004
  breakexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.breakexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
c4c1fd9596f31c5c7628240b97fb9996
  breakexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.breakexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
a6bc16292109ef794cafef672c1da7bb
  breakexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Exp
                   TigerParser.breakexp3
                   (let {
                      x :: TigerAbs.Exp = TigerAbs.BreakExp p
                    } in
                    (\ @ b
                       (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                       (ds :: TigerAbs.Exp
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds1 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (eok :: TigerAbs.Exp
                               -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                               -> Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds2 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot] ->
                     eok
                       x
                       s1
                       (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                        Text.Parsec.Error.ParseError
                          ds4
                          (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp>_R)))
                   @ b1
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
2aba176e5098189809c3ed6dbc696264
  breakexp3 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.breakexp4 }) -}
736584d719f001dc12b768e912ab0b02
  breakexp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.breakexp5) -}
d6a8802fd93dd95ab7449af6b285c07b
  breakexp5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("break"#) -}
ef63677fcc6eef311c48a7c6b33bb859
  callexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.callexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
fb3502509df58fd1234eb16f32e91f8f
  callexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.callexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
45ac168d9faa26caa3a7b2bb80f207a1
  callexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
48c1ac3c58c29fffc789f67f3f8bbbe5
  declarations :: Text.Parsec.String.Parser TigerAbs.Dec
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.declarations1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Dec>_R)) -}
8666eeafd05cb8700245cabc026225a3
  declarations1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
cd052473581745f4d56b1d5fe3186b1f
  expression :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                TigerParser.expression1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
f1df11a830c787725a68166a186287d6
  expression' :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.expression3
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
c7b4b56fdf3f0bac837b015fcdadb811
  expression1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Exp
                   TigerLexer.whiteSpace
                   TigerParser.expression2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <TigerAbs.Exp>_R))) -}
775a0a6b453b109b7d30ccb00e2de307
  expression2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,A><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: TigerAbs.Exp
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: TigerAbs.Exp
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wparseexp @ b1 w w1 w3 w4) -}
66d7bdc41a2aec6329e5b565a9ce0132
  expression3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
2a0ac6a37d54341690b493f9b336d321
  field ::
    Text.Parsec.String.Parser
      [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)]
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds27
                   @ (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
                   (\ @ b1
                      (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (cok :: (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1)
                      (cerr :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1)
                      (eok :: (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1)
                      (eerr :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1) ->
                    ds
                      `cast`
                    (Text.Parsec.Prim.N:ParsecT[0]
                         <[GHC.Types.Char]>_R
                         <()>_R
                         <Data.Functor.Identity.Identity>_R
                         <GHC.Base.String>_R)
                      @ b1
                      s1
                      (\ (x :: GHC.Base.String)
                         (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err :: Text.Parsec.Error.ParseError) ->
                       TigerParser.field1
                         x
                         @ b1
                         s2
                         cok
                         cerr
                         (\ (x1 :: (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty))
                            (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                            (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                          cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                          cerr (Text.Parsec.Error.mergeError err err')))
                      cerr
                      (\ (x :: GHC.Base.String)
                         (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err :: Text.Parsec.Error.ParseError) ->
                       TigerParser.field1
                         x
                         @ b1
                         s2
                         cok
                         cerr
                         (\ (x1 :: (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty))
                            (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                            (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                          eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                          eerr (Text.Parsec.Error.mergeError err err')))
                      eerr)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)>_R)) }) -}
804217bc565aa82f675fab93548cc2ff
  field' ::
    Text.Parsec.String.Parser [(TigerSymbol.Symbol, TigerAbs.Ty)]
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds27
                   @ (Data.Text.Internal.Text, TigerAbs.Ty)
                   (\ @ b1
                      (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (cok :: (Data.Text.Internal.Text, TigerAbs.Ty)
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1)
                      (cerr :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1)
                      (eok :: (Data.Text.Internal.Text, TigerAbs.Ty)
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1)
                      (eerr :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1) ->
                    ds
                      `cast`
                    (Text.Parsec.Prim.N:ParsecT[0]
                         <[GHC.Types.Char]>_R
                         <()>_R
                         <Data.Functor.Identity.Identity>_R
                         <GHC.Base.String>_R)
                      @ b1
                      s1
                      (\ (x :: GHC.Base.String)
                         (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err :: Text.Parsec.Error.ParseError) ->
                       TigerParser.field'1
                         x
                         @ b1
                         s2
                         cok
                         cerr
                         (\ (x1 :: (Data.Text.Internal.Text, TigerAbs.Ty))
                            (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                            (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                          cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                          cerr (Text.Parsec.Error.mergeError err err')))
                      cerr
                      (\ (x :: GHC.Base.String)
                         (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err :: Text.Parsec.Error.ParseError) ->
                       TigerParser.field'1
                         x
                         @ b1
                         s2
                         cok
                         cerr
                         (\ (x1 :: (Data.Text.Internal.Text, TigerAbs.Ty))
                            (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                            (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                          eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                          eerr (Text.Parsec.Error.mergeError err err')))
                      eerr)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(Data.Text.Internal.Text, TigerAbs.Ty)>_R)) }) -}
395c0413838169426eb5c816832a50ac
  field'1 ::
    GHC.Base.String
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> ((Data.Text.Internal.Text, TigerAbs.Ty)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> ((Data.Text.Internal.Text, TigerAbs.Ty)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,1*U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
d2eeb28b9f851ae6e02911a21952331c
  field1 ::
    GHC.Base.String
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> ((Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> ((Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,1*U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
8f9c33740a3197fe86a9115106da1a8f
  forexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.forexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
c5fef1a8c1b240b607872f348e70ab50
  forexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.forexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
95fd56100ebbf88658ae466987f19006
  forexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
8ea2dde8a9ced123ca7728b7f2702e3e
  ftype ::
    Text.Parsec.String.Parser (GHC.Base.Maybe TigerSymbol.Symbol)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.ftype1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.Maybe Data.Text.Internal.Text>_R)) -}
b662931c9a8c1efe3c2fcecea3eb856c
  ftype1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Base.Maybe Data.Text.Internal.Text
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.Maybe Data.Text.Internal.Text
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 TigerParser.$wftype @ b w w1 w2 w3) -}
6bfe559b297a9486c0f5d52f34582054
  ftype2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: GHC.Base.Maybe Data.Text.Internal.Text
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: GHC.Base.Maybe Data.Text.Internal.Text
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    cok
                      (GHC.Base.Just
                         @ Data.Text.Internal.Text
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s4 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      s2
                      (case s2 of wild1 { Text.Parsec.Prim.State ds37 ds38 ds39 ->
                       case ds38 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   cerr
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eok
                      (GHC.Base.Just
                         @ Data.Text.Internal.Text
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s4 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      s2
                      (case s2 of wild1 { Text.Parsec.Prim.State ds37 ds38 ds39 ->
                       case ds38 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eerr }) -}
bfa4192832923ff16b794ef8e3c51a63
  functiondec :: Text.Parsec.String.Parser TigerAbs.Dec
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.functiondec1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Dec>_R)) -}
1a95672a34d9267dce130fa3d9b7b0a7
  functiondec1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ (TigerSymbol.Symbol,
                      [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                      GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
                   TigerParser.functiondec2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(TigerSymbol.Symbol,
                               [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                               GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)>_R))
                   @ b1
                   s1
                   (\ (x :: [(TigerSymbol.Symbol,
                              [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                              GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)]) ->
                    cok (TigerAbs.FunctionDec x))
                   cerr
                   (\ (x :: [(TigerSymbol.Symbol,
                              [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                              GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)]) ->
                    eok (TigerAbs.FunctionDec x))
                   eerr) -}
b0dc9b3983effd8473d7fc9ccb224eb1
  functiondec2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((TigerSymbol.Symbol,
         [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
         GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((TigerSymbol.Symbol,
         [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
         GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
5fdcafa5565cbd8d5daf0cabda14691e
  fundec ::
    Text.Parsec.String.Parser
      (TigerSymbol.Symbol,
       [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
       GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.functiondec2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(TigerSymbol.Symbol,
                            [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                            GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp,
                            TigerAbs.Pos)>_R)) -}
72bdcb7a26fe2a0798c45c2678e3367c
  gline :: Text.Parsec.String.Parser TigerAbs.Pos
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.gline1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Pos>_R)) -}
9a0ca3b8bfe264b00bf88b259ec20590
  gline1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Pos
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Pos
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: TigerAbs.Pos
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: TigerAbs.Pos
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline @ b1 w w3) -}
6a9b20207ba0b769344a35f1459fe41d
  ifexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.ifexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
2f640c480cf8256ad619f06fa921d2ef
  ifexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.ifexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
583e64631592201a9b1b2b9635b5a481
  ifexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
2a586d155b957a9d3b834eababfe1f3a
  int :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.int1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
9389a62a7ad4e3f3a472563c20807754
  int1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.int2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
c7e1fc5b590cbc825685ac4137d1836d
  int2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (pos :: TigerAbs.Pos)
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 TigerLexer.number1
                   @ b
                   eta
                   (\ (x :: GHC.Types.Int)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    eta1
                      (TigerAbs.IntExp x pos)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: GHC.Types.Int)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    eta3
                      (TigerAbs.IntExp x pos)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
144e8cd3170444f98efa6939fdf996cf
  letexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.letexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
7fea1260f3db97ec0e128d088511fcb3
  letexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
f8bb229ed30065c2194989992c677ed9
  mTypo ::
    Text.Parsec.String.Parser (GHC.Base.Maybe TigerSymbol.Symbol)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.mTypo1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.Maybe TigerSymbol.Symbol>_R)) -}
04b005c96cecd440b11c5c91a3a6a444
  mTypo1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe TigerSymbol.Symbol
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe TigerSymbol.Symbol
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Base.Maybe TigerSymbol.Symbol
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.Maybe TigerSymbol.Symbol
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 TigerParser.$wmTypo @ b w w1 w2 w3) -}
ba8174814f81e537c5e8dff5769a3f25
  namety :: Text.Parsec.String.Parser TigerAbs.Ty
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.namety1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Ty>_R)) -}
72a2f07073aa8abe610de55505d03c57
  namety1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) ->
                    cok
                      (TigerAbs.NameTy
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s2 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 })))
                   cerr
                   (\ (x :: GHC.Base.String) ->
                    eok
                      (TigerAbs.NameTy
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s2 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 })))
                   eerr }) -}
2325eccd82aed9292a43ce0bba293289
  nilexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.nilexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
66b6f581bfff47334e34c42b1095aa72
  nilexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.nilexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
c762ba0a29ee2ddb497424efba68ad61
  nilexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Exp
                   TigerParser.nilexp3
                   (let {
                      x :: TigerAbs.Exp = TigerAbs.NilExp p
                    } in
                    (\ @ b
                       (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                       (ds :: TigerAbs.Exp
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds1 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (eok :: TigerAbs.Exp
                               -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                               -> Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds2 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot] ->
                     eok
                       x
                       s1
                       (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                        Text.Parsec.Error.ParseError
                          ds4
                          (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp>_R)))
                   @ b1
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
e336070001adce8302e58c909c310d60
  nilexp3 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.nilexp4 }) -}
14b29be69f161aa3066947384aa13d2a
  nilexp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.nilexp5) -}
8ef9b4448af35544cdcc1169a4b87e55
  nilexp5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("nil"#) -}
2e6d4d1e95acf849708eb5f8ab6ab7c1
  parse ::
    GHC.Base.String
    -> Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.parse1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError TigerAbs.Exp>_R) -}
97dd3607c2873ea546cb27920029cb30
  parse1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: GHC.Base.String) ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ TigerAbs.Exp
                   (TigerParser.$s$fStream[]mtok @ GHC.Types.Char)
                   TigerParser.expression1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <TigerAbs.Exp>_R))
                   GHC.Tuple.()
                   p
                   p) -}
0045c8be043deff961f20ea889035baf
  parseFromFile ::
    GHC.IO.FilePath
    -> GHC.Types.IO
         (Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.parseFromFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Text.Parsec.Error.ParseError TigerAbs.Exp>_R)) -}
0a53c26a4a68e65394c830de1ab38c82
  parseFromFile1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (p :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        p
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (Text.Parsec.Prim.runPT
                       @ GHC.Base.String
                       @ Data.Functor.Identity.Identity
                       @ GHC.Types.Char
                       @ ()
                       @ TigerAbs.Exp
                       (TigerParser.$s$fStream[]mtok @ GHC.Types.Char)
                       TigerParser.expression1
                         `cast`
                       (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                 <[GHC.Types.Char]>_R
                                 <()>_R
                                 <Data.Functor.Identity.Identity>_R
                                 <TigerAbs.Exp>_R))
                       GHC.Tuple.()
                       p
                       ipv3)
                      `cast`
                    (Data.Functor.Identity.N:Identity[0]
                         <Data.Either.Either
                            Text.Parsec.Error.ParseError TigerAbs.Exp>_R) #) } }) -}
39c0f5248ad42555c81b94467eaf818b
  parseFromStr ::
    GHC.Base.Monad m =>
    (GHC.Base.String, GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.String -> m TigerAbs.Exp
  {- Arity: 3,
     Strictness: <S,1*U(A,A,A,1*C1(U),1*C1(U))><S,1*U(U,1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: (GHC.Base.String, GHC.Types.Int, GHC.Types.Int))
                   (w2 :: GHC.Base.String) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 TigerParser.$wparseFromStr @ m w ww1 ww2 ww3 w2 }) -}
bffdbf71572cfd300910bd434fc76224
  parseexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,A><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.expression2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
c31669ac208bc5a6f7503474b600e864
  pipeCmp ::
    TigerAbs.Pos
    -> Text.Parsec.Expr.Operator
         GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp
  {- Arity: 1, Strictness: <L,U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerAbs.Pos) ->
                 case TigerParser.$wpipeCmp w of ww { (#,#) ww1 ww2 ->
                 Text.Parsec.Expr.Infix
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ TigerAbs.Exp
                   ww1
                   ww2 }) -}
ea0d7776edd45fce2aa230bfc1df5e5b
  pipeCmp1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds4 TigerParser.pipeCmp2 }) -}
eb1558cbe23572df58caccab4390cda2
  pipeCmp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.pipeCmp3) -}
741804b3b9c964270fc0075ec7bb7b1d
  pipeCmp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("|"#) -}
8fe67f06e124c7592cddd3e367e83a6c
  pipeCmp4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
45992d1fd829dad875fbdc8efaab2545
  recfld ::
    Text.Parsec.String.Parser (TigerSymbol.Symbol, TigerAbs.Exp)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.recfld1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(TigerSymbol.Symbol, TigerAbs.Exp)>_R)) -}
ad0ab287a6716e0f00447a3fd7f34213
  recfld1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((TigerSymbol.Symbol, TigerAbs.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((TigerSymbol.Symbol, TigerAbs.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: (TigerSymbol.Symbol, TigerAbs.Exp)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: (TigerSymbol.Symbol, TigerAbs.Exp)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    TigerParser.recfld2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: (TigerSymbol.Symbol, TigerAbs.Exp))
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    TigerParser.recfld2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: (TigerSymbol.Symbol, TigerAbs.Exp))
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr }) -}
232005f095c4389a36d7a8cae9d0b394
  recfld2 ::
    GHC.Base.String
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> ((TigerSymbol.Symbol, TigerAbs.Exp)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> ((TigerSymbol.Symbol, TigerAbs.Exp)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
bf7ec818c1f93bd799c053dc9a4e9965
  recordexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.recordexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
78eb68f706e25d2eab0fb194470e09dd
  recordexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.recordexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
0de0151b792e4533761f297794b60c2b
  recordexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
17e0a48bf122ea02fe059b305893bdca
  rety :: Text.Parsec.String.Parser TigerAbs.Ty
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.rety1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Ty>_R)) -}
0e9f93fe5a343f98df4dd6b04e7a3162
  rety1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.rety_p
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <[(TigerSymbol.Symbol, TigerAbs.Ty)]>_R)
                   @ b1
                   s1
                   (\ (x :: [(TigerSymbol.Symbol, TigerAbs.Ty)]) ->
                    cok (TigerAbs.RecordTy x))
                   cerr
                   (\ (x :: [(TigerSymbol.Symbol, TigerAbs.Ty)]) ->
                    eok (TigerAbs.RecordTy x))
                   eerr) -}
1bd8edcc5190bfc062c9359a55781781
  rety_p ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char]
      ()
      Data.Functor.Identity.Identity
      [(TigerSymbol.Symbol, TigerAbs.Ty)]
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds17 @ [(TigerSymbol.Symbol, TigerAbs.Ty)] TigerParser.field' }) -}
cccfdb972077545e4333c2bcd25663e5
  seqexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.seqexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
66ce8563a6dd07e8fea17e7137801e11
  seqexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.seqexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
9d4b2446a58774251700a329f142e8a9
  seqexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.seqexp_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <[TigerAbs.Exp]>_R)
                   @ b1
                   s1
                   (\ (x :: [TigerAbs.Exp])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    cok
                      (TigerAbs.SeqExp x p)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   cerr
                   (\ (x :: [TigerAbs.Exp])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eok
                      (TigerAbs.SeqExp x p)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eerr) -}
16a461871e60442492523f3ac61a180f
  seqexpWOut :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.seqexpWOut1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
b28889bfa4da121ed00bf0aeb8027a44
  seqexpWOut1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
80c42a33e4c72bc30e110e0ebafa4c8f
  seqexp_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity [TigerAbs.Exp]
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds16
                   @ [TigerAbs.Exp]
                   (ds26
                      @ TigerAbs.Exp
                      TigerParser.expression1
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <[GHC.Types.Char]>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <TigerAbs.Exp>_R))) }) -}
e02a21d163533b94288be50884af110e
  stringexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.stringexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
1450091cc9e3a1c50e23535f528652b2
  stringexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.stringexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
0e4eed1533bf668479a8126029dd203d
  stringexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds6
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b
                   eta
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta1
                      (TigerAbs.StringExp x p)
                      s2
                      (case s2 of wild1 { Text.Parsec.Prim.State ds37 ds38 ds39 ->
                       case ds38 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta3
                      (TigerAbs.StringExp x p)
                      s2
                      (case s2 of wild1 { Text.Parsec.Prim.State ds37 ds38 ds39 ->
                       case ds38 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4 }) -}
f659ce25b99709758fd470e8bdac8d6c
  table ::
    TigerAbs.Pos
    -> [[Text.Parsec.Expr.Operator
           GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp]]
  {- Arity: 1, Strictness: <L,U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerAbs.Pos) ->
                 case TigerParser.$wtable w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ [Text.Parsec.Expr.Operator
                        GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp]
                   ww1
                   ww2 }) -}
fe330d6aae7aa872f028b3228a7ea611
  ty :: Text.Parsec.String.Parser TigerAbs.Ty
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.ty1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Ty>_R)) -}
c5989df1d91931d69aa1f822ce60c67b
  ty1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(U)> -}
c069ddc2d67624a713829e25a0198f03
  tydec ::
    Text.Parsec.String.Parser
      (TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.tydec1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)>_R)) -}
3644ea75f7853952b79dfef22238e6fc
  tydec1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
3c0978da25a028ada9683827c0759a98
  tydecs :: Text.Parsec.String.Parser TigerAbs.Dec
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.tydecs1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Dec>_R)) -}
d0db52630b817f057af5f57cc948f105
  tydecs1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ (TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)
                   TigerParser.tydec1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)>_R))
                   @ b1
                   s1
                   (\ (x :: [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)]) ->
                    cok (TigerAbs.TypeDec x))
                   cerr
                   (\ (x :: [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)]) ->
                    eok (TigerAbs.TypeDec x))
                   eerr) -}
dfe8f322038f98691ae7f2e3c24df901
  unitexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.unitexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
2a3c64b81413d8b8bd907170144fd1a2
  unitexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.unitexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
5bab1501e12ed88de07c803ab4eecc1e
  unitexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Exp
                   TigerParser.unitexp3
                   (let {
                      x :: TigerAbs.Exp = TigerAbs.UnitExp p
                    } in
                    (\ @ b
                       (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                       (ds :: TigerAbs.Exp
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds1 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (eok :: TigerAbs.Exp
                               -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                               -> Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds2 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot] ->
                     eok
                       x
                       s1
                       (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                        Text.Parsec.Error.ParseError
                          ds4
                          (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp>_R)))
                   @ b1
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
19979d5884a7ab2baf1001dbed9b9728
  unitexp3 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.unitexp4 }) -}
3c43fb32a9940a7e79adece74f08c24a
  unitexp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.unitexp5) -}
06c702f1b6aac96319dc9cda4bd2ce1d
  unitexp5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("()"#) -}
f46073b6fc4c94c3195a6eb01aaacc7b
  v' :: TigerAbs.Var -> Text.Parsec.String.Parser TigerAbs.Var
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.v'1
                  `cast`
                (<TigerAbs.Var>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <GHC.Base.String>_R
                               <()>_R
                               <Data.Functor.Identity.Identity>_R
                               <TigerAbs.Var>_R)) -}
3b812327e6584b03c55d01d9e92c144b
  v'1 ::
    TigerAbs.Var
    -> forall b.
       Text.Parsec.Prim.State GHC.Base.String ()
       -> (TigerAbs.Var
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Var
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ (w :: TigerAbs.Var)
                   @ b
                   (w1 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w2 :: TigerAbs.Var
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: TigerAbs.Var
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 TigerParser.$wv' w @ b w1 w2 w3 w4) -}
3bdf1fcfedf6625ff4ed830dae72396e
  vardec :: Text.Parsec.String.Parser TigerAbs.Dec
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.vardec1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Dec>_R)) -}
0c484673fd5d563c9f8b278b615890fc
  vardec1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.vardec2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Dec)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
4aa8ffc38c5a3ab3cbc0bf96f21d9ffc
  vardec2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Dec
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Dec
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
e5375a1c842fb31e02d4ebab10833f74
  varexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.varexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
2f48ed5aee498f5a8d74a65e9d49fb40
  varexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.varexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
04368bf927851247a10d8d371b0918fb
  varexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 TigerParser.varexp3
                   @ b
                   eta
                   (\ (x :: TigerAbs.Var)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta1
                      (TigerAbs.VarExp x p)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: TigerAbs.Var)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    eta3
                      (TigerAbs.VarExp x p)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
9896d755a45b432e85a563537f27aee6
  varexp3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Var
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Var
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Var
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Var
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    TigerParser.$wv'
                      (TigerAbs.SimpleVar
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s4 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter2
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Var)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    TigerParser.$wv'
                      (TigerAbs.SimpleVar
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s4 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter1
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Var)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err')))
                   eerr }) -}
7b220b7439b684d1f933bb694e1c39c1
  variable :: Text.Parsec.String.Parser TigerAbs.Var
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.varexp3
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Var>_R)) -}
d2f25685f802070ea9769147d23446ba
  whileexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.whileexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
a715a5bfff0d562302740c619cfb08fb
  whileexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.whileexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
43bbe8cc2a6631b9b8837324b98e1483
  whileexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
"SPEC/TigerParser $fStream[]mtok @ Identity _" [orphan] forall @ tok
                                                               (v :: GHC.Base.Monad
                                                                       Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  v
  = TigerParser.$s$fStream[]mtok @ tok
"SPEC/TigerParser $fStream[]mtok_$cuncons @ Identity _" [orphan] forall @ tok
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = TigerParser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

